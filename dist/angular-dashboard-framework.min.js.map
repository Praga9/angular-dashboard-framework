{"version":3,"sources":["adf.js","column-custom.js","angular-dashboard-framework.min.js","column.js","dashboard.js","provider.js","row.js","widget-content.js","widget.js","angular-dashboard-framework.tpl.js","angular-dashboard-framework.js"],"names":["window","undefined","angular","module","value","directive","$log","$compile","$rootScope","adfTemplatePath","rowTemplate","dashboard","columnCustomController","$scope","columnState","isHidden","isExpanded","addWidgetDialog","$emit","column","$on","evt","expandedCid","cid","isDefined","rows","sortableConfig","group","name","handle","ghostClass","animation","onEnd","onAdd","$broadcast","onRemove","onUpdate","$inject","restrict","replace","scope","editMode","continuousEditMode","adfModel","options","templateUrl","controller","link","$element","col","id","isArray","cloned","append","moveWidgetInColumn","widgets","$apply","splice","newIndex","oldIndex","findWidget","index","widget","i","length","w","idEquals","wid","findColumn","model","r","j","columns","c","getId","el","getAttribute","addWidgetToColumn","targetColumn","from","sourceColumn","item","warn","removeWidgetFromColumn","applySortable","sortable","Sortable","create","on","destroy","$timeout","$uibModal","stringToBoolean","string","toLowerCase","Boolean","copyWidgets","source","target","shift","push","fillStructure","root","counter","forEach","row","isUndefined","readColumns","changeStructure","structure","copy","createConfiguration","type","cfg","config","findFirstWidgetColumn","error","addNewWidgetToModel","unshift","isEditModeImmediate","edit","immediate","openEditMode","changeConfigForWidgetById","widgetType","widgetTitle","widgetForUpdate","key","defConfig","extend","title","setExternalApiFunctions","api","saveDashboard","manageEditMode","editDashboardDialog","cancelEditMode","changeDashStructure","triggerDashboardChanged","addNewWidget","widgetName","changeWidgetConfig","externalApi","transclude","collapsible","editable","maximizable","adfWidgetFilter","widgetFilter","structureName","$watch","oldVal","newVal","structures","titleTemplateUrl","editClass","toggleEditMode","modelCopy","collapseAll","collapseExpandStatus","editDashboardScope","$new","adfEditTemplatePath","editTemplateUrl","instance","open","backdrop","info","closeDialog","close","$destroy","addScope","isFunction","noWidgetsAvailable","equals","adfAddTemplatePath","addTemplateUrl","opts","addWidget","event","stopPropagation","$attr","enableConfirmDelete","enableconfirmdelete","provider","widgetsPath","messageTemplate","loadingTemplate","defaultApplyFunction","this","reload","frameless","apply","path","template","$get","Date","getTime","other","toString","columnTemplate","$q","$sce","$http","$templateCache","$controller","$injector","parseUrl","url","parsedUrl","indexOf","substring","getTemplate","deferred","defer","resolve","tpl","get","getTrustedResourceUrl","success","response","put","reject","promise","compileWidget","currentScope","content","html","templateScope","base","widgetSharedData","dashId","resolvers","$tpl","isString","invoke","all","then","locals","templateCtrl","controllerAs","children","data","contents","reason","msg","onEditConfig","onUpdateConfig","_","preLink","definition","styleClass","configIdx","widgetState","isCollapsed","collapsed","configBeingEdited","debug","postLink","deleteWidget","findIndex","remove","deleteScope","deleteTemplateUrl","deleteDialog","createApplyPromise","result","when","editScope","saveDialog","validationError","applyFn","err","args","showFilters","widgetClasses","classes","openFullScreen","fullScreenScope","size","modalSize","windowClass","toggleWidgetFullscreen","compile","pre","post","run"],"mappings":"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","file":"angular-dashboard-framework.min.js","sourcesContent":["/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\nangular.module('adf', ['adf.provider', 'ui.bootstrap'])\n  .value('adfTemplatePath', '../src/templates/')\n  .value('rowTemplate', '<adf-dashboard-row row=\"row\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"row in column.rows track by $index\" />')\n  .value('columnTemplate', '<adf-dashboard-column-custom column=\"column\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"column in row.columns track by $index\" />')\n  .value('adfVersion', '<<adfVersion>>');\n","/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n/* global angular */\nangular.module('adf')\n  .directive('adfDashboardColumnCustom', function ($log, $compile, $rootScope, adfTemplatePath, rowTemplate, dashboard) {\n    'use strict';\n\n    function columnCustomController($scope) {\n\n      $scope.columnState = {\n        isHidden: false,\n        isExpanded: false\n      };\n\n      $scope.addWidgetDialog = function () {\n        $scope.$emit('addWidgetDialog', $scope.column);\n      };\n\n      $scope.$on('widgetToggleFullscreen', function (evt, expandedCid) {\n        if ($scope.column.cid !== expandedCid) {\n          $scope.columnState.isHidden = !$scope.columnState.isHidden;\n        }\n      });\n\n      if (!angular.isDefined($scope.column.rows)) {\n        $scope.sortableConfig = {\n          group: {\n            name: 'widgets'\n          },\n          handle: '.adf-move',\n          ghostClass: 'placeholder',\n          animation: 150,\n          onEnd: function () {\n            $scope.$emit('dashboardWidgetChanged');\n          },\n          onAdd: function () {\n            $rootScope.$broadcast('adfWidgetAddedToColumn');\n          },\n          onRemove: function () {\n            $rootScope.$broadcast('adfWidgetRemovedFromColumn');\n          },\n          onUpdate: function () {\n            $rootScope.$broadcast('adfWidgetMovedInColumn');\n          }\n        };\n      }\n    }\n\n    return {\n      restrict: 'E',\n      replace: true,\n      scope: {\n        column: '=',\n        editMode: '=',\n        continuousEditMode: '=',\n        adfModel: '=',\n        options: '='\n      },\n      templateUrl: adfTemplatePath + 'dashboard-column-custom.html',\n      controller: columnCustomController,\n      link: function ($scope, $element) {\n        // set id\n        var col = $scope.column;\n        if (!col.cid) {\n          col.cid = dashboard.id();\n        }\n\n        if (angular.isDefined(col.rows) && angular.isArray(col.rows)) {\n          // be sure to tell Angular about the injected directive and push the new row directive to the column\n          $compile(rowTemplate)($scope, function (cloned) {\n            $element.append(cloned);\n          });\n        }\n      }\n    };\n\n  });\n","(function(window, undefined) {'use strict';\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\nangular.module('adf', ['adf.provider', 'ui.bootstrap'])\n  .value('adfTemplatePath', '../src/templates/')\n  .value('rowTemplate', '<adf-dashboard-row row=\"row\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"row in column.rows track by $index\" />')\n  .value('columnTemplate', '<adf-dashboard-column-custom column=\"column\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"column in row.columns track by $index\" />')\n  .value('adfVersion', '0.12.0-SNAPSHOT');\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n/* global angular */\nangular.module('adf')\n  .directive('adfDashboardColumnCustom', [\"$log\", \"$compile\", \"$rootScope\", \"adfTemplatePath\", \"rowTemplate\", \"dashboard\", function ($log, $compile, $rootScope, adfTemplatePath, rowTemplate, dashboard) {\n    \n\n    function columnCustomController($scope) {\n\n      $scope.columnState = {\n        isHidden: false,\n        isExpanded: false\n      };\n\n      $scope.addWidgetDialog = function () {\n        $scope.$emit('addWidgetDialog', $scope.column);\n      };\n\n      $scope.$on('widgetToggleFullscreen', function (evt, expandedCid) {\n        if ($scope.column.cid !== expandedCid) {\n          $scope.columnState.isHidden = !$scope.columnState.isHidden;\n        }\n      });\n\n      if (!angular.isDefined($scope.column.rows)) {\n        $scope.sortableConfig = {\n          group: {\n            name: 'widgets'\n          },\n          handle: '.adf-move',\n          ghostClass: 'placeholder',\n          animation: 150,\n          onEnd: function () {\n            $scope.$emit('dashboardWidgetChanged');\n          },\n          onAdd: function () {\n            $rootScope.$broadcast('adfWidgetAddedToColumn');\n          },\n          onRemove: function () {\n            $rootScope.$broadcast('adfWidgetRemovedFromColumn');\n          },\n          onUpdate: function () {\n            $rootScope.$broadcast('adfWidgetMovedInColumn');\n          }\n        };\n      }\n    }\n    columnCustomController.$inject = [\"$scope\"];\n\n    return {\n      restrict: 'E',\n      replace: true,\n      scope: {\n        column: '=',\n        editMode: '=',\n        continuousEditMode: '=',\n        adfModel: '=',\n        options: '='\n      },\n      templateUrl: adfTemplatePath + 'dashboard-column-custom.html',\n      controller: columnCustomController,\n      link: function ($scope, $element) {\n        // set id\n        var col = $scope.column;\n        if (!col.cid) {\n          col.cid = dashboard.id();\n        }\n\n        if (angular.isDefined(col.rows) && angular.isArray(col.rows)) {\n          // be sure to tell Angular about the injected directive and push the new row directive to the column\n          $compile(rowTemplate)($scope, function (cloned) {\n            $element.append(cloned);\n          });\n        }\n      }\n    };\n\n  }]);\n\n/*\n* The MIT License\n*\n* Copyright (c) 2015, Sebastian Sdorra\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n\n/* global angular */\nangular.module('adf')\n  .directive('adfDashboardColumn', [\"$log\", \"$compile\", \"$rootScope\", \"adfTemplatePath\", \"rowTemplate\", \"dashboard\", function ($log, $compile, $rootScope, adfTemplatePath, rowTemplate, dashboard) {\n    \n\n    /**\n     * moves a widget in between a column\n     */\n    function moveWidgetInColumn($scope, column, evt){\n      var widgets = column.widgets;\n      // move widget and apply to scope\n      $scope.$apply(function(){\n        widgets.splice(evt.newIndex, 0, widgets.splice(evt.oldIndex, 1)[0]);\n        $rootScope.$broadcast('adfWidgetMovedInColumn');\n      });\n    }\n\n    /**\n     * finds a widget by its id in the column\n     */\n    function findWidget(column, index){\n      var widget = null;\n      for (var i=0; i<column.widgets.length; i++){\n        var w = column.widgets[i];\n        if (dashboard.idEquals(w.wid,index)){\n          widget = w;\n          break;\n        }\n      }\n      return widget;\n    }\n\n    /**\n     * finds a column by its id in the model\n     */\n    function findColumn(model, index){\n      var column = null;\n      for (var i=0; i<model.rows.length; i++){\n        var r = model.rows[i];\n        for (var j=0; j<r.columns.length; j++){\n          var c = r.columns[j];\n          if (dashboard.idEquals(c.cid, index)){\n            column = c;\n            break;\n          } else if (c.rows){\n            column = findColumn(c, index);\n          }\n        }\n        if (column){\n          break;\n        }\n      }\n      return column;\n    }\n\n    /**\n     * get the adf id from an html element\n     */\n    function getId(el){\n      var id = el.getAttribute('adf-id');\n      return id ? id : '-1';\n    }\n\n    /**\n     * adds a widget to a column\n     */\n    function addWidgetToColumn($scope, model, targetColumn, evt){\n      // find source column\n      var cid = getId(evt.from);\n      var sourceColumn = findColumn(model, cid);\n\n      if (sourceColumn){\n        // find moved widget\n        var wid = getId(evt.item);\n        var widget = findWidget(sourceColumn, wid);\n\n        if (widget){\n          // add new item and apply to scope\n          $scope.$apply(function(){\n      \t\t\tif (!targetColumn.widgets) {\n      \t\t\t\ttargetColumn.widgets = [];\n      \t\t\t}\n            targetColumn.widgets.splice(evt.newIndex, 0, widget);\n\n            $rootScope.$broadcast('adfWidgetAddedToColumn');\n            $scope.$emit('dashboardWidgetChanged');\n          });\n        } else {\n          $log.warn('could not find widget with id ' + wid);\n        }\n      } else {\n        $log.warn('could not find column with id ' + cid);\n      }\n    }\n\n    /**\n     * removes a widget from a column\n     */\n    function removeWidgetFromColumn($scope, column, evt){\n      // remove old item and apply to scope\n      $scope.$apply(function(){\n        column.widgets.splice(evt.oldIndex, 1);\n        $rootScope.$broadcast('adfWidgetRemovedFromColumn');\n      });\n    }\n\n    /**\n     * enable sortable\n     */\n    function applySortable($scope, $element, model, column){\n      // enable drag and drop\n      var el = $element[0];\n      var sortable = Sortable.create(el, {\n        group: 'widgets',\n        handle: '.adf-move',\n        ghostClass: 'placeholder',\n        animation: 150,\n        onAdd: function(evt){\n          addWidgetToColumn($scope, model, column, evt);\n        },\n        onRemove: function(evt){\n          removeWidgetFromColumn($scope, column, evt);\n        },\n        onUpdate: function(evt){\n          moveWidgetInColumn($scope, column, evt);\n        }\n      });\n\n      // destroy sortable on column destroy event\n      $element.on('$destroy', function () {\n        // check sortable element, before calling destroy\n        // see https://github.com/sdorra/angular-dashboard-framework/issues/118\n        if (sortable.el){\n          sortable.destroy();\n        }\n      });\n    }\n\n    return {\n      restrict: 'E',\n      replace: true,\n      scope: {\n        column: '=',\n        editMode: '=',\n        continuousEditMode: '=',\n        adfModel: '=',\n        options: '='\n      },\n      templateUrl: adfTemplatePath + 'dashboard-column.html',\n      link: function ($scope, $element) {\n        // set id\n        var col = $scope.column;\n        if (!col.cid){\n          col.cid = dashboard.id();\n        }\n\n        if (angular.isDefined(col.rows) && angular.isArray(col.rows)) {\n          // be sure to tell Angular about the injected directive and push the new row directive to the column\n          $compile(rowTemplate)($scope, function(cloned) {\n            $element.append(cloned);\n          });\n        } else {\n          // enable drag and drop for widget only columns\n          applySortable($scope, $element, $scope.adfModel, col);\n        }\n      }\n    };\n  }]);\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * @ngdoc directive\n * @name adf.directive:adfDashboard\n * @element div\n * @restrict EA\n * @scope\n * @description\n *\n * `adfDashboard` is a directive which renders the dashboard with all its\n * components. The directive requires a name attribute. The name of the\n * dashboard can be used to store the model.\n *\n * @param {string} name name of the dashboard. This attribute is required.\n * @param {boolean=} editable false to disable the editmode of the dashboard.\n * @param {boolean=} collapsible true to make widgets collapsible on the dashboard.\n * @param {boolean=} maximizable true to add a button for open widgets in a large modal panel.\n * @param {boolean=} enableConfirmDelete true to ask before remove an widget from the dashboard.\n * @param {string=} structure the default structure of the dashboard.\n * @param {object=} adfModel model object of the dashboard.\n * @param {function=} adfWidgetFilter function to filter widgets on the add dialog.\n * @param {boolean=} continuousEditMode enable continuous edit mode, to fire add/change/remove\n *                   events during edit mode not reset it if edit mode is exited.\n */\n\nangular.module('adf')\n  .directive('adfDashboard', [\"$rootScope\", \"$log\", \"$timeout\", \"$uibModal\", \"dashboard\", \"adfTemplatePath\", function ($rootScope, $log, $timeout, $uibModal, dashboard, adfTemplatePath) {\n    \n\n    function stringToBoolean(string){\n      switch(angular.isDefined(string) ? string.toLowerCase() : null){\n        case 'true': case 'yes': case '1': return true;\n        case 'false': case 'no': case '0': case null: return false;\n        default: return Boolean(string);\n      }\n    }\n\n    function copyWidgets(source, target) {\n      if ( source.widgets && source.widgets.length > 0 ){\n        var w = source.widgets.shift();\n        while (w){\n          target.widgets.push(w);\n          w = source.widgets.shift();\n        }\n      }\n    }\n\n    /**\n     * Copy widget from old columns to the new model\n     * @param object root the model\n     * @param array of columns\n     * @param counter\n     */\n    function fillStructure(root, columns, counter) {\n      counter = counter || 0;\n\n      if (angular.isDefined(root.rows)) {\n        angular.forEach(root.rows, function (row) {\n          angular.forEach(row.columns, function (column) {\n            // if the widgets prop doesn't exist, create a new array for it.\n            // this allows ui.sortable to do it's thing without error\n            if (!column.widgets) {\n              column.widgets = [];\n            }\n\n            // if a column exist at the counter index, copy over the column\n            if (angular.isDefined(columns[counter])) {\n              // do not add widgets to a column, which uses nested rows\n              if (angular.isUndefined(column.rows)){\n                copyWidgets(columns[counter], column);\n                counter++;\n              }\n            }\n\n            // run fillStructure again for any sub rows/columns\n            counter = fillStructure(column, columns, counter);\n          });\n        });\n      }\n      return counter;\n    }\n\n    /**\n    * Read Columns: recursively searches an object for the 'columns' property\n    * @param object model\n    * @param array  an array of existing columns; used when recursion happens\n    */\n    function readColumns(root, columns) {\n      columns = columns || [];\n\n      if (angular.isDefined(root.rows)) {\n        angular.forEach(root.rows, function (row) {\n          angular.forEach(row.columns, function (col) {\n            columns.push(col);\n            // keep reading columns until we can't any more\n            readColumns(col, columns);\n          });\n        });\n      }\n\n      return columns;\n    }\n\n    function changeStructure(model, structure){\n      var columns = readColumns(model);\n      var counter = 0;\n\n      model.rows = angular.copy(structure.rows);\n\n      while ( counter < columns.length ){\n        counter = fillStructure(model, columns, counter);\n      }\n    }\n\n    function createConfiguration(type){\n      var cfg = {};\n      var config = dashboard.widgets[type].config;\n      if (config){\n        cfg = angular.copy(config);\n      }\n      return cfg;\n    }\n\n    /**\n     * Find first widget column in model.\n     *\n     * @param dashboard model\n     */\n    function findFirstWidgetColumn(model){\n      var column = null;\n      if (!angular.isArray(model.rows)){\n        $log.error('model does not have any rows');\n        return null;\n      }\n      for (var i=0; i<model.rows.length; i++){\n        var row = model.rows[i];\n        if (angular.isArray(row.columns)){\n          for (var j=0; j<row.columns.length; j++){\n            var col = row.columns[j];\n            if (!col.rows){\n              column = col;\n              break;\n            }\n          }\n        }\n        if (column){\n          break;\n        }\n      }\n      return column;\n    }\n\n    /**\n     * Adds the widget to first column of the model.\n     *\n     * @param dashboard model\n     * @param widget to add to model\n     * @param name name of the dashboard\n     */\n    function addNewWidgetToModel(model, widget, name, column){\n      if (model){\n        if(!column) {\n          column = findFirstWidgetColumn(model);\n        }\n        if (column){\n          if (!column.widgets){\n            column.widgets = [];\n          }\n          column.widgets.unshift(widget);\n\n          // broadcast added event\n          $rootScope.$broadcast('adfWidgetAdded', name, model, widget);\n        } else {\n          $log.error('could not find first widget column');\n        }\n      } else {\n        $log.error('model is undefined');\n      }\n    }\n\n    /**\n     * Checks if the edit mode of the widget should be opened immediately.\n     *\n     * @param widget type\n     */\n    function isEditModeImmediate(type){\n      var widget = dashboard.widgets[type];\n      return widget && widget.edit && widget.edit.immediate;\n    }\n\n    /**\n     * Opens the edit mode of the specified widget.\n     *\n     * @param dashboard scope\n     * @param widget\n     */\n    function openEditMode($scope, widget){\n      // wait some time before fire enter edit mode event\n      $timeout(function(){\n        $scope.$broadcast('adfWidgetEnterEditMode', widget);\n      }, 200);\n    }\n\n    /**\n     * finds a widget by its id in the column\n     */\n    function findWidget(column, index){\n      var widget = null;\n      for (var i=0; i<column.widgets.length; i++){\n        var w = column.widgets[i];\n        if (dashboard.idEquals(w.wid,index)){\n          widget = w;\n          break;\n        }\n      }\n      return widget;\n    }\n\n    /**\n     * finds a column by its id in the model\n     */\n    function findColumn(model, index){\n      var column = null;\n      for (var i=0; i<model.rows.length; i++){\n        var r = model.rows[i];\n        for (var j=0; j<r.columns.length; j++){\n          var c = r.columns[j];\n          if (dashboard.idEquals(c.cid, index)){\n            column = c;\n            break;\n          } else if (c.rows){\n            column = findColumn(c, index);\n          }\n        }\n        if (column){\n          break;\n        }\n      }\n      return column;\n    }\n\n    /**\n     * Finds widget by id and changes its config\n     */\n    function changeConfigForWidgetById($scope, wid, config, widgetType, widgetTitle){\n      var model = $scope.model,\n        rows = model.rows,\n        widgetForUpdate = null;\n\n      if(rows){\n        angular.forEach(rows, function(row){\n          var columns = row.columns;\n\n          if(columns){\n            angular.forEach(columns, function(column){\n              var widgets = column.widgets;\n\n              if(widgets){\n                angular.forEach(widgets, function (widget, key) {\n\n                  if( widget.wid === wid ){\n                    widgetForUpdate = widget;\n                  }\n                });\n              }\n            });\n          }\n        });\n      }\n\n      if (widgetForUpdate) {\n        // If widgetType is defined and it is not equal to previous type, create config for new type of widget.\n        if (widgetType && widgetType !== widgetForUpdate.type) {\n          var defConfig = createConfiguration(widgetType);\n          widgetForUpdate.config = angular.extend({}, defConfig, config);\n          widgetForUpdate.type = widgetType;\n          widgetForUpdate.wid = dashboard.id();\n        }\n        else {\n          widgetForUpdate.config = angular.extend({}, widgetForUpdate.config, config);\n        }\n\n        if (widgetTitle) {\n          widgetForUpdate.title = widgetTitle;\n        }\n      }\n    }\n\n    function setExternalApiFunctions(scope) {\n      var api = {};\n\n      api.saveDashboard = function() {\n        return scope.saveDashboard();\n      };\n\n      api.manageEditMode = function() {\n        return scope.manageEditMode();\n      };\n\n      api.editDashboardDialog = function() {\n        return scope.editDashboardDialog();\n      };\n\n      api.cancelEditMode = function() {\n        return scope.cancelEditMode();\n      };\n\n      api.changeDashStructure = function(name, structure) {\n        scope.changeStructure(name, structure, scope);\n      };\n\n      api.triggerDashboardChanged = function() {\n        scope.triggerDashboardChanged();\n      };\n\n      api.addNewWidget = function(config, type, name) {\n        var defConfig = createConfiguration(type);\n\n        var widgetName = name ? name : '',\n          model = scope.model,\n          widget = {\n          type: type,\n          config: angular.extend({}, defConfig, config),\n          wid: dashboard.id(),\n          title: widgetName\n        };\n\n        addNewWidgetToModel(model, widget, widgetName);\n\n        scope.triggerDashboardChanged();\n      };\n\n      api.changeWidgetConfig = function(wid, config, type, title) {\n        changeConfigForWidgetById(scope, wid, config, type, title);\n\n        scope.$broadcast('adfWidgetConfigChanged', wid);\n\n        scope.triggerDashboardChanged();\n      };\n\n      scope.externalApi = api;\n    }\n\n    return {\n      replace: true,\n      restrict: 'EA',\n      transclude : false,\n      scope: {\n        structure: '@',\n        name: '@',\n        collapsible: '@',\n        editable: '@',\n        editMode: '@',\n        continuousEditMode: '=',\n        maximizable: '@',\n        adfModel: '=',\n        adfWidgetFilter: '=',\n        externalApi: '='\n      },\n      controller: [\"$scope\", function($scope){\n        var model = {};\n        var structure = {};\n        var widgetFilter = null;\n        var structureName = {};\n        var name = $scope.name;\n\n        // Watching for changes on adfModel\n        $scope.$watch('adfModel', function(oldVal, newVal) {\n          // has model changed or is the model attribute not set\n          if (newVal !== null || (oldVal === null && newVal === null)) {\n            model = $scope.adfModel;\n            widgetFilter = $scope.adfWidgetFilter;\n            if ( ! model || ! model.rows ){\n              structureName = $scope.structure;\n              structure = dashboard.structures[structureName];\n              if (structure){\n                if (model){\n                  model.rows = angular.copy(structure).rows;\n                } else {\n                  model = angular.copy(structure);\n                }\n                model.structure = structureName;\n              } else {\n                $log.error( 'could not find structure ' + structureName);\n              }\n            }\n\n            if (model) {\n              if (!model.title){\n                model.title = 'Dashboard';\n              }\n              if (!model.titleTemplateUrl) {\n                model.titleTemplateUrl = adfTemplatePath + 'dashboard-title-custom.html';\n              }\n              $scope.model = model;\n            } else {\n              $log.error('could not find or create model');\n            }\n          }\n        }, true);\n\n        // edit mode\n        $scope.editMode = false;\n        $scope.editClass = '';\n\n        $scope.toggleEditMode = function(){\n          $scope.editMode = ! $scope.editMode;\n          if ($scope.editMode){\n            if (!$scope.continuousEditMode) {\n              $scope.modelCopy = angular.copy($scope.adfModel, {});\n              $rootScope.$broadcast('adfIsEditMode');\n            }\n          }\n\n          if (!$scope.editMode){\n             $scope.triggerDashboardChanged();\n          }\n        };\n\n        $scope.$on('adfToggleEditMode', function() {\n            $scope.toggleEditMode();\n        });\n\n        $scope.collapseAll = function(collapseExpandStatus){\n          $rootScope.$broadcast('adfDashboardCollapseExpand',{collapseExpandStatus : collapseExpandStatus});\n        };\n\n        $scope.cancelEditMode = function(){\n          $scope.editMode = false;\n          if (!$scope.continuousEditMode) {\n            $scope.modelCopy = angular.copy($scope.modelCopy, $scope.adfModel);\n          }\n          $rootScope.$broadcast('adfDashboardEditsCancelled');\n        };\n\n        // edit dashboard settings\n        $scope.editDashboardDialog = function(){\n          var editDashboardScope = $scope.$new();\n          // create a copy of the title, to avoid changing the title to\n          // \"dashboard\" if the field is empty\n          editDashboardScope.copy = {\n            title: model.title\n          };\n          editDashboardScope.structures = dashboard.structures;\n\n          var adfEditTemplatePath = adfTemplatePath + 'dashboard-edit.html';\n          if(model.editTemplateUrl) {\n            adfEditTemplatePath = model.editTemplateUrl;\n          }\n          var instance = $uibModal.open({\n            scope: editDashboardScope,\n            templateUrl: adfEditTemplatePath,\n            backdrop: 'static'\n          });\n          editDashboardScope.changeStructure = function(name, structure){\n            $log.info('change structure to ' + name);\n            changeStructure(model, structure, $scope);\n          };\n          editDashboardScope.closeDialog = function(){\n            // copy the new title back to the model\n            model.title = editDashboardScope.copy.title;\n            // close modal and destroy the scope\n            instance.close();\n            editDashboardScope.$destroy();\n          };\n        };\n\n        // add widget dialog\n        $scope.addWidgetDialog = function(column){\n          var addScope = $scope.$new();\n          var model = $scope.model;\n          var widgets;\n          if (angular.isFunction(widgetFilter)){\n            widgets = {};\n            angular.forEach(dashboard.widgets, function(widget, type){\n              if (widgetFilter(widget, type, model, column)){\n                widgets[type] = widget;\n              }\n            });\n          } else {\n            widgets = dashboard.widgets;\n          }\n          addScope.widgets = widgets;\n          addScope.noWidgetsAvailable = angular.equals({}, widgets);\n\n          var adfAddTemplatePath = adfTemplatePath + 'widget-add.html';\n          if(model.addTemplateUrl) {\n            adfAddTemplatePath = model.addTemplateUrl;\n          }\n\n          var opts = {\n            scope: addScope,\n            templateUrl: adfAddTemplatePath,\n            backdrop: 'static'\n          };\n\n          var instance = $uibModal.open(opts);\n          addScope.addWidget = function(widget){\n            var w = {\n              type: widget,\n              config: createConfiguration(widget),\n              wid: dashboard.id()\n            };\n            addNewWidgetToModel(model, w, name, column);\n            // close and destroy\n            instance.close();\n            addScope.$destroy();\n\n            // check for open edit mode immediately\n            if (isEditModeImmediate(widget)){\n              openEditMode($scope, w);\n            }\n\n            $scope.triggerDashboardChanged();\n          };\n          addScope.closeDialog = function(){\n            // close and destroy\n            instance.close();\n            addScope.$destroy();\n          };\n        };\n\n        $scope.manageEditMode = function () {\n          $scope.editMode = !$scope.editMode;\n          if ($scope.editMode){\n            $scope.modelCopy = angular.copy($scope.adfModel, {});\n          }\n          return $scope.editMode;\n        };\n\n        $scope.saveDashboard = function() {\n          $scope.editMode = false;\n          $scope.triggerDashboardChanged();\n          return false;\n        };\n\n        $scope.changeStructure = function(name, structure) {\n          changeStructure(model, structure, $scope);\n        };\n\n        $scope.triggerDashboardChanged = function() {\n          $rootScope.$broadcast('adfDashboardChanged', name, model);\n        };\n\n        $scope.addNewWidgetToModel = addNewWidgetToModel;\n\n        $scope.$on('addWidgetDialog', function(event, column) {\n          $scope.addWidgetDialog(column);\n        });\n\n        $scope.$on('dashboardWidgetChanged', function() {\n          // the event should only be caught by dashboard directive, that's why it is not propagated further up the chain\n          event.stopPropagation();\n\n          $scope.triggerDashboardChanged();\n        });\n\n        $scope.$on('dashboardWidgetConfigUpdated', function(event, config, wid, cid) {\n          // the event should only be caught by dashboard directive, that's why it is not propagated further up the chain\n          event.stopPropagation();\n\n          // we need to overwrite config object before saving to database, otherwise it is set after saving so the changed data is lost\n          if(cid) {\n            var col = findColumn(model, cid);\n            if(wid && col) {\n              var widget = findWidget(col, wid);\n              if(widget) {\n                widget.config = config;\n                $scope.triggerDashboardChanged();\n              }\n            }\n          }\n        });\n\n        setExternalApiFunctions($scope);\n      }],\n      link: function ($scope, $element, $attr) {\n        // pass options to scope\n        var options = {\n          name: $attr.name,\n          editable: true,\n          enableConfirmDelete: stringToBoolean($attr.enableconfirmdelete),\n          maximizable: stringToBoolean($attr.maximizable),\n          collapsible: stringToBoolean($attr.collapsible)\n        };\n        if (angular.isDefined($attr.editable)){\n          options.editable = stringToBoolean($attr.editable);\n        }\n        $scope.options = options;\n      },\n      templateUrl: adfTemplatePath + 'dashboard.html'\n    };\n  }]);\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\n/**\n * @ngdoc object\n * @name adf.dashboardProvider\n * @description\n *\n * The dashboardProvider can be used to register structures and widgets.\n */\nangular.module('adf.provider', [])\n  .provider('dashboard', function(){\n\n    var widgets = {};\n    var widgetsPath = '';\n    var structures = {};\n    var messageTemplate = '<div class=\"alert alert-danger\">{}</div>';\n    var loadingTemplate = '\\\n      <div class=\"progress progress-striped active\">\\n\\\n        <div class=\"progress-bar\" role=\"progressbar\" style=\"width: 100%\">\\n\\\n          <span class=\"sr-only\">loading ...</span>\\n\\\n        </div>\\n\\\n      </div>';\n\n    // default apply function of widget.edit.apply\n    var defaultApplyFunction = function(){\n      return true;\n    };\n\n   /**\n    * @ngdoc method\n    * @name adf.dashboardProvider#widget\n    * @methodOf adf.dashboardProvider\n    * @description\n    *\n    * Registers a new widget.\n    *\n    * @param {string} name of the widget\n    * @param {object} widget to be registered.\n    *\n    *   Object properties:\n    *\n    *   - `title` - `{string=}` - The title of the widget.\n    *   - `description` - `{string=}` - Description of the widget.\n    *   - `collapsed` - `{boolean=}` - true if the widget should be in collapsed state. Default is false.\n    *   - `config` - `{object}` - Predefined widget configuration.\n    *   - `controller` - `{string=|function()=}` - Controller fn that should be\n    *      associated with newly created scope of the widget or the name of a\n    *      {@link http://docs.angularjs.org/api/angular.Module#controller registered controller}\n    *      if passed as a string.\n    *   - `controllerAs` - `{string=}` - A controller alias name. If present the controller will be\n    *      published to scope under the `controllerAs` name.\n    *   - `frameless` - `{boolean=}` - false if the widget should be shown in frameless mode. The default is false.\n    *   - `styleClass` - `{object}` - space delimited string or map of classes bound to the widget.\n    *   - `template` - `{string=|function()=}` - html template as a string.\n    *   - `templateUrl` - `{string=}` - path to an html template.\n    *   - `reload` - `{boolean=}` - true if the widget could be reloaded. The default is false.\n    *   - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n    *      be injected into the controller. If any of these dependencies are promises, the widget\n    *      will wait for them all to be resolved or one to be rejected before the controller is\n    *      instantiated.\n    *      If all the promises are resolved successfully, the values of the resolved promises are\n    *      injected.\n    *\n    *      The map object is:\n    *      - `key` – `{string}`: a name of a dependency to be injected into the controller.\n    *      - `factory` - `{string|function}`: If `string` then it is an alias for a service.\n    *        Otherwise if function, then it is {@link http://docs.angularjs.org/api/AUTO.$injector#invoke injected}\n    *        and the return value is treated as the dependency. If the result is a promise, it is\n    *        resolved before its value is injected into the controller.\n    *   - `edit` - `{object}` - Edit modus of the widget.\n    *      - `controller` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\n    *      - `controllerAs` - `{string=}` - Same as above, but for the edit mode of the widget.\n    *      - `template` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\n    *      - `templateUrl` - `{string=}` - Same as above, but for the edit mode of the widget.\n    *      - `resolve` - `{Object.<string, function>=}` - Same as above, but for the edit mode of the widget.\n    *      - `reload` - {boolean} - true if the widget should be reloaded, after the edit mode is closed.\n    *        Default is true.\n    *      - `immediate` - {boolean} - The widget enters the edit mode immediately after creation. Default is false.\n    *      - `apply` - `{function()=}` - The apply function is called, before the widget is saved.\n    *        The function have to return a boolean or an promise which can be resolved to a boolean.\n    *        The function can use injection.\n    *\n    * @returns {Object} self\n    */\n    this.widget = function(name, widget){\n      var w = angular.extend({reload: false, frameless: false}, widget);\n      if ( w.edit ){\n        var edit = {\n          reload: true,\n          immediate: false,\n          apply: defaultApplyFunction\n        };\n        angular.extend(edit, w.edit);\n        w.edit = edit;\n      }\n      widgets[name] = w;\n      return this;\n    };\n\n    /**\n     * @ngdoc method\n     * @name adf.dashboardProvider#widgetsPath\n     * @methodOf adf.dashboardProvider\n     * @description\n     *\n     * Sets the path to the directory which contains the widgets. The widgets\n     * path is used for widgets with a templateUrl which contains the\n     * placeholder {widgetsPath}. The placeholder is replaced with the\n     * configured value, before the template is loaded, but the template is\n     * cached with the unmodified templateUrl (e.g.: {widgetPath}/src/widgets).\n     * The default value of widgetPaths is ''.\n     *\n     *\n     * @param {string} path to the directory which contains the widgets\n     *\n     * @returns {Object} self\n     */\n    this.widgetsPath = function(path){\n      widgetsPath = path;\n      return this;\n    };\n\n   /**\n    * @ngdoc method\n    * @name adf.dashboardProvider#structure\n    * @methodOf adf.dashboardProvider\n    * @description\n    *\n    * Registers a new structure.\n    *\n    * @param {string} name of the structure\n    * @param {object} structure to be registered.\n    *\n    *   Object properties:\n    *\n    *   - `rows` - `{Array.<Object>}` - Rows of the dashboard structure.\n    *     - `styleClass` - `{string}` - CSS Class of the row.\n    *     - `columns` - `{Array.<Object>}` - Columns of the row.\n    *       - `styleClass` - `{string}` - CSS Class of the column.\n    *\n    * @returns {Object} self\n    */\n    this.structure = function(name, structure){\n      structures[name] = structure;\n      return this;\n    };\n\n   /**\n    * @ngdoc method\n    * @name adf.dashboardProvider#messageTemplate\n    * @methodOf adf.dashboardProvider\n    * @description\n    *\n    * Changes the template for messages.\n    *\n    * @param {string} template for messages.\n    *\n    * @returns {Object} self\n    */\n    this.messageTemplate = function(template){\n      messageTemplate = template;\n      return this;\n    };\n\n   /**\n    * @ngdoc method\n    * @name adf.dashboardProvider#loadingTemplate\n    * @methodOf adf.dashboardProvider\n    * @description\n    *\n    * Changes the template which is displayed as\n    * long as the widget resources are not resolved.\n    *\n    * @param {string} template loading template\n    *\n    * @returns {Object} self\n    */\n    this.loadingTemplate = function(template){\n      loadingTemplate = template;\n      return this;\n    };\n\n   /**\n    * @ngdoc service\n    * @name adf.dashboard\n    * @description\n    *\n    * The dashboard holds all options, structures and widgets.\n    *\n    * @property {Array.<Object>} widgets Array of registered widgets.\n    * @property {string} widgetsPath Default path for widgets.\n    * @property {Array.<Object>} structures Array of registered structures.\n    * @property {string} messageTemplate Template for messages.\n    * @property {string} loadingTemplate Template for widget loading.\n    *\n    * @returns {Object} self\n    */\n    this.$get = function(){\n      var cid = 0;\n\n      return {\n        widgets: widgets,\n        widgetsPath: widgetsPath,\n        structures: structures,\n        messageTemplate: messageTemplate,\n        loadingTemplate: loadingTemplate,\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboard#id\n         * @methodOf adf.dashboard\n         * @description\n         *\n         * Creates an ongoing numeric id. The method is used to create ids for\n         * columns and widgets in the dashboard.\n         */\n        id: function(){\n          return new Date().getTime() + '-' + (++cid);\n        },\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboard#idEqual\n         * @methodOf adf.dashboard\n         * @description\n         *\n         * Checks if the given ids are equal.\n         *\n         * @param {string} id widget or column id\n         * @param {string} other widget or column id\n         */\n         idEquals: function(id, other){\n           // use toString, because old ids are numbers\n           return ((id) && (other)) && (id.toString() === other.toString());\n         }\n      };\n    };\n\n  });\n\n/*\n* The MIT License\n*\n* Copyright (c) 2015, Sebastian Sdorra\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n\n/* global angular */\nangular.module('adf')\n  .directive('adfDashboardRow', [\"$compile\", \"adfTemplatePath\", \"columnTemplate\", function ($compile, adfTemplatePath, columnTemplate) {\n    \n\n    return {\n      restrict: 'E',\n      replace: true,\n      scope: {\n        row: '=',\n        adfModel: '=',\n        editMode: '=',\n        continuousEditMode: '=',\n        options: '='\n      },\n      templateUrl: adfTemplatePath + 'dashboard-row.html',\n      link: function($scope, $element) {\n        if (angular.isDefined($scope.row.columns) && angular.isArray($scope.row.columns)) {\n          $compile(columnTemplate)($scope, function(cloned) {\n            $element.append(cloned);\n          });\n        }\n      }\n    };\n  }]);\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\nangular.module('adf')\n  .directive('adfWidgetContent', [\"$log\", \"$q\", \"$sce\", \"$http\", \"$templateCache\", \"$compile\", \"$controller\", \"$injector\", \"dashboard\", function($log, $q, $sce, $http, $templateCache,\n          $compile, $controller, $injector, dashboard) {\n\n    function parseUrl(url) {\n      var parsedUrl = url;\n      if (url.indexOf('{widgetsPath}') >= 0) {\n        parsedUrl = url.replace('{widgetsPath}', dashboard.widgetsPath)\n                .replace('//', '/');\n        if (parsedUrl.indexOf('/') === 0) {\n          parsedUrl = parsedUrl.substring(1);\n        }\n      }\n      return parsedUrl;\n    }\n\n    function getTemplate(widget) {\n      var deferred = $q.defer();\n\n      if (widget.template) {\n        deferred.resolve(widget.template);\n      } else if (widget.templateUrl) {\n        // try to fetch template from cache\n        var tpl = $templateCache.get(widget.templateUrl);\n        if (tpl) {\n          deferred.resolve(tpl);\n        } else {\n          var url = $sce.getTrustedResourceUrl(parseUrl(widget.templateUrl));\n          $http.get(url)\n               .success(function(response) {\n                 // put response to cache, with unmodified url as key\n                 $templateCache.put(widget.templateUrl, response);\n                 deferred.resolve(response);\n               })\n               .error(function() {\n                 deferred.reject('could not load template');\n               });\n        }\n      }\n\n      return deferred.promise;\n    }\n\n    function compileWidget($scope, $element, currentScope) {\n      var model = $scope.model;\n      var content = $scope.content;\n\n      // display loading template\n      $element.html(dashboard.loadingTemplate);\n\n      // create new scope\n      var templateScope = $scope.$new();\n\n      // pass config object to scope\n      if (!model.config) {\n        model.config = {};\n      }\n\n      templateScope.config = model.config;\n\n      // local injections\n      var base = {\n        $scope: templateScope,\n        widget: model,\n        config: model.config,\n        widgetSharedData: $scope.widgetSharedData || {},\n        dashId: $scope.dashId\n      };\n\n      // get resolve promises from content object\n      var resolvers = {};\n      resolvers.$tpl = getTemplate(content);\n      if (content.resolve) {\n        angular.forEach(content.resolve, function(promise, key) {\n          if (angular.isString(promise)) {\n            resolvers[key] = $injector.get(promise);\n          } else {\n            resolvers[key] = $injector.invoke(promise, promise, base);\n          }\n        });\n      }\n\n      // resolve all resolvers\n      $q.all(resolvers).then(function(locals) {\n        angular.extend(locals, base);\n\n        // compile & render template\n        var template = locals.$tpl;\n        $element.html(template);\n        if (content.controller) {\n          var templateCtrl = $controller(content.controller, locals);\n          if (content.controllerAs) {\n            templateScope[content.controllerAs] = templateCtrl;\n          }\n          $element.children().data('$ngControllerController', templateCtrl);\n        }\n        $compile($element.contents())(templateScope);\n      }, function(reason) {\n        // handle promise rejection\n        var msg = 'Could not resolve all promises';\n        if (reason) {\n          msg += ': ' + reason;\n        }\n        $log.warn(msg);\n        $element.html(dashboard.messageTemplate.replace(/{}/g, msg));\n      });\n\n      // destroy old scope\n      if (currentScope) {\n        currentScope.$destroy();\n      }\n\n      return templateScope;\n    }\n\n    return {\n      replace: true,\n      restrict: 'EA',\n      transclude: false,\n      scope: {\n        model: '=',\n        content: '=',\n        widgetSharedData: '=',\n        dashId: '='\n      },\n      link: function($scope, $element) {\n        var currentScope = compileWidget($scope, $element, null);\n        $scope.$on('widgetConfigChanged', function() {\n          currentScope = compileWidget($scope, $element, currentScope);\n        });\n        $scope.$on('widgetReload', function() {\n          currentScope = compileWidget($scope, $element, currentScope);\n        });\n        $scope.onEditConfig = function(){\n          $scope.$emit('adfEditWidgetConfig', $scope.model.config, $scope.model.wid);\n        };\n        $scope.onUpdateConfig = function(config){\n          $scope.model.config = config;\n          $scope.$emit('widgetConfigUpdated');\n        };\n      }\n    };\n\n  }]);\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\nangular.module('adf')\n  .directive('adfWidget', [\"_\", \"$injector\", \"$q\", \"$log\", \"$uibModal\", \"$rootScope\", \"dashboard\", \"adfTemplatePath\", function(_, $injector, $q, $log, $uibModal, $rootScope, dashboard, adfTemplatePath) {\n\n    function preLink($scope) {\n      var definition = $scope.definition;\n      if (definition) {\n        var w = dashboard.widgets[definition.type];\n        if (w) {\n          // pass title\n          if (!definition.title) {\n            definition.title = w.title;\n          }\n\n          //if (!definition.titleTemplateUrl) {\n          //  definition.titleTemplateUrl = adfTemplatePath + 'widget-title.html';\n          //  if (w.titleTemplateUrl) {\n          //    definition.titleTemplateUrl = w.titleTemplateUrl;\n          //  }\n          //}\n\n          //if (!definition.titleTemplateUrl) {\n          //  definition.frameless = w.frameless;\n          //}\n\n          if (!definition.styleClass) {\n            definition.styleClass = w.styleClass;\n          }\n\n          // set id for sortable\n          if (!definition.wid) {\n            definition.wid = dashboard.id();\n          }\n\n          // pass copy of widget to scope\n          $scope.widget = angular.copy(w);\n\n          $scope.widget.titleTemplateUrl = adfTemplatePath + 'widget-title-custom.html';\n          if (w.titleTemplateUrl) {\n            $scope.widget.titleTemplateUrl = w.titleTemplateUrl;\n          }\n\n          // merge default config object with definition from database\n          for (var configIdx in w.config) {\n            if(!definition.config) {\n              definition.config = {};\n            }\n            if(!definition.config[configIdx]) {\n              definition.config[configIdx] = w.config[configIdx];\n            }\n          }\n\n          //// create config object\n          //var config = definition.config;\n          //if (config) {\n          //  if (angular.isString(config)) {\n          //    config = angular.fromJson(config);\n          //  }\n          //} else {\n          //  config = {};\n          //}\n\n          // pass config to scope\n          $scope.config = definition.config;\n          $scope.widgetSharedData = w.widgetSharedData ? angular.copy(w.widgetSharedData) : {};\n\n          $scope.widgetSharedData.editMode = $scope.editMode;\n          $scope.$watch('editMode', function(editMode){\n            $scope.widgetSharedData.editMode = editMode;\n          });\n\n          // collapse exposed $scope.widgetState property\n          if (!$scope.widgetState) {\n            $scope.widgetState = {};\n            $scope.widgetState.isCollapsed= (w.collapsed === true) ? w.collapsed : false;\n            $scope.widgetState.configBeingEdited = false;\n          }\n        } else {\n          $log.warn('could not find widget ' + definition.type);\n        }\n      } else {\n        $log.debug('definition not specified, widget was probably removed');\n      }\n    }\n\n    function postLink($scope, $element) {\n      var definition = $scope.definition;\n      if (definition) {\n        // bind close function\n\n        var deleteWidget = function() {\n          var column = $scope.col;\n          if (column) {\n            //var index = column.widgets.indexOf(definition);\n            var index = _.findIndex(column.widgets, function(w) { return w.wid === definition.wid; });\n            if (index >= 0) {\n              column.widgets.splice(index, 1);\n            }\n          }\n          $element.remove();\n          $rootScope.$broadcast('adfWidgetRemovedFromColumn');\n          $scope.$emit('dashboardWidgetChanged');\n        };\n\n        $scope.remove = function() {\n          if ($scope.options.enableConfirmDelete) {\n            var deleteScope = $scope.$new();\n            var deleteTemplateUrl = adfTemplatePath + 'widget-delete.html';\n            if (definition.deleteTemplateUrl) {\n              deleteTemplateUrl = definition.deleteTemplateUrl;\n            }\n            var opts = {\n              scope: deleteScope,\n              templateUrl: deleteTemplateUrl,\n              backdrop: 'static'\n            };\n            var instance = $uibModal.open(opts);\n\n            deleteScope.closeDialog = function() {\n              instance.close();\n              deleteScope.$destroy();\n            };\n            deleteScope.deleteDialog = function() {\n              deleteWidget();\n              deleteScope.closeDialog();\n            };\n          } else {\n            deleteWidget();\n          }\n        };\n\n        // bind reload function\n        $scope.reload = function() {\n          $scope.$broadcast('widgetReload');\n        };\n\n        // bind edit function\n        $scope.edit = function() {\n          var editScope = $scope.$new();\n          editScope.definition = angular.copy(definition);\n\n          var adfEditTemplatePath = adfTemplatePath + 'widget-edit.html';\n          if (definition.editTemplateUrl) {\n            adfEditTemplatePath = definition.editTemplateUrl;\n          }\n\n          var opts = {\n            scope: editScope,\n            templateUrl: adfEditTemplatePath,\n            backdrop: 'static'\n          };\n\n          var instance = $uibModal.open(opts);\n\n          editScope.closeDialog = function() {\n            instance.close();\n            editScope.$destroy();\n          };\n\n          // TODO create util method\n          function createApplyPromise(result){\n            var promise;\n            if (typeof result === 'boolean'){\n              var deferred = $q.defer();\n              if (result){\n                deferred.resolve();\n              } else {\n                deferred.reject();\n              }\n              promise = deferred.promise;\n            } else {\n              promise = $q.when(result);\n            }\n            return promise;\n          }\n\n          editScope.saveDialog = function() {\n            // clear validation error\n            editScope.validationError = null;\n\n            // build injection locals\n            var widget = $scope.widget;\n            var applyFn = widget.edit.apply;\n            var locals = {\n              widget: widget,\n              definition: editScope.definition,\n              config: editScope.definition.config\n            };\n\n            // invoke apply function and apply if success\n            var result = $injector.invoke(applyFn, applyFn, locals);\n            createApplyPromise(result).then(function(){\n              definition.title = editScope.definition.title;\n              angular.extend(definition.config, editScope.definition.config);\n              if (widget.edit && widget.edit.reload) {\n                // reload content after edit dialog is closed\n                $scope.$broadcast('widgetConfigChanged');\n              }\n              editScope.closeDialog();\n            }, function(err){\n              if (err){\n                editScope.validationError = err;\n              } else {\n                editScope.validationError = 'Validation durring apply failed';\n              }\n            });\n          };\n\n        };\n      } else {\n        $log.debug('widget not found');\n      }\n    }\n\n    return {\n      replace: true,\n      restrict: 'EA',\n      transclude: false,\n      templateUrl: adfTemplatePath + 'widget.html',\n      scope: {\n        definition: '=',\n        col: '=column',\n        editMode: '=',\n        options: '=',\n        widgetState: '=',\n        columnState: '=',\n        dashId: '='\n      },\n      controller: [\"$scope\", function($scope) {\n\n        $scope.$on('adfDashboardCollapseExpand', function(event, args) {\n          $scope.widgetState.isCollapsed = args.collapseExpandStatus;\n        });\n\n        $scope.$on('adfWidgetEnterEditMode', function(event, widget){\n          if (dashboard.idEquals($scope.definition.wid, widget.wid)){\n            $scope.edit();\n          }\n        });\n\n        $scope.$on('widgetConfigUpdated', function() {\n          $scope.$emit('dashboardWidgetConfigUpdated', $scope.config, $scope.definition.wid, $scope.col.cid);\n        });\n\n        $scope.$on('adfWidgetConfigChanged', function(event, id){\n          var definition = $scope.definition;\n\n          if(definition.wid === id){\n            $scope.reload();\n          }\n        });\n\n        $scope.$on('adfEditWidgetConfigStarted', function(event, id){\n          var definition = $scope.definition;\n\n          $scope.widgetState.configBeingEdited = definition.wid === id;\n        });\n\n        $scope.$watch('widgetState.showFilters', function(showFilters){\n          // override definition.config when toggling filters content, to prevent loosing reference to the latest saved $scope.config object\n          if(showFilters) {\n            $scope.definition.config = $scope.config;\n          }\n        });\n\n\n        $scope.widgetClasses = function(w, definition, widgetState){\n          var classes = [];\n          classes.push('widget-' + definition.type);\n\n          if(definition.styleClass) {\n            classes.push(definition.styleClass);\n          }\n\n          if (widgetState.configBeingEdited) {\n            classes.push('widget-being-edited');\n          }\n\n          return classes;\n        };\n\n        $scope.openFullScreen = function() {\n          var definition = $scope.definition;\n          var fullScreenScope = $scope.$new();\n          var opts = {\n            scope: fullScreenScope,\n            templateUrl: adfTemplatePath + 'widget-fullscreen.html',\n            size: definition.modalSize || 'lg', // 'sm', 'lg'\n            backdrop: 'static',\n            windowClass: (definition.fullScreen) ? 'dashboard-modal widget-fullscreen' : 'dashboard-modal'\n          };\n\n          var instance = $uibModal.open(opts);\n          fullScreenScope.closeDialog = function() {\n            instance.close();\n            fullScreenScope.$destroy();\n          };\n        };\n\n        $scope.toggleWidgetFullscreen = function(){\n          $scope.columnState.isExpanded = !$scope.columnState.isExpanded;\n          $rootScope.$broadcast('widgetToggleFullscreen', $scope.col.cid);\n        };\n      }],\n      compile: function() {\n\n        /**\n         * use pre link, because link of widget-content\n         * is executed before post link widget\n         */\n        return {\n          pre: preLink,\n          post: postLink\n        };\n      }\n    };\n\n  }]);\n\nangular.module(\"adf\").run([\"$templateCache\", function($templateCache) {$templateCache.put(\"../src/templates/dashboard-column-custom.html\",\"<div adf-id={{column.cid}} class=\\\"dashboardPlaceholder column {{column.styleClass}}\\\" ng-class=\\\"{\\'full-screen\\': columnState.isExpanded }\\\" ng-model=column.widgets ng-hide=columnState.isHidden> <div ng-sortable=sortableConfig class=adf-widgets adf-id={{column.cid}} ng-class=\\\"{\\'adf-nested\\':column.rows}\\\"> <adf-widget ng-repeat=\\\"definition in column.widgets track by definition.wid\\\" definition=definition column=column edit-mode=editMode options=options widget-state=widgetState column-state=columnState dash-id=adfModel._id> </adf-widget></div> <div ng-if=\\\"editMode && !column.rows\\\" class=\\\"text-center js-remove\\\"> <a href title=\\\"add new widget\\\" ng-click=addWidgetDialog()> <i class=\\\"fa fa-plus fa-5x\\\"></i> <p>Add widget</p> </a> </div>  </div> \");\n$templateCache.put(\"../src/templates/dashboard-column.html\",\"<div adf-id={{column.cid}} class=column ng-class=column.styleClass ng-model=column.widgets> <adf-widget ng-repeat=\\\"definition in column.widgets\\\" definition=definition column=column edit-mode=editMode options=options widget-state=widgetState>  </adf-widget></div> \");\n$templateCache.put(\"../src/templates/dashboard-edit.html\",\"<div class=modal-header> <button type=button class=close ng-click=closeDialog() aria-hidden=true>&times;</button> <h4 class=modal-title>Edit Dashboard</h4> </div> <div class=modal-body> <form role=form>     <div class=form-group> <label>Structure</label> <div class=radio ng-repeat=\\\"(key, structure) in structures\\\"> <label> <input type=radio value={{key}} ng-model=model.structure ng-change=\\\"changeStructure(key, structure)\\\"> {{key}} </label> </div> </div> </form> </div> <div class=modal-footer> <button type=button class=\\\"btn btn-primary\\\" ng-click=closeDialog()>Close</button> </div> \");\n$templateCache.put(\"../src/templates/dashboard-row.html\",\"<div class=row ng-class=row.styleClass>  </div> \");\n$templateCache.put(\"../src/templates/dashboard-title-custom.html\",\"<div class=\\\"row dashboard-nav\\\"> <div class=col-md-8> <h1 ng-if=editMode> {{model.title}} </h1> </div> <div class=col-md-4> <ul style=\\\"font-size: 16px\\\" class=\\\"nav navbar-nav navbar-right dashboard-menu\\\"> <li ng-if=editMode> <a href title=\\\"edit dashboard\\\" ng-click=editDashboardDialog()> <i class=\\\"fa fa-sliders\\\"></i> <p>Settings</p> </a> </li> <li ng-if=editMode> <a href title=\\\"{{editMode ? \\'save changes\\' : \\'enable edit mode\\'}}\\\" ng-click=toggleEditMode()> <i class=fa x-ng-class=\\\"{\\'fa-pencil\\' : !editMode, \\'fa-floppy-o\\' : editMode}\\\"></i> <p ng-if=editMode>Save</p> <p ng-if=!editMode>Edit</p> </a> </li> <li ng-if=editMode> <a href title=\\\"undo changes\\\" ng-click=cancelEditMode()> <i class=\\\"fa fa-undo adf-flip\\\"></i> <p>Undo</p> </a> </li> </ul> </div> </div> \");\n$templateCache.put(\"../src/templates/dashboard-title.html\",\"<h1> {{model.title}} <span style=\\\"font-size: 16px\\\" class=pull-right> <a href ng-if=editMode title=\\\"add new widget\\\" ng-click=addWidgetDialog()> <i class=\\\"glyphicon glyphicon-plus-sign\\\"></i> </a> <a href ng-if=editMode title=\\\"edit dashboard\\\" ng-click=editDashboardDialog()> <i class=\\\"glyphicon glyphicon-cog\\\"></i> </a> <a href ng-if=options.editable title=\\\"{{editMode ? \\'save changes\\' : \\'enable edit mode\\'}}\\\" ng-click=toggleEditMode()> <i class=glyphicon x-ng-class=\\\"{\\'glyphicon-edit\\' : !editMode, \\'glyphicon-save\\' : editMode}\\\"></i> </a> <a href ng-if=editMode title=\\\"undo changes\\\" ng-click=cancelEditMode()> <i class=\\\"glyphicon glyphicon-repeat adf-flip\\\"></i> </a> </span> </h1> \");\n$templateCache.put(\"../src/templates/dashboard.html\",\"<div class=dashboard-container>  <div class=\\\"dashboard container-fluid\\\" x-ng-class=\\\"{\\'edit\\' : editMode}\\\"> <adf-dashboard-row row=row adf-model=model options=options ng-repeat=\\\"row in model.rows track by $index\\\" edit-mode=editMode continuous-edit-mode=continuousEditMode> </adf-dashboard-row></div> </div> \");\n$templateCache.put(\"../src/templates/widget-add.html\",\"<div class=modal-header> <button type=button class=close ng-click=closeDialog() aria-hidden=true>&times;</button> <h4 class=modal-title>Add new widget</h4> </div> <div class=modal-body> <div style=\\\"display: inline-block;\\\"> <dl class=dl-horizontal> <dt ng-repeat-start=\\\"(key, widget) in widgets\\\"> <a href ng-click=addWidget(key)> {{widget.title}} </a> </dt> <dd ng-repeat-end ng-if=widget.description> {{widget.description}} </dd> </dl> <div ng-if=noWidgetsAvailable>No widgets available for selected placeholder</div> </div> </div> <div class=modal-footer> <button type=button class=\\\"btn btn-primary\\\" ng-click=closeDialog()>Close</button> </div> \");\n$templateCache.put(\"../src/templates/widget-delete.html\",\"<div class=modal-header> <h4 class=modal-title>Delete {{widget.title}}</h4> </div> <div class=modal-body> <form role=form> <div class=form-group> <label for=widgetTitle>Are you sure you want to delete this widget ?</label> </div> </form> </div> <div class=modal-footer> <button type=button class=\\\"btn btn-default\\\" ng-click=closeDialog()>Close</button> <button type=button class=\\\"btn btn-primary\\\" ng-click=deleteDialog()>Delete</button> </div> \");\n$templateCache.put(\"../src/templates/widget-edit.html\",\"<form name=widgetEditForm novalidate role=form ng-submit=saveDialog()> <div class=modal-header> <button type=button class=close ng-click=closeDialog() aria-hidden=true>&times;</button> <h4 class=modal-title>{{widget.title}}</h4> </div> <div class=modal-body> <div class=\\\"alert alert-danger\\\" role=alert ng-show=validationError> <strong>Apply error:</strong> {{validationError}} </div> <div class=form-group> <label for=widgetTitle>Title</label> <input type=text class=form-control id=widgetTitle ng-model=definition.title placeholder=\\\"Enter title\\\" required> </div> <div ng-if=widget.edit> <adf-widget-content model=definition content=widget.edit dash-id=dashId> </adf-widget-content></div> </div> <div class=modal-footer> <button type=button class=\\\"btn btn-default\\\" ng-click=closeDialog()>Cancel</button> <input type=submit class=\\\"btn btn-primary\\\" ng-disabled=widgetEditForm.$invalid value=Apply> </div> </form> \");\n$templateCache.put(\"../src/templates/widget-fullscreen.html\",\"<div class=modal-header> <div class=\\\"pull-right widget-icons\\\"> <a href title=\\\"Reload Widget Content\\\" ng-if=widget.reload ng-click=reload()> <i class=\\\"glyphicon glyphicon-refresh\\\"></i> </a> <a href title=close ng-click=closeDialog()> <i class=\\\"glyphicon glyphicon-remove\\\"></i> </a> </div> <h4 class=modal-title>{{definition.title}}</h4> </div> <div class=modal-body> <adf-widget-content model=definition content=widget> </adf-widget-content></div> <div class=modal-footer> <button type=button class=\\\"btn btn-primary\\\" ng-click=closeDialog()>Close</button> </div> \");\n$templateCache.put(\"../src/templates/widget-title-custom.html\",\"<div class=panel-title> <div class=status-bar-widget ng-if=widget.statusBar> <adf-widget-content class=status-bar-widget-content model=definition content=widget.statusBar widget-shared-data=widgetSharedData> </adf-widget-content></div> <div class=\\\"widget-actions pull-right\\\"> <div class=pull-right>  <button class=\\\"btn btn-link\\\" title=\\\"filter widget data\\\" ng-disabled=\\\"editMode || widgetSharedData.layoutEditMode\\\" ng-click=\\\"widgetState.showFilters = !widgetState.showFilters\\\" ng-if=widget.filter> <i class=\\\"fa fa-filter\\\"></i> </button>  <button class=\\\"btn btn-link\\\" title=Minimize/Maximize ng-click=toggleWidgetFullscreen() ng-show=options.maximizable> <i class=fa ng-class=\\\"columnState.isExpanded ? \\'fa-compress\\' : \\'fa-expand\\'\\\"></i> </button>  <button class=\\\"btn btn-link\\\" title=\\\"remove widget\\\" ng-click=remove() ng-if=editMode> <i class=\\\"fa fa-times\\\"></i> </button> </div> <div ng-if=widget.headerActions class=pull-right> <adf-widget-content model=definition content=widget.headerActions widget-shared-data=widgetSharedData> </adf-widget-content></div> <div class=clear></div> </div> <div class=clear></div> </div> \");\n$templateCache.put(\"../src/templates/widget-title.html\",\"<h3 class=panel-title> {{definition.title}} <span class=pull-right> <a href title=\\\"reload widget content\\\" ng-if=widget.reload ng-click=reload()> <i class=\\\"glyphicon glyphicon-refresh\\\"></i> </a>  <a href title=\\\"change widget location\\\" class=adf-move ng-if=editMode> <i class=\\\"glyphicon glyphicon-move\\\"></i> </a>  <a href title=\\\"collapse widget\\\" ng-show=\\\"options.collapsible && !widgetState.isCollapsed\\\" ng-click=\\\"widgetState.isCollapsed = !widgetState.isCollapsed\\\"> <i class=\\\"glyphicon glyphicon-minus\\\"></i> </a>  <a href title=\\\"expand widget\\\" ng-show=\\\"options.collapsible && widgetState.isCollapsed\\\" ng-click=\\\"widgetState.isCollapsed = !widgetState.isCollapsed\\\"> <i class=\\\"glyphicon glyphicon-plus\\\"></i> </a>   <a href title=Minimize/Maximize ng-click=openFullScreen() ng-show=options.maximizable> <i class=\\\"glyphicon glyphicon-fullscreen\\\"></i> </a>  <a href title=\\\"remove widget\\\" ng-click=remove() ng-if=editMode> <i class=\\\"glyphicon glyphicon-remove\\\"></i> </a> </span> </h3> \");\n$templateCache.put(\"../src/templates/widget.html\",\"<div adf-id={{definition.wid}} adf-widget-type={{definition.type}} ng-class=\\\"widgetClasses(widget, definition, widgetState)\\\" class=\\\"widget panel panel-default\\\"> <div class=widget-growl-messages> <div growl reference={{definition.wid}} inline=true></div> </div> <div class=\\\"panel-heading clearfix\\\" ng-if=\\\"!widget.frameless || editMode\\\"> <div ng-include src=widget.titleTemplateUrl ng-class=\\\"{\\'adf-move\\':editMode}\\\"></div> </div> <div ng-class=\\\"{\\'panel-body\\':!widget.frameless || editMode}\\\" uib-collapse=widgetState.isCollapsed> <div ng-if=\\\"widget.filter && widgetState.showFilters\\\" class=widget-filter> <adf-widget-content model=definition content=widget.filter widget-shared-data=widgetSharedData dash-id=dashId> </adf-widget-content></div> <adf-widget-content model=definition content=widget widget-shared-data=widgetSharedData dash-id=dashId> </adf-widget-content></div> </div> \");}]);})(window);","/*\n* The MIT License\n*\n* Copyright (c) 2015, Sebastian Sdorra\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n\n/* global angular */\nangular.module('adf')\n  .directive('adfDashboardColumn', function ($log, $compile, $rootScope, adfTemplatePath, rowTemplate, dashboard) {\n    'use strict';\n\n    /**\n     * moves a widget in between a column\n     */\n    function moveWidgetInColumn($scope, column, evt){\n      var widgets = column.widgets;\n      // move widget and apply to scope\n      $scope.$apply(function(){\n        widgets.splice(evt.newIndex, 0, widgets.splice(evt.oldIndex, 1)[0]);\n        $rootScope.$broadcast('adfWidgetMovedInColumn');\n      });\n    }\n\n    /**\n     * finds a widget by its id in the column\n     */\n    function findWidget(column, index){\n      var widget = null;\n      for (var i=0; i<column.widgets.length; i++){\n        var w = column.widgets[i];\n        if (dashboard.idEquals(w.wid,index)){\n          widget = w;\n          break;\n        }\n      }\n      return widget;\n    }\n\n    /**\n     * finds a column by its id in the model\n     */\n    function findColumn(model, index){\n      var column = null;\n      for (var i=0; i<model.rows.length; i++){\n        var r = model.rows[i];\n        for (var j=0; j<r.columns.length; j++){\n          var c = r.columns[j];\n          if (dashboard.idEquals(c.cid, index)){\n            column = c;\n            break;\n          } else if (c.rows){\n            column = findColumn(c, index);\n          }\n        }\n        if (column){\n          break;\n        }\n      }\n      return column;\n    }\n\n    /**\n     * get the adf id from an html element\n     */\n    function getId(el){\n      var id = el.getAttribute('adf-id');\n      return id ? id : '-1';\n    }\n\n    /**\n     * adds a widget to a column\n     */\n    function addWidgetToColumn($scope, model, targetColumn, evt){\n      // find source column\n      var cid = getId(evt.from);\n      var sourceColumn = findColumn(model, cid);\n\n      if (sourceColumn){\n        // find moved widget\n        var wid = getId(evt.item);\n        var widget = findWidget(sourceColumn, wid);\n\n        if (widget){\n          // add new item and apply to scope\n          $scope.$apply(function(){\n      \t\t\tif (!targetColumn.widgets) {\n      \t\t\t\ttargetColumn.widgets = [];\n      \t\t\t}\n            targetColumn.widgets.splice(evt.newIndex, 0, widget);\n\n            $rootScope.$broadcast('adfWidgetAddedToColumn');\n            $scope.$emit('dashboardWidgetChanged');\n          });\n        } else {\n          $log.warn('could not find widget with id ' + wid);\n        }\n      } else {\n        $log.warn('could not find column with id ' + cid);\n      }\n    }\n\n    /**\n     * removes a widget from a column\n     */\n    function removeWidgetFromColumn($scope, column, evt){\n      // remove old item and apply to scope\n      $scope.$apply(function(){\n        column.widgets.splice(evt.oldIndex, 1);\n        $rootScope.$broadcast('adfWidgetRemovedFromColumn');\n      });\n    }\n\n    /**\n     * enable sortable\n     */\n    function applySortable($scope, $element, model, column){\n      // enable drag and drop\n      var el = $element[0];\n      var sortable = Sortable.create(el, {\n        group: 'widgets',\n        handle: '.adf-move',\n        ghostClass: 'placeholder',\n        animation: 150,\n        onAdd: function(evt){\n          addWidgetToColumn($scope, model, column, evt);\n        },\n        onRemove: function(evt){\n          removeWidgetFromColumn($scope, column, evt);\n        },\n        onUpdate: function(evt){\n          moveWidgetInColumn($scope, column, evt);\n        }\n      });\n\n      // destroy sortable on column destroy event\n      $element.on('$destroy', function () {\n        // check sortable element, before calling destroy\n        // see https://github.com/sdorra/angular-dashboard-framework/issues/118\n        if (sortable.el){\n          sortable.destroy();\n        }\n      });\n    }\n\n    return {\n      restrict: 'E',\n      replace: true,\n      scope: {\n        column: '=',\n        editMode: '=',\n        continuousEditMode: '=',\n        adfModel: '=',\n        options: '='\n      },\n      templateUrl: adfTemplatePath + 'dashboard-column.html',\n      link: function ($scope, $element) {\n        // set id\n        var col = $scope.column;\n        if (!col.cid){\n          col.cid = dashboard.id();\n        }\n\n        if (angular.isDefined(col.rows) && angular.isArray(col.rows)) {\n          // be sure to tell Angular about the injected directive and push the new row directive to the column\n          $compile(rowTemplate)($scope, function(cloned) {\n            $element.append(cloned);\n          });\n        } else {\n          // enable drag and drop for widget only columns\n          applySortable($scope, $element, $scope.adfModel, col);\n        }\n      }\n    };\n  });\n","/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * @ngdoc directive\n * @name adf.directive:adfDashboard\n * @element div\n * @restrict EA\n * @scope\n * @description\n *\n * `adfDashboard` is a directive which renders the dashboard with all its\n * components. The directive requires a name attribute. The name of the\n * dashboard can be used to store the model.\n *\n * @param {string} name name of the dashboard. This attribute is required.\n * @param {boolean=} editable false to disable the editmode of the dashboard.\n * @param {boolean=} collapsible true to make widgets collapsible on the dashboard.\n * @param {boolean=} maximizable true to add a button for open widgets in a large modal panel.\n * @param {boolean=} enableConfirmDelete true to ask before remove an widget from the dashboard.\n * @param {string=} structure the default structure of the dashboard.\n * @param {object=} adfModel model object of the dashboard.\n * @param {function=} adfWidgetFilter function to filter widgets on the add dialog.\n * @param {boolean=} continuousEditMode enable continuous edit mode, to fire add/change/remove\n *                   events during edit mode not reset it if edit mode is exited.\n */\n\nangular.module('adf')\n  .directive('adfDashboard', function ($rootScope, $log, $timeout, $uibModal, dashboard, adfTemplatePath) {\n    'use strict';\n\n    function stringToBoolean(string){\n      switch(angular.isDefined(string) ? string.toLowerCase() : null){\n        case 'true': case 'yes': case '1': return true;\n        case 'false': case 'no': case '0': case null: return false;\n        default: return Boolean(string);\n      }\n    }\n\n    function copyWidgets(source, target) {\n      if ( source.widgets && source.widgets.length > 0 ){\n        var w = source.widgets.shift();\n        while (w){\n          target.widgets.push(w);\n          w = source.widgets.shift();\n        }\n      }\n    }\n\n    /**\n     * Copy widget from old columns to the new model\n     * @param object root the model\n     * @param array of columns\n     * @param counter\n     */\n    function fillStructure(root, columns, counter) {\n      counter = counter || 0;\n\n      if (angular.isDefined(root.rows)) {\n        angular.forEach(root.rows, function (row) {\n          angular.forEach(row.columns, function (column) {\n            // if the widgets prop doesn't exist, create a new array for it.\n            // this allows ui.sortable to do it's thing without error\n            if (!column.widgets) {\n              column.widgets = [];\n            }\n\n            // if a column exist at the counter index, copy over the column\n            if (angular.isDefined(columns[counter])) {\n              // do not add widgets to a column, which uses nested rows\n              if (angular.isUndefined(column.rows)){\n                copyWidgets(columns[counter], column);\n                counter++;\n              }\n            }\n\n            // run fillStructure again for any sub rows/columns\n            counter = fillStructure(column, columns, counter);\n          });\n        });\n      }\n      return counter;\n    }\n\n    /**\n    * Read Columns: recursively searches an object for the 'columns' property\n    * @param object model\n    * @param array  an array of existing columns; used when recursion happens\n    */\n    function readColumns(root, columns) {\n      columns = columns || [];\n\n      if (angular.isDefined(root.rows)) {\n        angular.forEach(root.rows, function (row) {\n          angular.forEach(row.columns, function (col) {\n            columns.push(col);\n            // keep reading columns until we can't any more\n            readColumns(col, columns);\n          });\n        });\n      }\n\n      return columns;\n    }\n\n    function changeStructure(model, structure){\n      var columns = readColumns(model);\n      var counter = 0;\n\n      model.rows = angular.copy(structure.rows);\n\n      while ( counter < columns.length ){\n        counter = fillStructure(model, columns, counter);\n      }\n    }\n\n    function createConfiguration(type){\n      var cfg = {};\n      var config = dashboard.widgets[type].config;\n      if (config){\n        cfg = angular.copy(config);\n      }\n      return cfg;\n    }\n\n    /**\n     * Find first widget column in model.\n     *\n     * @param dashboard model\n     */\n    function findFirstWidgetColumn(model){\n      var column = null;\n      if (!angular.isArray(model.rows)){\n        $log.error('model does not have any rows');\n        return null;\n      }\n      for (var i=0; i<model.rows.length; i++){\n        var row = model.rows[i];\n        if (angular.isArray(row.columns)){\n          for (var j=0; j<row.columns.length; j++){\n            var col = row.columns[j];\n            if (!col.rows){\n              column = col;\n              break;\n            }\n          }\n        }\n        if (column){\n          break;\n        }\n      }\n      return column;\n    }\n\n    /**\n     * Adds the widget to first column of the model.\n     *\n     * @param dashboard model\n     * @param widget to add to model\n     * @param name name of the dashboard\n     */\n    function addNewWidgetToModel(model, widget, name, column){\n      if (model){\n        if(!column) {\n          column = findFirstWidgetColumn(model);\n        }\n        if (column){\n          if (!column.widgets){\n            column.widgets = [];\n          }\n          column.widgets.unshift(widget);\n\n          // broadcast added event\n          $rootScope.$broadcast('adfWidgetAdded', name, model, widget);\n        } else {\n          $log.error('could not find first widget column');\n        }\n      } else {\n        $log.error('model is undefined');\n      }\n    }\n\n    /**\n     * Checks if the edit mode of the widget should be opened immediately.\n     *\n     * @param widget type\n     */\n    function isEditModeImmediate(type){\n      var widget = dashboard.widgets[type];\n      return widget && widget.edit && widget.edit.immediate;\n    }\n\n    /**\n     * Opens the edit mode of the specified widget.\n     *\n     * @param dashboard scope\n     * @param widget\n     */\n    function openEditMode($scope, widget){\n      // wait some time before fire enter edit mode event\n      $timeout(function(){\n        $scope.$broadcast('adfWidgetEnterEditMode', widget);\n      }, 200);\n    }\n\n    /**\n     * finds a widget by its id in the column\n     */\n    function findWidget(column, index){\n      var widget = null;\n      for (var i=0; i<column.widgets.length; i++){\n        var w = column.widgets[i];\n        if (dashboard.idEquals(w.wid,index)){\n          widget = w;\n          break;\n        }\n      }\n      return widget;\n    }\n\n    /**\n     * finds a column by its id in the model\n     */\n    function findColumn(model, index){\n      var column = null;\n      for (var i=0; i<model.rows.length; i++){\n        var r = model.rows[i];\n        for (var j=0; j<r.columns.length; j++){\n          var c = r.columns[j];\n          if (dashboard.idEquals(c.cid, index)){\n            column = c;\n            break;\n          } else if (c.rows){\n            column = findColumn(c, index);\n          }\n        }\n        if (column){\n          break;\n        }\n      }\n      return column;\n    }\n\n    /**\n     * Finds widget by id and changes its config\n     */\n    function changeConfigForWidgetById($scope, wid, config, widgetType, widgetTitle){\n      var model = $scope.model,\n        rows = model.rows,\n        widgetForUpdate = null;\n\n      if(rows){\n        angular.forEach(rows, function(row){\n          var columns = row.columns;\n\n          if(columns){\n            angular.forEach(columns, function(column){\n              var widgets = column.widgets;\n\n              if(widgets){\n                angular.forEach(widgets, function (widget, key) {\n\n                  if( widget.wid === wid ){\n                    widgetForUpdate = widget;\n                  }\n                });\n              }\n            });\n          }\n        });\n      }\n\n      if (widgetForUpdate) {\n        // If widgetType is defined and it is not equal to previous type, create config for new type of widget.\n        if (widgetType && widgetType !== widgetForUpdate.type) {\n          var defConfig = createConfiguration(widgetType);\n          widgetForUpdate.config = angular.extend({}, defConfig, config);\n          widgetForUpdate.type = widgetType;\n          widgetForUpdate.wid = dashboard.id();\n        }\n        else {\n          widgetForUpdate.config = angular.extend({}, widgetForUpdate.config, config);\n        }\n\n        if (widgetTitle) {\n          widgetForUpdate.title = widgetTitle;\n        }\n      }\n    }\n\n    function setExternalApiFunctions(scope) {\n      var api = {};\n\n      api.saveDashboard = function() {\n        return scope.saveDashboard();\n      };\n\n      api.manageEditMode = function() {\n        return scope.manageEditMode();\n      };\n\n      api.editDashboardDialog = function() {\n        return scope.editDashboardDialog();\n      };\n\n      api.cancelEditMode = function() {\n        return scope.cancelEditMode();\n      };\n\n      api.changeDashStructure = function(name, structure) {\n        scope.changeStructure(name, structure, scope);\n      };\n\n      api.triggerDashboardChanged = function() {\n        scope.triggerDashboardChanged();\n      };\n\n      api.addNewWidget = function(config, type, name) {\n        var defConfig = createConfiguration(type);\n\n        var widgetName = name ? name : '',\n          model = scope.model,\n          widget = {\n          type: type,\n          config: angular.extend({}, defConfig, config),\n          wid: dashboard.id(),\n          title: widgetName\n        };\n\n        addNewWidgetToModel(model, widget, widgetName);\n\n        scope.triggerDashboardChanged();\n      };\n\n      api.changeWidgetConfig = function(wid, config, type, title) {\n        changeConfigForWidgetById(scope, wid, config, type, title);\n\n        scope.$broadcast('adfWidgetConfigChanged', wid);\n\n        scope.triggerDashboardChanged();\n      };\n\n      scope.externalApi = api;\n    }\n\n    return {\n      replace: true,\n      restrict: 'EA',\n      transclude : false,\n      scope: {\n        structure: '@',\n        name: '@',\n        collapsible: '@',\n        editable: '@',\n        editMode: '@',\n        continuousEditMode: '=',\n        maximizable: '@',\n        adfModel: '=',\n        adfWidgetFilter: '=',\n        externalApi: '='\n      },\n      controller: function($scope){\n        var model = {};\n        var structure = {};\n        var widgetFilter = null;\n        var structureName = {};\n        var name = $scope.name;\n\n        // Watching for changes on adfModel\n        $scope.$watch('adfModel', function(oldVal, newVal) {\n          // has model changed or is the model attribute not set\n          if (newVal !== null || (oldVal === null && newVal === null)) {\n            model = $scope.adfModel;\n            widgetFilter = $scope.adfWidgetFilter;\n            if ( ! model || ! model.rows ){\n              structureName = $scope.structure;\n              structure = dashboard.structures[structureName];\n              if (structure){\n                if (model){\n                  model.rows = angular.copy(structure).rows;\n                } else {\n                  model = angular.copy(structure);\n                }\n                model.structure = structureName;\n              } else {\n                $log.error( 'could not find structure ' + structureName);\n              }\n            }\n\n            if (model) {\n              if (!model.title){\n                model.title = 'Dashboard';\n              }\n              if (!model.titleTemplateUrl) {\n                model.titleTemplateUrl = adfTemplatePath + 'dashboard-title-custom.html';\n              }\n              $scope.model = model;\n            } else {\n              $log.error('could not find or create model');\n            }\n          }\n        }, true);\n\n        // edit mode\n        $scope.editMode = false;\n        $scope.editClass = '';\n\n        $scope.toggleEditMode = function(){\n          $scope.editMode = ! $scope.editMode;\n          if ($scope.editMode){\n            if (!$scope.continuousEditMode) {\n              $scope.modelCopy = angular.copy($scope.adfModel, {});\n              $rootScope.$broadcast('adfIsEditMode');\n            }\n          }\n\n          if (!$scope.editMode){\n             $scope.triggerDashboardChanged();\n          }\n        };\n\n        $scope.$on('adfToggleEditMode', function() {\n            $scope.toggleEditMode();\n        });\n\n        $scope.collapseAll = function(collapseExpandStatus){\n          $rootScope.$broadcast('adfDashboardCollapseExpand',{collapseExpandStatus : collapseExpandStatus});\n        };\n\n        $scope.cancelEditMode = function(){\n          $scope.editMode = false;\n          if (!$scope.continuousEditMode) {\n            $scope.modelCopy = angular.copy($scope.modelCopy, $scope.adfModel);\n          }\n          $rootScope.$broadcast('adfDashboardEditsCancelled');\n        };\n\n        // edit dashboard settings\n        $scope.editDashboardDialog = function(){\n          var editDashboardScope = $scope.$new();\n          // create a copy of the title, to avoid changing the title to\n          // \"dashboard\" if the field is empty\n          editDashboardScope.copy = {\n            title: model.title\n          };\n          editDashboardScope.structures = dashboard.structures;\n\n          var adfEditTemplatePath = adfTemplatePath + 'dashboard-edit.html';\n          if(model.editTemplateUrl) {\n            adfEditTemplatePath = model.editTemplateUrl;\n          }\n          var instance = $uibModal.open({\n            scope: editDashboardScope,\n            templateUrl: adfEditTemplatePath,\n            backdrop: 'static'\n          });\n          editDashboardScope.changeStructure = function(name, structure){\n            $log.info('change structure to ' + name);\n            changeStructure(model, structure, $scope);\n          };\n          editDashboardScope.closeDialog = function(){\n            // copy the new title back to the model\n            model.title = editDashboardScope.copy.title;\n            // close modal and destroy the scope\n            instance.close();\n            editDashboardScope.$destroy();\n          };\n        };\n\n        // add widget dialog\n        $scope.addWidgetDialog = function(column){\n          var addScope = $scope.$new();\n          var model = $scope.model;\n          var widgets;\n          if (angular.isFunction(widgetFilter)){\n            widgets = {};\n            angular.forEach(dashboard.widgets, function(widget, type){\n              if (widgetFilter(widget, type, model, column)){\n                widgets[type] = widget;\n              }\n            });\n          } else {\n            widgets = dashboard.widgets;\n          }\n          addScope.widgets = widgets;\n          addScope.noWidgetsAvailable = angular.equals({}, widgets);\n\n          var adfAddTemplatePath = adfTemplatePath + 'widget-add.html';\n          if(model.addTemplateUrl) {\n            adfAddTemplatePath = model.addTemplateUrl;\n          }\n\n          var opts = {\n            scope: addScope,\n            templateUrl: adfAddTemplatePath,\n            backdrop: 'static'\n          };\n\n          var instance = $uibModal.open(opts);\n          addScope.addWidget = function(widget){\n            var w = {\n              type: widget,\n              config: createConfiguration(widget),\n              wid: dashboard.id()\n            };\n            addNewWidgetToModel(model, w, name, column);\n            // close and destroy\n            instance.close();\n            addScope.$destroy();\n\n            // check for open edit mode immediately\n            if (isEditModeImmediate(widget)){\n              openEditMode($scope, w);\n            }\n\n            $scope.triggerDashboardChanged();\n          };\n          addScope.closeDialog = function(){\n            // close and destroy\n            instance.close();\n            addScope.$destroy();\n          };\n        };\n\n        $scope.manageEditMode = function () {\n          $scope.editMode = !$scope.editMode;\n          if ($scope.editMode){\n            $scope.modelCopy = angular.copy($scope.adfModel, {});\n          }\n          return $scope.editMode;\n        };\n\n        $scope.saveDashboard = function() {\n          $scope.editMode = false;\n          $scope.triggerDashboardChanged();\n          return false;\n        };\n\n        $scope.changeStructure = function(name, structure) {\n          changeStructure(model, structure, $scope);\n        };\n\n        $scope.triggerDashboardChanged = function() {\n          $rootScope.$broadcast('adfDashboardChanged', name, model);\n        };\n\n        $scope.addNewWidgetToModel = addNewWidgetToModel;\n\n        $scope.$on('addWidgetDialog', function(event, column) {\n          $scope.addWidgetDialog(column);\n        });\n\n        $scope.$on('dashboardWidgetChanged', function() {\n          // the event should only be caught by dashboard directive, that's why it is not propagated further up the chain\n          event.stopPropagation();\n\n          $scope.triggerDashboardChanged();\n        });\n\n        $scope.$on('dashboardWidgetConfigUpdated', function(event, config, wid, cid) {\n          // the event should only be caught by dashboard directive, that's why it is not propagated further up the chain\n          event.stopPropagation();\n\n          // we need to overwrite config object before saving to database, otherwise it is set after saving so the changed data is lost\n          if(cid) {\n            var col = findColumn(model, cid);\n            if(wid && col) {\n              var widget = findWidget(col, wid);\n              if(widget) {\n                widget.config = config;\n                $scope.triggerDashboardChanged();\n              }\n            }\n          }\n        });\n\n        setExternalApiFunctions($scope);\n      },\n      link: function ($scope, $element, $attr) {\n        // pass options to scope\n        var options = {\n          name: $attr.name,\n          editable: true,\n          enableConfirmDelete: stringToBoolean($attr.enableconfirmdelete),\n          maximizable: stringToBoolean($attr.maximizable),\n          collapsible: stringToBoolean($attr.collapsible)\n        };\n        if (angular.isDefined($attr.editable)){\n          options.editable = stringToBoolean($attr.editable);\n        }\n        $scope.options = options;\n      },\n      templateUrl: adfTemplatePath + 'dashboard.html'\n    };\n  });\n","/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\n/**\n * @ngdoc object\n * @name adf.dashboardProvider\n * @description\n *\n * The dashboardProvider can be used to register structures and widgets.\n */\nangular.module('adf.provider', [])\n  .provider('dashboard', function(){\n\n    var widgets = {};\n    var widgetsPath = '';\n    var structures = {};\n    var messageTemplate = '<div class=\"alert alert-danger\">{}</div>';\n    var loadingTemplate = '\\\n      <div class=\"progress progress-striped active\">\\n\\\n        <div class=\"progress-bar\" role=\"progressbar\" style=\"width: 100%\">\\n\\\n          <span class=\"sr-only\">loading ...</span>\\n\\\n        </div>\\n\\\n      </div>';\n\n    // default apply function of widget.edit.apply\n    var defaultApplyFunction = function(){\n      return true;\n    };\n\n   /**\n    * @ngdoc method\n    * @name adf.dashboardProvider#widget\n    * @methodOf adf.dashboardProvider\n    * @description\n    *\n    * Registers a new widget.\n    *\n    * @param {string} name of the widget\n    * @param {object} widget to be registered.\n    *\n    *   Object properties:\n    *\n    *   - `title` - `{string=}` - The title of the widget.\n    *   - `description` - `{string=}` - Description of the widget.\n    *   - `collapsed` - `{boolean=}` - true if the widget should be in collapsed state. Default is false.\n    *   - `config` - `{object}` - Predefined widget configuration.\n    *   - `controller` - `{string=|function()=}` - Controller fn that should be\n    *      associated with newly created scope of the widget or the name of a\n    *      {@link http://docs.angularjs.org/api/angular.Module#controller registered controller}\n    *      if passed as a string.\n    *   - `controllerAs` - `{string=}` - A controller alias name. If present the controller will be\n    *      published to scope under the `controllerAs` name.\n    *   - `frameless` - `{boolean=}` - false if the widget should be shown in frameless mode. The default is false.\n    *   - `styleClass` - `{object}` - space delimited string or map of classes bound to the widget.\n    *   - `template` - `{string=|function()=}` - html template as a string.\n    *   - `templateUrl` - `{string=}` - path to an html template.\n    *   - `reload` - `{boolean=}` - true if the widget could be reloaded. The default is false.\n    *   - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n    *      be injected into the controller. If any of these dependencies are promises, the widget\n    *      will wait for them all to be resolved or one to be rejected before the controller is\n    *      instantiated.\n    *      If all the promises are resolved successfully, the values of the resolved promises are\n    *      injected.\n    *\n    *      The map object is:\n    *      - `key` – `{string}`: a name of a dependency to be injected into the controller.\n    *      - `factory` - `{string|function}`: If `string` then it is an alias for a service.\n    *        Otherwise if function, then it is {@link http://docs.angularjs.org/api/AUTO.$injector#invoke injected}\n    *        and the return value is treated as the dependency. If the result is a promise, it is\n    *        resolved before its value is injected into the controller.\n    *   - `edit` - `{object}` - Edit modus of the widget.\n    *      - `controller` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\n    *      - `controllerAs` - `{string=}` - Same as above, but for the edit mode of the widget.\n    *      - `template` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\n    *      - `templateUrl` - `{string=}` - Same as above, but for the edit mode of the widget.\n    *      - `resolve` - `{Object.<string, function>=}` - Same as above, but for the edit mode of the widget.\n    *      - `reload` - {boolean} - true if the widget should be reloaded, after the edit mode is closed.\n    *        Default is true.\n    *      - `immediate` - {boolean} - The widget enters the edit mode immediately after creation. Default is false.\n    *      - `apply` - `{function()=}` - The apply function is called, before the widget is saved.\n    *        The function have to return a boolean or an promise which can be resolved to a boolean.\n    *        The function can use injection.\n    *\n    * @returns {Object} self\n    */\n    this.widget = function(name, widget){\n      var w = angular.extend({reload: false, frameless: false}, widget);\n      if ( w.edit ){\n        var edit = {\n          reload: true,\n          immediate: false,\n          apply: defaultApplyFunction\n        };\n        angular.extend(edit, w.edit);\n        w.edit = edit;\n      }\n      widgets[name] = w;\n      return this;\n    };\n\n    /**\n     * @ngdoc method\n     * @name adf.dashboardProvider#widgetsPath\n     * @methodOf adf.dashboardProvider\n     * @description\n     *\n     * Sets the path to the directory which contains the widgets. The widgets\n     * path is used for widgets with a templateUrl which contains the\n     * placeholder {widgetsPath}. The placeholder is replaced with the\n     * configured value, before the template is loaded, but the template is\n     * cached with the unmodified templateUrl (e.g.: {widgetPath}/src/widgets).\n     * The default value of widgetPaths is ''.\n     *\n     *\n     * @param {string} path to the directory which contains the widgets\n     *\n     * @returns {Object} self\n     */\n    this.widgetsPath = function(path){\n      widgetsPath = path;\n      return this;\n    };\n\n   /**\n    * @ngdoc method\n    * @name adf.dashboardProvider#structure\n    * @methodOf adf.dashboardProvider\n    * @description\n    *\n    * Registers a new structure.\n    *\n    * @param {string} name of the structure\n    * @param {object} structure to be registered.\n    *\n    *   Object properties:\n    *\n    *   - `rows` - `{Array.<Object>}` - Rows of the dashboard structure.\n    *     - `styleClass` - `{string}` - CSS Class of the row.\n    *     - `columns` - `{Array.<Object>}` - Columns of the row.\n    *       - `styleClass` - `{string}` - CSS Class of the column.\n    *\n    * @returns {Object} self\n    */\n    this.structure = function(name, structure){\n      structures[name] = structure;\n      return this;\n    };\n\n   /**\n    * @ngdoc method\n    * @name adf.dashboardProvider#messageTemplate\n    * @methodOf adf.dashboardProvider\n    * @description\n    *\n    * Changes the template for messages.\n    *\n    * @param {string} template for messages.\n    *\n    * @returns {Object} self\n    */\n    this.messageTemplate = function(template){\n      messageTemplate = template;\n      return this;\n    };\n\n   /**\n    * @ngdoc method\n    * @name adf.dashboardProvider#loadingTemplate\n    * @methodOf adf.dashboardProvider\n    * @description\n    *\n    * Changes the template which is displayed as\n    * long as the widget resources are not resolved.\n    *\n    * @param {string} template loading template\n    *\n    * @returns {Object} self\n    */\n    this.loadingTemplate = function(template){\n      loadingTemplate = template;\n      return this;\n    };\n\n   /**\n    * @ngdoc service\n    * @name adf.dashboard\n    * @description\n    *\n    * The dashboard holds all options, structures and widgets.\n    *\n    * @property {Array.<Object>} widgets Array of registered widgets.\n    * @property {string} widgetsPath Default path for widgets.\n    * @property {Array.<Object>} structures Array of registered structures.\n    * @property {string} messageTemplate Template for messages.\n    * @property {string} loadingTemplate Template for widget loading.\n    *\n    * @returns {Object} self\n    */\n    this.$get = function(){\n      var cid = 0;\n\n      return {\n        widgets: widgets,\n        widgetsPath: widgetsPath,\n        structures: structures,\n        messageTemplate: messageTemplate,\n        loadingTemplate: loadingTemplate,\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboard#id\n         * @methodOf adf.dashboard\n         * @description\n         *\n         * Creates an ongoing numeric id. The method is used to create ids for\n         * columns and widgets in the dashboard.\n         */\n        id: function(){\n          return new Date().getTime() + '-' + (++cid);\n        },\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboard#idEqual\n         * @methodOf adf.dashboard\n         * @description\n         *\n         * Checks if the given ids are equal.\n         *\n         * @param {string} id widget or column id\n         * @param {string} other widget or column id\n         */\n         idEquals: function(id, other){\n           // use toString, because old ids are numbers\n           return ((id) && (other)) && (id.toString() === other.toString());\n         }\n      };\n    };\n\n  });\n","/*\n* The MIT License\n*\n* Copyright (c) 2015, Sebastian Sdorra\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n\n/* global angular */\nangular.module('adf')\n  .directive('adfDashboardRow', function ($compile, adfTemplatePath, columnTemplate) {\n    'use strict';\n\n    return {\n      restrict: 'E',\n      replace: true,\n      scope: {\n        row: '=',\n        adfModel: '=',\n        editMode: '=',\n        continuousEditMode: '=',\n        options: '='\n      },\n      templateUrl: adfTemplatePath + 'dashboard-row.html',\n      link: function($scope, $element) {\n        if (angular.isDefined($scope.row.columns) && angular.isArray($scope.row.columns)) {\n          $compile(columnTemplate)($scope, function(cloned) {\n            $element.append(cloned);\n          });\n        }\n      }\n    };\n  });\n","/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\nangular.module('adf')\n  .directive('adfWidgetContent', function($log, $q, $sce, $http, $templateCache,\n          $compile, $controller, $injector, dashboard) {\n\n    function parseUrl(url) {\n      var parsedUrl = url;\n      if (url.indexOf('{widgetsPath}') >= 0) {\n        parsedUrl = url.replace('{widgetsPath}', dashboard.widgetsPath)\n                .replace('//', '/');\n        if (parsedUrl.indexOf('/') === 0) {\n          parsedUrl = parsedUrl.substring(1);\n        }\n      }\n      return parsedUrl;\n    }\n\n    function getTemplate(widget) {\n      var deferred = $q.defer();\n\n      if (widget.template) {\n        deferred.resolve(widget.template);\n      } else if (widget.templateUrl) {\n        // try to fetch template from cache\n        var tpl = $templateCache.get(widget.templateUrl);\n        if (tpl) {\n          deferred.resolve(tpl);\n        } else {\n          var url = $sce.getTrustedResourceUrl(parseUrl(widget.templateUrl));\n          $http.get(url)\n               .success(function(response) {\n                 // put response to cache, with unmodified url as key\n                 $templateCache.put(widget.templateUrl, response);\n                 deferred.resolve(response);\n               })\n               .error(function() {\n                 deferred.reject('could not load template');\n               });\n        }\n      }\n\n      return deferred.promise;\n    }\n\n    function compileWidget($scope, $element, currentScope) {\n      var model = $scope.model;\n      var content = $scope.content;\n\n      // display loading template\n      $element.html(dashboard.loadingTemplate);\n\n      // create new scope\n      var templateScope = $scope.$new();\n\n      // pass config object to scope\n      if (!model.config) {\n        model.config = {};\n      }\n\n      templateScope.config = model.config;\n\n      // local injections\n      var base = {\n        $scope: templateScope,\n        widget: model,\n        config: model.config,\n        widgetSharedData: $scope.widgetSharedData || {},\n        dashId: $scope.dashId\n      };\n\n      // get resolve promises from content object\n      var resolvers = {};\n      resolvers.$tpl = getTemplate(content);\n      if (content.resolve) {\n        angular.forEach(content.resolve, function(promise, key) {\n          if (angular.isString(promise)) {\n            resolvers[key] = $injector.get(promise);\n          } else {\n            resolvers[key] = $injector.invoke(promise, promise, base);\n          }\n        });\n      }\n\n      // resolve all resolvers\n      $q.all(resolvers).then(function(locals) {\n        angular.extend(locals, base);\n\n        // compile & render template\n        var template = locals.$tpl;\n        $element.html(template);\n        if (content.controller) {\n          var templateCtrl = $controller(content.controller, locals);\n          if (content.controllerAs) {\n            templateScope[content.controllerAs] = templateCtrl;\n          }\n          $element.children().data('$ngControllerController', templateCtrl);\n        }\n        $compile($element.contents())(templateScope);\n      }, function(reason) {\n        // handle promise rejection\n        var msg = 'Could not resolve all promises';\n        if (reason) {\n          msg += ': ' + reason;\n        }\n        $log.warn(msg);\n        $element.html(dashboard.messageTemplate.replace(/{}/g, msg));\n      });\n\n      // destroy old scope\n      if (currentScope) {\n        currentScope.$destroy();\n      }\n\n      return templateScope;\n    }\n\n    return {\n      replace: true,\n      restrict: 'EA',\n      transclude: false,\n      scope: {\n        model: '=',\n        content: '=',\n        widgetSharedData: '=',\n        dashId: '='\n      },\n      link: function($scope, $element) {\n        var currentScope = compileWidget($scope, $element, null);\n        $scope.$on('widgetConfigChanged', function() {\n          currentScope = compileWidget($scope, $element, currentScope);\n        });\n        $scope.$on('widgetReload', function() {\n          currentScope = compileWidget($scope, $element, currentScope);\n        });\n        $scope.onEditConfig = function(){\n          $scope.$emit('adfEditWidgetConfig', $scope.model.config, $scope.model.wid);\n        };\n        $scope.onUpdateConfig = function(config){\n          $scope.model.config = config;\n          $scope.$emit('widgetConfigUpdated');\n        };\n      }\n    };\n\n  });\n","/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\nangular.module('adf')\n  .directive('adfWidget', function(_, $injector, $q, $log, $uibModal, $rootScope, dashboard, adfTemplatePath) {\n\n    function preLink($scope) {\n      var definition = $scope.definition;\n      if (definition) {\n        var w = dashboard.widgets[definition.type];\n        if (w) {\n          // pass title\n          if (!definition.title) {\n            definition.title = w.title;\n          }\n\n          //if (!definition.titleTemplateUrl) {\n          //  definition.titleTemplateUrl = adfTemplatePath + 'widget-title.html';\n          //  if (w.titleTemplateUrl) {\n          //    definition.titleTemplateUrl = w.titleTemplateUrl;\n          //  }\n          //}\n\n          //if (!definition.titleTemplateUrl) {\n          //  definition.frameless = w.frameless;\n          //}\n\n          if (!definition.styleClass) {\n            definition.styleClass = w.styleClass;\n          }\n\n          // set id for sortable\n          if (!definition.wid) {\n            definition.wid = dashboard.id();\n          }\n\n          // pass copy of widget to scope\n          $scope.widget = angular.copy(w);\n\n          $scope.widget.titleTemplateUrl = adfTemplatePath + 'widget-title-custom.html';\n          if (w.titleTemplateUrl) {\n            $scope.widget.titleTemplateUrl = w.titleTemplateUrl;\n          }\n\n          // merge default config object with definition from database\n          for (var configIdx in w.config) {\n            if(!definition.config) {\n              definition.config = {};\n            }\n            if(!definition.config[configIdx]) {\n              definition.config[configIdx] = w.config[configIdx];\n            }\n          }\n\n          //// create config object\n          //var config = definition.config;\n          //if (config) {\n          //  if (angular.isString(config)) {\n          //    config = angular.fromJson(config);\n          //  }\n          //} else {\n          //  config = {};\n          //}\n\n          // pass config to scope\n          $scope.config = definition.config;\n          $scope.widgetSharedData = w.widgetSharedData ? angular.copy(w.widgetSharedData) : {};\n\n          $scope.widgetSharedData.editMode = $scope.editMode;\n          $scope.$watch('editMode', function(editMode){\n            $scope.widgetSharedData.editMode = editMode;\n          });\n\n          // collapse exposed $scope.widgetState property\n          if (!$scope.widgetState) {\n            $scope.widgetState = {};\n            $scope.widgetState.isCollapsed= (w.collapsed === true) ? w.collapsed : false;\n            $scope.widgetState.configBeingEdited = false;\n          }\n        } else {\n          $log.warn('could not find widget ' + definition.type);\n        }\n      } else {\n        $log.debug('definition not specified, widget was probably removed');\n      }\n    }\n\n    function postLink($scope, $element) {\n      var definition = $scope.definition;\n      if (definition) {\n        // bind close function\n\n        var deleteWidget = function() {\n          var column = $scope.col;\n          if (column) {\n            //var index = column.widgets.indexOf(definition);\n            var index = _.findIndex(column.widgets, function(w) { return w.wid === definition.wid; });\n            if (index >= 0) {\n              column.widgets.splice(index, 1);\n            }\n          }\n          $element.remove();\n          $rootScope.$broadcast('adfWidgetRemovedFromColumn');\n          $scope.$emit('dashboardWidgetChanged');\n        };\n\n        $scope.remove = function() {\n          if ($scope.options.enableConfirmDelete) {\n            var deleteScope = $scope.$new();\n            var deleteTemplateUrl = adfTemplatePath + 'widget-delete.html';\n            if (definition.deleteTemplateUrl) {\n              deleteTemplateUrl = definition.deleteTemplateUrl;\n            }\n            var opts = {\n              scope: deleteScope,\n              templateUrl: deleteTemplateUrl,\n              backdrop: 'static'\n            };\n            var instance = $uibModal.open(opts);\n\n            deleteScope.closeDialog = function() {\n              instance.close();\n              deleteScope.$destroy();\n            };\n            deleteScope.deleteDialog = function() {\n              deleteWidget();\n              deleteScope.closeDialog();\n            };\n          } else {\n            deleteWidget();\n          }\n        };\n\n        // bind reload function\n        $scope.reload = function() {\n          $scope.$broadcast('widgetReload');\n        };\n\n        // bind edit function\n        $scope.edit = function() {\n          var editScope = $scope.$new();\n          editScope.definition = angular.copy(definition);\n\n          var adfEditTemplatePath = adfTemplatePath + 'widget-edit.html';\n          if (definition.editTemplateUrl) {\n            adfEditTemplatePath = definition.editTemplateUrl;\n          }\n\n          var opts = {\n            scope: editScope,\n            templateUrl: adfEditTemplatePath,\n            backdrop: 'static'\n          };\n\n          var instance = $uibModal.open(opts);\n\n          editScope.closeDialog = function() {\n            instance.close();\n            editScope.$destroy();\n          };\n\n          // TODO create util method\n          function createApplyPromise(result){\n            var promise;\n            if (typeof result === 'boolean'){\n              var deferred = $q.defer();\n              if (result){\n                deferred.resolve();\n              } else {\n                deferred.reject();\n              }\n              promise = deferred.promise;\n            } else {\n              promise = $q.when(result);\n            }\n            return promise;\n          }\n\n          editScope.saveDialog = function() {\n            // clear validation error\n            editScope.validationError = null;\n\n            // build injection locals\n            var widget = $scope.widget;\n            var applyFn = widget.edit.apply;\n            var locals = {\n              widget: widget,\n              definition: editScope.definition,\n              config: editScope.definition.config\n            };\n\n            // invoke apply function and apply if success\n            var result = $injector.invoke(applyFn, applyFn, locals);\n            createApplyPromise(result).then(function(){\n              definition.title = editScope.definition.title;\n              angular.extend(definition.config, editScope.definition.config);\n              if (widget.edit && widget.edit.reload) {\n                // reload content after edit dialog is closed\n                $scope.$broadcast('widgetConfigChanged');\n              }\n              editScope.closeDialog();\n            }, function(err){\n              if (err){\n                editScope.validationError = err;\n              } else {\n                editScope.validationError = 'Validation durring apply failed';\n              }\n            });\n          };\n\n        };\n      } else {\n        $log.debug('widget not found');\n      }\n    }\n\n    return {\n      replace: true,\n      restrict: 'EA',\n      transclude: false,\n      templateUrl: adfTemplatePath + 'widget.html',\n      scope: {\n        definition: '=',\n        col: '=column',\n        editMode: '=',\n        options: '=',\n        widgetState: '=',\n        columnState: '=',\n        dashId: '='\n      },\n      controller: function($scope) {\n\n        $scope.$on('adfDashboardCollapseExpand', function(event, args) {\n          $scope.widgetState.isCollapsed = args.collapseExpandStatus;\n        });\n\n        $scope.$on('adfWidgetEnterEditMode', function(event, widget){\n          if (dashboard.idEquals($scope.definition.wid, widget.wid)){\n            $scope.edit();\n          }\n        });\n\n        $scope.$on('widgetConfigUpdated', function() {\n          $scope.$emit('dashboardWidgetConfigUpdated', $scope.config, $scope.definition.wid, $scope.col.cid);\n        });\n\n        $scope.$on('adfWidgetConfigChanged', function(event, id){\n          var definition = $scope.definition;\n\n          if(definition.wid === id){\n            $scope.reload();\n          }\n        });\n\n        $scope.$on('adfEditWidgetConfigStarted', function(event, id){\n          var definition = $scope.definition;\n\n          $scope.widgetState.configBeingEdited = definition.wid === id;\n        });\n\n        $scope.$watch('widgetState.showFilters', function(showFilters){\n          // override definition.config when toggling filters content, to prevent loosing reference to the latest saved $scope.config object\n          if(showFilters) {\n            $scope.definition.config = $scope.config;\n          }\n        });\n\n\n        $scope.widgetClasses = function(w, definition, widgetState){\n          var classes = [];\n          classes.push('widget-' + definition.type);\n\n          if(definition.styleClass) {\n            classes.push(definition.styleClass);\n          }\n\n          if (widgetState.configBeingEdited) {\n            classes.push('widget-being-edited');\n          }\n\n          return classes;\n        };\n\n        $scope.openFullScreen = function() {\n          var definition = $scope.definition;\n          var fullScreenScope = $scope.$new();\n          var opts = {\n            scope: fullScreenScope,\n            templateUrl: adfTemplatePath + 'widget-fullscreen.html',\n            size: definition.modalSize || 'lg', // 'sm', 'lg'\n            backdrop: 'static',\n            windowClass: (definition.fullScreen) ? 'dashboard-modal widget-fullscreen' : 'dashboard-modal'\n          };\n\n          var instance = $uibModal.open(opts);\n          fullScreenScope.closeDialog = function() {\n            instance.close();\n            fullScreenScope.$destroy();\n          };\n        };\n\n        $scope.toggleWidgetFullscreen = function(){\n          $scope.columnState.isExpanded = !$scope.columnState.isExpanded;\n          $rootScope.$broadcast('widgetToggleFullscreen', $scope.col.cid);\n        };\n      },\n      compile: function() {\n\n        /**\n         * use pre link, because link of widget-content\n         * is executed before post link widget\n         */\n        return {\n          pre: preLink,\n          post: postLink\n        };\n      }\n    };\n\n  });\n",null,"(function(window, undefined) {'use strict';\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\nangular.module('adf', ['adf.provider', 'ui.bootstrap'])\n  .value('adfTemplatePath', '../src/templates/')\n  .value('rowTemplate', '<adf-dashboard-row row=\"row\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"row in column.rows track by $index\" />')\n  .value('columnTemplate', '<adf-dashboard-column-custom column=\"column\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"column in row.columns track by $index\" />')\n  .value('adfVersion', '0.12.0-SNAPSHOT');\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n/* global angular */\nangular.module('adf')\n  .directive('adfDashboardColumnCustom', function ($log, $compile, $rootScope, adfTemplatePath, rowTemplate, dashboard) {\n    \n\n    function columnCustomController($scope) {\n\n      $scope.columnState = {\n        isHidden: false,\n        isExpanded: false\n      };\n\n      $scope.addWidgetDialog = function () {\n        $scope.$emit('addWidgetDialog', $scope.column);\n      };\n\n      $scope.$on('widgetToggleFullscreen', function (evt, expandedCid) {\n        if ($scope.column.cid !== expandedCid) {\n          $scope.columnState.isHidden = !$scope.columnState.isHidden;\n        }\n      });\n\n      if (!angular.isDefined($scope.column.rows)) {\n        $scope.sortableConfig = {\n          group: {\n            name: 'widgets'\n          },\n          handle: '.adf-move',\n          ghostClass: 'placeholder',\n          animation: 150,\n          onEnd: function () {\n            $scope.$emit('dashboardWidgetChanged');\n          },\n          onAdd: function () {\n            $rootScope.$broadcast('adfWidgetAddedToColumn');\n          },\n          onRemove: function () {\n            $rootScope.$broadcast('adfWidgetRemovedFromColumn');\n          },\n          onUpdate: function () {\n            $rootScope.$broadcast('adfWidgetMovedInColumn');\n          }\n        };\n      }\n    }\n\n    return {\n      restrict: 'E',\n      replace: true,\n      scope: {\n        column: '=',\n        editMode: '=',\n        continuousEditMode: '=',\n        adfModel: '=',\n        options: '='\n      },\n      templateUrl: adfTemplatePath + 'dashboard-column-custom.html',\n      controller: columnCustomController,\n      link: function ($scope, $element) {\n        // set id\n        var col = $scope.column;\n        if (!col.cid) {\n          col.cid = dashboard.id();\n        }\n\n        if (angular.isDefined(col.rows) && angular.isArray(col.rows)) {\n          // be sure to tell Angular about the injected directive and push the new row directive to the column\n          $compile(rowTemplate)($scope, function (cloned) {\n            $element.append(cloned);\n          });\n        }\n      }\n    };\n\n  });\n\n/*\n* The MIT License\n*\n* Copyright (c) 2015, Sebastian Sdorra\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n\n/* global angular */\nangular.module('adf')\n  .directive('adfDashboardColumn', function ($log, $compile, $rootScope, adfTemplatePath, rowTemplate, dashboard) {\n    \n\n    /**\n     * moves a widget in between a column\n     */\n    function moveWidgetInColumn($scope, column, evt){\n      var widgets = column.widgets;\n      // move widget and apply to scope\n      $scope.$apply(function(){\n        widgets.splice(evt.newIndex, 0, widgets.splice(evt.oldIndex, 1)[0]);\n        $rootScope.$broadcast('adfWidgetMovedInColumn');\n      });\n    }\n\n    /**\n     * finds a widget by its id in the column\n     */\n    function findWidget(column, index){\n      var widget = null;\n      for (var i=0; i<column.widgets.length; i++){\n        var w = column.widgets[i];\n        if (dashboard.idEquals(w.wid,index)){\n          widget = w;\n          break;\n        }\n      }\n      return widget;\n    }\n\n    /**\n     * finds a column by its id in the model\n     */\n    function findColumn(model, index){\n      var column = null;\n      for (var i=0; i<model.rows.length; i++){\n        var r = model.rows[i];\n        for (var j=0; j<r.columns.length; j++){\n          var c = r.columns[j];\n          if (dashboard.idEquals(c.cid, index)){\n            column = c;\n            break;\n          } else if (c.rows){\n            column = findColumn(c, index);\n          }\n        }\n        if (column){\n          break;\n        }\n      }\n      return column;\n    }\n\n    /**\n     * get the adf id from an html element\n     */\n    function getId(el){\n      var id = el.getAttribute('adf-id');\n      return id ? id : '-1';\n    }\n\n    /**\n     * adds a widget to a column\n     */\n    function addWidgetToColumn($scope, model, targetColumn, evt){\n      // find source column\n      var cid = getId(evt.from);\n      var sourceColumn = findColumn(model, cid);\n\n      if (sourceColumn){\n        // find moved widget\n        var wid = getId(evt.item);\n        var widget = findWidget(sourceColumn, wid);\n\n        if (widget){\n          // add new item and apply to scope\n          $scope.$apply(function(){\n      \t\t\tif (!targetColumn.widgets) {\n      \t\t\t\ttargetColumn.widgets = [];\n      \t\t\t}\n            targetColumn.widgets.splice(evt.newIndex, 0, widget);\n\n            $rootScope.$broadcast('adfWidgetAddedToColumn');\n            $scope.$emit('dashboardWidgetChanged');\n          });\n        } else {\n          $log.warn('could not find widget with id ' + wid);\n        }\n      } else {\n        $log.warn('could not find column with id ' + cid);\n      }\n    }\n\n    /**\n     * removes a widget from a column\n     */\n    function removeWidgetFromColumn($scope, column, evt){\n      // remove old item and apply to scope\n      $scope.$apply(function(){\n        column.widgets.splice(evt.oldIndex, 1);\n        $rootScope.$broadcast('adfWidgetRemovedFromColumn');\n      });\n    }\n\n    /**\n     * enable sortable\n     */\n    function applySortable($scope, $element, model, column){\n      // enable drag and drop\n      var el = $element[0];\n      var sortable = Sortable.create(el, {\n        group: 'widgets',\n        handle: '.adf-move',\n        ghostClass: 'placeholder',\n        animation: 150,\n        onAdd: function(evt){\n          addWidgetToColumn($scope, model, column, evt);\n        },\n        onRemove: function(evt){\n          removeWidgetFromColumn($scope, column, evt);\n        },\n        onUpdate: function(evt){\n          moveWidgetInColumn($scope, column, evt);\n        }\n      });\n\n      // destroy sortable on column destroy event\n      $element.on('$destroy', function () {\n        // check sortable element, before calling destroy\n        // see https://github.com/sdorra/angular-dashboard-framework/issues/118\n        if (sortable.el){\n          sortable.destroy();\n        }\n      });\n    }\n\n    return {\n      restrict: 'E',\n      replace: true,\n      scope: {\n        column: '=',\n        editMode: '=',\n        continuousEditMode: '=',\n        adfModel: '=',\n        options: '='\n      },\n      templateUrl: adfTemplatePath + 'dashboard-column.html',\n      link: function ($scope, $element) {\n        // set id\n        var col = $scope.column;\n        if (!col.cid){\n          col.cid = dashboard.id();\n        }\n\n        if (angular.isDefined(col.rows) && angular.isArray(col.rows)) {\n          // be sure to tell Angular about the injected directive and push the new row directive to the column\n          $compile(rowTemplate)($scope, function(cloned) {\n            $element.append(cloned);\n          });\n        } else {\n          // enable drag and drop for widget only columns\n          applySortable($scope, $element, $scope.adfModel, col);\n        }\n      }\n    };\n  });\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * @ngdoc directive\n * @name adf.directive:adfDashboard\n * @element div\n * @restrict EA\n * @scope\n * @description\n *\n * `adfDashboard` is a directive which renders the dashboard with all its\n * components. The directive requires a name attribute. The name of the\n * dashboard can be used to store the model.\n *\n * @param {string} name name of the dashboard. This attribute is required.\n * @param {boolean=} editable false to disable the editmode of the dashboard.\n * @param {boolean=} collapsible true to make widgets collapsible on the dashboard.\n * @param {boolean=} maximizable true to add a button for open widgets in a large modal panel.\n * @param {boolean=} enableConfirmDelete true to ask before remove an widget from the dashboard.\n * @param {string=} structure the default structure of the dashboard.\n * @param {object=} adfModel model object of the dashboard.\n * @param {function=} adfWidgetFilter function to filter widgets on the add dialog.\n * @param {boolean=} continuousEditMode enable continuous edit mode, to fire add/change/remove\n *                   events during edit mode not reset it if edit mode is exited.\n */\n\nangular.module('adf')\n  .directive('adfDashboard', function ($rootScope, $log, $timeout, $uibModal, dashboard, adfTemplatePath) {\n    \n\n    function stringToBoolean(string){\n      switch(angular.isDefined(string) ? string.toLowerCase() : null){\n        case 'true': case 'yes': case '1': return true;\n        case 'false': case 'no': case '0': case null: return false;\n        default: return Boolean(string);\n      }\n    }\n\n    function copyWidgets(source, target) {\n      if ( source.widgets && source.widgets.length > 0 ){\n        var w = source.widgets.shift();\n        while (w){\n          target.widgets.push(w);\n          w = source.widgets.shift();\n        }\n      }\n    }\n\n    /**\n     * Copy widget from old columns to the new model\n     * @param object root the model\n     * @param array of columns\n     * @param counter\n     */\n    function fillStructure(root, columns, counter) {\n      counter = counter || 0;\n\n      if (angular.isDefined(root.rows)) {\n        angular.forEach(root.rows, function (row) {\n          angular.forEach(row.columns, function (column) {\n            // if the widgets prop doesn't exist, create a new array for it.\n            // this allows ui.sortable to do it's thing without error\n            if (!column.widgets) {\n              column.widgets = [];\n            }\n\n            // if a column exist at the counter index, copy over the column\n            if (angular.isDefined(columns[counter])) {\n              // do not add widgets to a column, which uses nested rows\n              if (angular.isUndefined(column.rows)){\n                copyWidgets(columns[counter], column);\n                counter++;\n              }\n            }\n\n            // run fillStructure again for any sub rows/columns\n            counter = fillStructure(column, columns, counter);\n          });\n        });\n      }\n      return counter;\n    }\n\n    /**\n    * Read Columns: recursively searches an object for the 'columns' property\n    * @param object model\n    * @param array  an array of existing columns; used when recursion happens\n    */\n    function readColumns(root, columns) {\n      columns = columns || [];\n\n      if (angular.isDefined(root.rows)) {\n        angular.forEach(root.rows, function (row) {\n          angular.forEach(row.columns, function (col) {\n            columns.push(col);\n            // keep reading columns until we can't any more\n            readColumns(col, columns);\n          });\n        });\n      }\n\n      return columns;\n    }\n\n    function changeStructure(model, structure){\n      var columns = readColumns(model);\n      var counter = 0;\n\n      model.rows = angular.copy(structure.rows);\n\n      while ( counter < columns.length ){\n        counter = fillStructure(model, columns, counter);\n      }\n    }\n\n    function createConfiguration(type){\n      var cfg = {};\n      var config = dashboard.widgets[type].config;\n      if (config){\n        cfg = angular.copy(config);\n      }\n      return cfg;\n    }\n\n    /**\n     * Find first widget column in model.\n     *\n     * @param dashboard model\n     */\n    function findFirstWidgetColumn(model){\n      var column = null;\n      if (!angular.isArray(model.rows)){\n        $log.error('model does not have any rows');\n        return null;\n      }\n      for (var i=0; i<model.rows.length; i++){\n        var row = model.rows[i];\n        if (angular.isArray(row.columns)){\n          for (var j=0; j<row.columns.length; j++){\n            var col = row.columns[j];\n            if (!col.rows){\n              column = col;\n              break;\n            }\n          }\n        }\n        if (column){\n          break;\n        }\n      }\n      return column;\n    }\n\n    /**\n     * Adds the widget to first column of the model.\n     *\n     * @param dashboard model\n     * @param widget to add to model\n     * @param name name of the dashboard\n     */\n    function addNewWidgetToModel(model, widget, name, column){\n      if (model){\n        if(!column) {\n          column = findFirstWidgetColumn(model);\n        }\n        if (column){\n          if (!column.widgets){\n            column.widgets = [];\n          }\n          column.widgets.unshift(widget);\n\n          // broadcast added event\n          $rootScope.$broadcast('adfWidgetAdded', name, model, widget);\n        } else {\n          $log.error('could not find first widget column');\n        }\n      } else {\n        $log.error('model is undefined');\n      }\n    }\n\n    /**\n     * Checks if the edit mode of the widget should be opened immediately.\n     *\n     * @param widget type\n     */\n    function isEditModeImmediate(type){\n      var widget = dashboard.widgets[type];\n      return widget && widget.edit && widget.edit.immediate;\n    }\n\n    /**\n     * Opens the edit mode of the specified widget.\n     *\n     * @param dashboard scope\n     * @param widget\n     */\n    function openEditMode($scope, widget){\n      // wait some time before fire enter edit mode event\n      $timeout(function(){\n        $scope.$broadcast('adfWidgetEnterEditMode', widget);\n      }, 200);\n    }\n\n    /**\n     * finds a widget by its id in the column\n     */\n    function findWidget(column, index){\n      var widget = null;\n      for (var i=0; i<column.widgets.length; i++){\n        var w = column.widgets[i];\n        if (dashboard.idEquals(w.wid,index)){\n          widget = w;\n          break;\n        }\n      }\n      return widget;\n    }\n\n    /**\n     * finds a column by its id in the model\n     */\n    function findColumn(model, index){\n      var column = null;\n      for (var i=0; i<model.rows.length; i++){\n        var r = model.rows[i];\n        for (var j=0; j<r.columns.length; j++){\n          var c = r.columns[j];\n          if (dashboard.idEquals(c.cid, index)){\n            column = c;\n            break;\n          } else if (c.rows){\n            column = findColumn(c, index);\n          }\n        }\n        if (column){\n          break;\n        }\n      }\n      return column;\n    }\n\n    /**\n     * Finds widget by id and changes its config\n     */\n    function changeConfigForWidgetById($scope, wid, config, widgetType, widgetTitle){\n      var model = $scope.model,\n        rows = model.rows,\n        widgetForUpdate = null;\n\n      if(rows){\n        angular.forEach(rows, function(row){\n          var columns = row.columns;\n\n          if(columns){\n            angular.forEach(columns, function(column){\n              var widgets = column.widgets;\n\n              if(widgets){\n                angular.forEach(widgets, function (widget, key) {\n\n                  if( widget.wid === wid ){\n                    widgetForUpdate = widget;\n                  }\n                });\n              }\n            });\n          }\n        });\n      }\n\n      if (widgetForUpdate) {\n        // If widgetType is defined and it is not equal to previous type, create config for new type of widget.\n        if (widgetType && widgetType !== widgetForUpdate.type) {\n          var defConfig = createConfiguration(widgetType);\n          widgetForUpdate.config = angular.extend({}, defConfig, config);\n          widgetForUpdate.type = widgetType;\n          widgetForUpdate.wid = dashboard.id();\n        }\n        else {\n          widgetForUpdate.config = angular.extend({}, widgetForUpdate.config, config);\n        }\n\n        if (widgetTitle) {\n          widgetForUpdate.title = widgetTitle;\n        }\n      }\n    }\n\n    function setExternalApiFunctions(scope) {\n      var api = {};\n\n      api.saveDashboard = function() {\n        return scope.saveDashboard();\n      };\n\n      api.manageEditMode = function() {\n        return scope.manageEditMode();\n      };\n\n      api.editDashboardDialog = function() {\n        return scope.editDashboardDialog();\n      };\n\n      api.cancelEditMode = function() {\n        return scope.cancelEditMode();\n      };\n\n      api.changeDashStructure = function(name, structure) {\n        scope.changeStructure(name, structure, scope);\n      };\n\n      api.triggerDashboardChanged = function() {\n        scope.triggerDashboardChanged();\n      };\n\n      api.addNewWidget = function(config, type, name) {\n        var defConfig = createConfiguration(type);\n\n        var widgetName = name ? name : '',\n          model = scope.model,\n          widget = {\n          type: type,\n          config: angular.extend({}, defConfig, config),\n          wid: dashboard.id(),\n          title: widgetName\n        };\n\n        addNewWidgetToModel(model, widget, widgetName);\n\n        scope.triggerDashboardChanged();\n      };\n\n      api.changeWidgetConfig = function(wid, config, type, title) {\n        changeConfigForWidgetById(scope, wid, config, type, title);\n\n        scope.$broadcast('adfWidgetConfigChanged', wid);\n\n        scope.triggerDashboardChanged();\n      };\n\n      scope.externalApi = api;\n    }\n\n    return {\n      replace: true,\n      restrict: 'EA',\n      transclude : false,\n      scope: {\n        structure: '@',\n        name: '@',\n        collapsible: '@',\n        editable: '@',\n        editMode: '@',\n        continuousEditMode: '=',\n        maximizable: '@',\n        adfModel: '=',\n        adfWidgetFilter: '=',\n        externalApi: '='\n      },\n      controller: function($scope){\n        var model = {};\n        var structure = {};\n        var widgetFilter = null;\n        var structureName = {};\n        var name = $scope.name;\n\n        // Watching for changes on adfModel\n        $scope.$watch('adfModel', function(oldVal, newVal) {\n          // has model changed or is the model attribute not set\n          if (newVal !== null || (oldVal === null && newVal === null)) {\n            model = $scope.adfModel;\n            widgetFilter = $scope.adfWidgetFilter;\n            if ( ! model || ! model.rows ){\n              structureName = $scope.structure;\n              structure = dashboard.structures[structureName];\n              if (structure){\n                if (model){\n                  model.rows = angular.copy(structure).rows;\n                } else {\n                  model = angular.copy(structure);\n                }\n                model.structure = structureName;\n              } else {\n                $log.error( 'could not find structure ' + structureName);\n              }\n            }\n\n            if (model) {\n              if (!model.title){\n                model.title = 'Dashboard';\n              }\n              if (!model.titleTemplateUrl) {\n                model.titleTemplateUrl = adfTemplatePath + 'dashboard-title-custom.html';\n              }\n              $scope.model = model;\n            } else {\n              $log.error('could not find or create model');\n            }\n          }\n        }, true);\n\n        // edit mode\n        $scope.editMode = false;\n        $scope.editClass = '';\n\n        $scope.toggleEditMode = function(){\n          $scope.editMode = ! $scope.editMode;\n          if ($scope.editMode){\n            if (!$scope.continuousEditMode) {\n              $scope.modelCopy = angular.copy($scope.adfModel, {});\n              $rootScope.$broadcast('adfIsEditMode');\n            }\n          }\n\n          if (!$scope.editMode){\n             $scope.triggerDashboardChanged();\n          }\n        };\n\n        $scope.$on('adfToggleEditMode', function() {\n            $scope.toggleEditMode();\n        });\n\n        $scope.collapseAll = function(collapseExpandStatus){\n          $rootScope.$broadcast('adfDashboardCollapseExpand',{collapseExpandStatus : collapseExpandStatus});\n        };\n\n        $scope.cancelEditMode = function(){\n          $scope.editMode = false;\n          if (!$scope.continuousEditMode) {\n            $scope.modelCopy = angular.copy($scope.modelCopy, $scope.adfModel);\n          }\n          $rootScope.$broadcast('adfDashboardEditsCancelled');\n        };\n\n        // edit dashboard settings\n        $scope.editDashboardDialog = function(){\n          var editDashboardScope = $scope.$new();\n          // create a copy of the title, to avoid changing the title to\n          // \"dashboard\" if the field is empty\n          editDashboardScope.copy = {\n            title: model.title\n          };\n          editDashboardScope.structures = dashboard.structures;\n\n          var adfEditTemplatePath = adfTemplatePath + 'dashboard-edit.html';\n          if(model.editTemplateUrl) {\n            adfEditTemplatePath = model.editTemplateUrl;\n          }\n          var instance = $uibModal.open({\n            scope: editDashboardScope,\n            templateUrl: adfEditTemplatePath,\n            backdrop: 'static'\n          });\n          editDashboardScope.changeStructure = function(name, structure){\n            $log.info('change structure to ' + name);\n            changeStructure(model, structure, $scope);\n          };\n          editDashboardScope.closeDialog = function(){\n            // copy the new title back to the model\n            model.title = editDashboardScope.copy.title;\n            // close modal and destroy the scope\n            instance.close();\n            editDashboardScope.$destroy();\n          };\n        };\n\n        // add widget dialog\n        $scope.addWidgetDialog = function(column){\n          var addScope = $scope.$new();\n          var model = $scope.model;\n          var widgets;\n          if (angular.isFunction(widgetFilter)){\n            widgets = {};\n            angular.forEach(dashboard.widgets, function(widget, type){\n              if (widgetFilter(widget, type, model, column)){\n                widgets[type] = widget;\n              }\n            });\n          } else {\n            widgets = dashboard.widgets;\n          }\n          addScope.widgets = widgets;\n          addScope.noWidgetsAvailable = angular.equals({}, widgets);\n\n          var adfAddTemplatePath = adfTemplatePath + 'widget-add.html';\n          if(model.addTemplateUrl) {\n            adfAddTemplatePath = model.addTemplateUrl;\n          }\n\n          var opts = {\n            scope: addScope,\n            templateUrl: adfAddTemplatePath,\n            backdrop: 'static'\n          };\n\n          var instance = $uibModal.open(opts);\n          addScope.addWidget = function(widget){\n            var w = {\n              type: widget,\n              config: createConfiguration(widget),\n              wid: dashboard.id()\n            };\n            addNewWidgetToModel(model, w, name, column);\n            // close and destroy\n            instance.close();\n            addScope.$destroy();\n\n            // check for open edit mode immediately\n            if (isEditModeImmediate(widget)){\n              openEditMode($scope, w);\n            }\n\n            $scope.triggerDashboardChanged();\n          };\n          addScope.closeDialog = function(){\n            // close and destroy\n            instance.close();\n            addScope.$destroy();\n          };\n        };\n\n        $scope.manageEditMode = function () {\n          $scope.editMode = !$scope.editMode;\n          if ($scope.editMode){\n            $scope.modelCopy = angular.copy($scope.adfModel, {});\n          }\n          return $scope.editMode;\n        };\n\n        $scope.saveDashboard = function() {\n          $scope.editMode = false;\n          $scope.triggerDashboardChanged();\n          return false;\n        };\n\n        $scope.changeStructure = function(name, structure) {\n          changeStructure(model, structure, $scope);\n        };\n\n        $scope.triggerDashboardChanged = function() {\n          $rootScope.$broadcast('adfDashboardChanged', name, model);\n        };\n\n        $scope.addNewWidgetToModel = addNewWidgetToModel;\n\n        $scope.$on('addWidgetDialog', function(event, column) {\n          $scope.addWidgetDialog(column);\n        });\n\n        $scope.$on('dashboardWidgetChanged', function() {\n          // the event should only be caught by dashboard directive, that's why it is not propagated further up the chain\n          event.stopPropagation();\n\n          $scope.triggerDashboardChanged();\n        });\n\n        $scope.$on('dashboardWidgetConfigUpdated', function(event, config, wid, cid) {\n          // the event should only be caught by dashboard directive, that's why it is not propagated further up the chain\n          event.stopPropagation();\n\n          // we need to overwrite config object before saving to database, otherwise it is set after saving so the changed data is lost\n          if(cid) {\n            var col = findColumn(model, cid);\n            if(wid && col) {\n              var widget = findWidget(col, wid);\n              if(widget) {\n                widget.config = config;\n                $scope.triggerDashboardChanged();\n              }\n            }\n          }\n        });\n\n        setExternalApiFunctions($scope);\n      },\n      link: function ($scope, $element, $attr) {\n        // pass options to scope\n        var options = {\n          name: $attr.name,\n          editable: true,\n          enableConfirmDelete: stringToBoolean($attr.enableconfirmdelete),\n          maximizable: stringToBoolean($attr.maximizable),\n          collapsible: stringToBoolean($attr.collapsible)\n        };\n        if (angular.isDefined($attr.editable)){\n          options.editable = stringToBoolean($attr.editable);\n        }\n        $scope.options = options;\n      },\n      templateUrl: adfTemplatePath + 'dashboard.html'\n    };\n  });\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\n/**\n * @ngdoc object\n * @name adf.dashboardProvider\n * @description\n *\n * The dashboardProvider can be used to register structures and widgets.\n */\nangular.module('adf.provider', [])\n  .provider('dashboard', function(){\n\n    var widgets = {};\n    var widgetsPath = '';\n    var structures = {};\n    var messageTemplate = '<div class=\"alert alert-danger\">{}</div>';\n    var loadingTemplate = '\\\n      <div class=\"progress progress-striped active\">\\n\\\n        <div class=\"progress-bar\" role=\"progressbar\" style=\"width: 100%\">\\n\\\n          <span class=\"sr-only\">loading ...</span>\\n\\\n        </div>\\n\\\n      </div>';\n\n    // default apply function of widget.edit.apply\n    var defaultApplyFunction = function(){\n      return true;\n    };\n\n   /**\n    * @ngdoc method\n    * @name adf.dashboardProvider#widget\n    * @methodOf adf.dashboardProvider\n    * @description\n    *\n    * Registers a new widget.\n    *\n    * @param {string} name of the widget\n    * @param {object} widget to be registered.\n    *\n    *   Object properties:\n    *\n    *   - `title` - `{string=}` - The title of the widget.\n    *   - `description` - `{string=}` - Description of the widget.\n    *   - `collapsed` - `{boolean=}` - true if the widget should be in collapsed state. Default is false.\n    *   - `config` - `{object}` - Predefined widget configuration.\n    *   - `controller` - `{string=|function()=}` - Controller fn that should be\n    *      associated with newly created scope of the widget or the name of a\n    *      {@link http://docs.angularjs.org/api/angular.Module#controller registered controller}\n    *      if passed as a string.\n    *   - `controllerAs` - `{string=}` - A controller alias name. If present the controller will be\n    *      published to scope under the `controllerAs` name.\n    *   - `frameless` - `{boolean=}` - false if the widget should be shown in frameless mode. The default is false.\n    *   - `styleClass` - `{object}` - space delimited string or map of classes bound to the widget.\n    *   - `template` - `{string=|function()=}` - html template as a string.\n    *   - `templateUrl` - `{string=}` - path to an html template.\n    *   - `reload` - `{boolean=}` - true if the widget could be reloaded. The default is false.\n    *   - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n    *      be injected into the controller. If any of these dependencies are promises, the widget\n    *      will wait for them all to be resolved or one to be rejected before the controller is\n    *      instantiated.\n    *      If all the promises are resolved successfully, the values of the resolved promises are\n    *      injected.\n    *\n    *      The map object is:\n    *      - `key` – `{string}`: a name of a dependency to be injected into the controller.\n    *      - `factory` - `{string|function}`: If `string` then it is an alias for a service.\n    *        Otherwise if function, then it is {@link http://docs.angularjs.org/api/AUTO.$injector#invoke injected}\n    *        and the return value is treated as the dependency. If the result is a promise, it is\n    *        resolved before its value is injected into the controller.\n    *   - `edit` - `{object}` - Edit modus of the widget.\n    *      - `controller` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\n    *      - `controllerAs` - `{string=}` - Same as above, but for the edit mode of the widget.\n    *      - `template` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\n    *      - `templateUrl` - `{string=}` - Same as above, but for the edit mode of the widget.\n    *      - `resolve` - `{Object.<string, function>=}` - Same as above, but for the edit mode of the widget.\n    *      - `reload` - {boolean} - true if the widget should be reloaded, after the edit mode is closed.\n    *        Default is true.\n    *      - `immediate` - {boolean} - The widget enters the edit mode immediately after creation. Default is false.\n    *      - `apply` - `{function()=}` - The apply function is called, before the widget is saved.\n    *        The function have to return a boolean or an promise which can be resolved to a boolean.\n    *        The function can use injection.\n    *\n    * @returns {Object} self\n    */\n    this.widget = function(name, widget){\n      var w = angular.extend({reload: false, frameless: false}, widget);\n      if ( w.edit ){\n        var edit = {\n          reload: true,\n          immediate: false,\n          apply: defaultApplyFunction\n        };\n        angular.extend(edit, w.edit);\n        w.edit = edit;\n      }\n      widgets[name] = w;\n      return this;\n    };\n\n    /**\n     * @ngdoc method\n     * @name adf.dashboardProvider#widgetsPath\n     * @methodOf adf.dashboardProvider\n     * @description\n     *\n     * Sets the path to the directory which contains the widgets. The widgets\n     * path is used for widgets with a templateUrl which contains the\n     * placeholder {widgetsPath}. The placeholder is replaced with the\n     * configured value, before the template is loaded, but the template is\n     * cached with the unmodified templateUrl (e.g.: {widgetPath}/src/widgets).\n     * The default value of widgetPaths is ''.\n     *\n     *\n     * @param {string} path to the directory which contains the widgets\n     *\n     * @returns {Object} self\n     */\n    this.widgetsPath = function(path){\n      widgetsPath = path;\n      return this;\n    };\n\n   /**\n    * @ngdoc method\n    * @name adf.dashboardProvider#structure\n    * @methodOf adf.dashboardProvider\n    * @description\n    *\n    * Registers a new structure.\n    *\n    * @param {string} name of the structure\n    * @param {object} structure to be registered.\n    *\n    *   Object properties:\n    *\n    *   - `rows` - `{Array.<Object>}` - Rows of the dashboard structure.\n    *     - `styleClass` - `{string}` - CSS Class of the row.\n    *     - `columns` - `{Array.<Object>}` - Columns of the row.\n    *       - `styleClass` - `{string}` - CSS Class of the column.\n    *\n    * @returns {Object} self\n    */\n    this.structure = function(name, structure){\n      structures[name] = structure;\n      return this;\n    };\n\n   /**\n    * @ngdoc method\n    * @name adf.dashboardProvider#messageTemplate\n    * @methodOf adf.dashboardProvider\n    * @description\n    *\n    * Changes the template for messages.\n    *\n    * @param {string} template for messages.\n    *\n    * @returns {Object} self\n    */\n    this.messageTemplate = function(template){\n      messageTemplate = template;\n      return this;\n    };\n\n   /**\n    * @ngdoc method\n    * @name adf.dashboardProvider#loadingTemplate\n    * @methodOf adf.dashboardProvider\n    * @description\n    *\n    * Changes the template which is displayed as\n    * long as the widget resources are not resolved.\n    *\n    * @param {string} template loading template\n    *\n    * @returns {Object} self\n    */\n    this.loadingTemplate = function(template){\n      loadingTemplate = template;\n      return this;\n    };\n\n   /**\n    * @ngdoc service\n    * @name adf.dashboard\n    * @description\n    *\n    * The dashboard holds all options, structures and widgets.\n    *\n    * @property {Array.<Object>} widgets Array of registered widgets.\n    * @property {string} widgetsPath Default path for widgets.\n    * @property {Array.<Object>} structures Array of registered structures.\n    * @property {string} messageTemplate Template for messages.\n    * @property {string} loadingTemplate Template for widget loading.\n    *\n    * @returns {Object} self\n    */\n    this.$get = function(){\n      var cid = 0;\n\n      return {\n        widgets: widgets,\n        widgetsPath: widgetsPath,\n        structures: structures,\n        messageTemplate: messageTemplate,\n        loadingTemplate: loadingTemplate,\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboard#id\n         * @methodOf adf.dashboard\n         * @description\n         *\n         * Creates an ongoing numeric id. The method is used to create ids for\n         * columns and widgets in the dashboard.\n         */\n        id: function(){\n          return new Date().getTime() + '-' + (++cid);\n        },\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboard#idEqual\n         * @methodOf adf.dashboard\n         * @description\n         *\n         * Checks if the given ids are equal.\n         *\n         * @param {string} id widget or column id\n         * @param {string} other widget or column id\n         */\n         idEquals: function(id, other){\n           // use toString, because old ids are numbers\n           return ((id) && (other)) && (id.toString() === other.toString());\n         }\n      };\n    };\n\n  });\n\n/*\n* The MIT License\n*\n* Copyright (c) 2015, Sebastian Sdorra\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n\n/* global angular */\nangular.module('adf')\n  .directive('adfDashboardRow', function ($compile, adfTemplatePath, columnTemplate) {\n    \n\n    return {\n      restrict: 'E',\n      replace: true,\n      scope: {\n        row: '=',\n        adfModel: '=',\n        editMode: '=',\n        continuousEditMode: '=',\n        options: '='\n      },\n      templateUrl: adfTemplatePath + 'dashboard-row.html',\n      link: function($scope, $element) {\n        if (angular.isDefined($scope.row.columns) && angular.isArray($scope.row.columns)) {\n          $compile(columnTemplate)($scope, function(cloned) {\n            $element.append(cloned);\n          });\n        }\n      }\n    };\n  });\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\nangular.module('adf')\n  .directive('adfWidgetContent', function($log, $q, $sce, $http, $templateCache,\n          $compile, $controller, $injector, dashboard) {\n\n    function parseUrl(url) {\n      var parsedUrl = url;\n      if (url.indexOf('{widgetsPath}') >= 0) {\n        parsedUrl = url.replace('{widgetsPath}', dashboard.widgetsPath)\n                .replace('//', '/');\n        if (parsedUrl.indexOf('/') === 0) {\n          parsedUrl = parsedUrl.substring(1);\n        }\n      }\n      return parsedUrl;\n    }\n\n    function getTemplate(widget) {\n      var deferred = $q.defer();\n\n      if (widget.template) {\n        deferred.resolve(widget.template);\n      } else if (widget.templateUrl) {\n        // try to fetch template from cache\n        var tpl = $templateCache.get(widget.templateUrl);\n        if (tpl) {\n          deferred.resolve(tpl);\n        } else {\n          var url = $sce.getTrustedResourceUrl(parseUrl(widget.templateUrl));\n          $http.get(url)\n               .success(function(response) {\n                 // put response to cache, with unmodified url as key\n                 $templateCache.put(widget.templateUrl, response);\n                 deferred.resolve(response);\n               })\n               .error(function() {\n                 deferred.reject('could not load template');\n               });\n        }\n      }\n\n      return deferred.promise;\n    }\n\n    function compileWidget($scope, $element, currentScope) {\n      var model = $scope.model;\n      var content = $scope.content;\n\n      // display loading template\n      $element.html(dashboard.loadingTemplate);\n\n      // create new scope\n      var templateScope = $scope.$new();\n\n      // pass config object to scope\n      if (!model.config) {\n        model.config = {};\n      }\n\n      templateScope.config = model.config;\n\n      // local injections\n      var base = {\n        $scope: templateScope,\n        widget: model,\n        config: model.config,\n        widgetSharedData: $scope.widgetSharedData || {},\n        dashId: $scope.dashId\n      };\n\n      // get resolve promises from content object\n      var resolvers = {};\n      resolvers.$tpl = getTemplate(content);\n      if (content.resolve) {\n        angular.forEach(content.resolve, function(promise, key) {\n          if (angular.isString(promise)) {\n            resolvers[key] = $injector.get(promise);\n          } else {\n            resolvers[key] = $injector.invoke(promise, promise, base);\n          }\n        });\n      }\n\n      // resolve all resolvers\n      $q.all(resolvers).then(function(locals) {\n        angular.extend(locals, base);\n\n        // compile & render template\n        var template = locals.$tpl;\n        $element.html(template);\n        if (content.controller) {\n          var templateCtrl = $controller(content.controller, locals);\n          if (content.controllerAs) {\n            templateScope[content.controllerAs] = templateCtrl;\n          }\n          $element.children().data('$ngControllerController', templateCtrl);\n        }\n        $compile($element.contents())(templateScope);\n      }, function(reason) {\n        // handle promise rejection\n        var msg = 'Could not resolve all promises';\n        if (reason) {\n          msg += ': ' + reason;\n        }\n        $log.warn(msg);\n        $element.html(dashboard.messageTemplate.replace(/{}/g, msg));\n      });\n\n      // destroy old scope\n      if (currentScope) {\n        currentScope.$destroy();\n      }\n\n      return templateScope;\n    }\n\n    return {\n      replace: true,\n      restrict: 'EA',\n      transclude: false,\n      scope: {\n        model: '=',\n        content: '=',\n        widgetSharedData: '=',\n        dashId: '='\n      },\n      link: function($scope, $element) {\n        var currentScope = compileWidget($scope, $element, null);\n        $scope.$on('widgetConfigChanged', function() {\n          currentScope = compileWidget($scope, $element, currentScope);\n        });\n        $scope.$on('widgetReload', function() {\n          currentScope = compileWidget($scope, $element, currentScope);\n        });\n        $scope.onEditConfig = function(){\n          $scope.$emit('adfEditWidgetConfig', $scope.model.config, $scope.model.wid);\n        };\n        $scope.onUpdateConfig = function(config){\n          $scope.model.config = config;\n          $scope.$emit('widgetConfigUpdated');\n        };\n      }\n    };\n\n  });\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\nangular.module('adf')\n  .directive('adfWidget', function(_, $injector, $q, $log, $uibModal, $rootScope, dashboard, adfTemplatePath) {\n\n    function preLink($scope) {\n      var definition = $scope.definition;\n      if (definition) {\n        var w = dashboard.widgets[definition.type];\n        if (w) {\n          // pass title\n          if (!definition.title) {\n            definition.title = w.title;\n          }\n\n          //if (!definition.titleTemplateUrl) {\n          //  definition.titleTemplateUrl = adfTemplatePath + 'widget-title.html';\n          //  if (w.titleTemplateUrl) {\n          //    definition.titleTemplateUrl = w.titleTemplateUrl;\n          //  }\n          //}\n\n          //if (!definition.titleTemplateUrl) {\n          //  definition.frameless = w.frameless;\n          //}\n\n          if (!definition.styleClass) {\n            definition.styleClass = w.styleClass;\n          }\n\n          // set id for sortable\n          if (!definition.wid) {\n            definition.wid = dashboard.id();\n          }\n\n          // pass copy of widget to scope\n          $scope.widget = angular.copy(w);\n\n          $scope.widget.titleTemplateUrl = adfTemplatePath + 'widget-title-custom.html';\n          if (w.titleTemplateUrl) {\n            $scope.widget.titleTemplateUrl = w.titleTemplateUrl;\n          }\n\n          // merge default config object with definition from database\n          for (var configIdx in w.config) {\n            if(!definition.config) {\n              definition.config = {};\n            }\n            if(!definition.config[configIdx]) {\n              definition.config[configIdx] = w.config[configIdx];\n            }\n          }\n\n          //// create config object\n          //var config = definition.config;\n          //if (config) {\n          //  if (angular.isString(config)) {\n          //    config = angular.fromJson(config);\n          //  }\n          //} else {\n          //  config = {};\n          //}\n\n          // pass config to scope\n          $scope.config = definition.config;\n          $scope.widgetSharedData = w.widgetSharedData ? angular.copy(w.widgetSharedData) : {};\n\n          $scope.widgetSharedData.editMode = $scope.editMode;\n          $scope.$watch('editMode', function(editMode){\n            $scope.widgetSharedData.editMode = editMode;\n          });\n\n          // collapse exposed $scope.widgetState property\n          if (!$scope.widgetState) {\n            $scope.widgetState = {};\n            $scope.widgetState.isCollapsed= (w.collapsed === true) ? w.collapsed : false;\n            $scope.widgetState.configBeingEdited = false;\n          }\n        } else {\n          $log.warn('could not find widget ' + definition.type);\n        }\n      } else {\n        $log.debug('definition not specified, widget was probably removed');\n      }\n    }\n\n    function postLink($scope, $element) {\n      var definition = $scope.definition;\n      if (definition) {\n        // bind close function\n\n        var deleteWidget = function() {\n          var column = $scope.col;\n          if (column) {\n            //var index = column.widgets.indexOf(definition);\n            var index = _.findIndex(column.widgets, function(w) { return w.wid === definition.wid; });\n            if (index >= 0) {\n              column.widgets.splice(index, 1);\n            }\n          }\n          $element.remove();\n          $rootScope.$broadcast('adfWidgetRemovedFromColumn');\n          $scope.$emit('dashboardWidgetChanged');\n        };\n\n        $scope.remove = function() {\n          if ($scope.options.enableConfirmDelete) {\n            var deleteScope = $scope.$new();\n            var deleteTemplateUrl = adfTemplatePath + 'widget-delete.html';\n            if (definition.deleteTemplateUrl) {\n              deleteTemplateUrl = definition.deleteTemplateUrl;\n            }\n            var opts = {\n              scope: deleteScope,\n              templateUrl: deleteTemplateUrl,\n              backdrop: 'static'\n            };\n            var instance = $uibModal.open(opts);\n\n            deleteScope.closeDialog = function() {\n              instance.close();\n              deleteScope.$destroy();\n            };\n            deleteScope.deleteDialog = function() {\n              deleteWidget();\n              deleteScope.closeDialog();\n            };\n          } else {\n            deleteWidget();\n          }\n        };\n\n        // bind reload function\n        $scope.reload = function() {\n          $scope.$broadcast('widgetReload');\n        };\n\n        // bind edit function\n        $scope.edit = function() {\n          var editScope = $scope.$new();\n          editScope.definition = angular.copy(definition);\n\n          var adfEditTemplatePath = adfTemplatePath + 'widget-edit.html';\n          if (definition.editTemplateUrl) {\n            adfEditTemplatePath = definition.editTemplateUrl;\n          }\n\n          var opts = {\n            scope: editScope,\n            templateUrl: adfEditTemplatePath,\n            backdrop: 'static'\n          };\n\n          var instance = $uibModal.open(opts);\n\n          editScope.closeDialog = function() {\n            instance.close();\n            editScope.$destroy();\n          };\n\n          // TODO create util method\n          function createApplyPromise(result){\n            var promise;\n            if (typeof result === 'boolean'){\n              var deferred = $q.defer();\n              if (result){\n                deferred.resolve();\n              } else {\n                deferred.reject();\n              }\n              promise = deferred.promise;\n            } else {\n              promise = $q.when(result);\n            }\n            return promise;\n          }\n\n          editScope.saveDialog = function() {\n            // clear validation error\n            editScope.validationError = null;\n\n            // build injection locals\n            var widget = $scope.widget;\n            var applyFn = widget.edit.apply;\n            var locals = {\n              widget: widget,\n              definition: editScope.definition,\n              config: editScope.definition.config\n            };\n\n            // invoke apply function and apply if success\n            var result = $injector.invoke(applyFn, applyFn, locals);\n            createApplyPromise(result).then(function(){\n              definition.title = editScope.definition.title;\n              angular.extend(definition.config, editScope.definition.config);\n              if (widget.edit && widget.edit.reload) {\n                // reload content after edit dialog is closed\n                $scope.$broadcast('widgetConfigChanged');\n              }\n              editScope.closeDialog();\n            }, function(err){\n              if (err){\n                editScope.validationError = err;\n              } else {\n                editScope.validationError = 'Validation durring apply failed';\n              }\n            });\n          };\n\n        };\n      } else {\n        $log.debug('widget not found');\n      }\n    }\n\n    return {\n      replace: true,\n      restrict: 'EA',\n      transclude: false,\n      templateUrl: adfTemplatePath + 'widget.html',\n      scope: {\n        definition: '=',\n        col: '=column',\n        editMode: '=',\n        options: '=',\n        widgetState: '=',\n        columnState: '=',\n        dashId: '='\n      },\n      controller: function($scope) {\n\n        $scope.$on('adfDashboardCollapseExpand', function(event, args) {\n          $scope.widgetState.isCollapsed = args.collapseExpandStatus;\n        });\n\n        $scope.$on('adfWidgetEnterEditMode', function(event, widget){\n          if (dashboard.idEquals($scope.definition.wid, widget.wid)){\n            $scope.edit();\n          }\n        });\n\n        $scope.$on('widgetConfigUpdated', function() {\n          $scope.$emit('dashboardWidgetConfigUpdated', $scope.config, $scope.definition.wid, $scope.col.cid);\n        });\n\n        $scope.$on('adfWidgetConfigChanged', function(event, id){\n          var definition = $scope.definition;\n\n          if(definition.wid === id){\n            $scope.reload();\n          }\n        });\n\n        $scope.$on('adfEditWidgetConfigStarted', function(event, id){\n          var definition = $scope.definition;\n\n          $scope.widgetState.configBeingEdited = definition.wid === id;\n        });\n\n        $scope.$watch('widgetState.showFilters', function(showFilters){\n          // override definition.config when toggling filters content, to prevent loosing reference to the latest saved $scope.config object\n          if(showFilters) {\n            $scope.definition.config = $scope.config;\n          }\n        });\n\n\n        $scope.widgetClasses = function(w, definition, widgetState){\n          var classes = [];\n          classes.push('widget-' + definition.type);\n\n          if(definition.styleClass) {\n            classes.push(definition.styleClass);\n          }\n\n          if (widgetState.configBeingEdited) {\n            classes.push('widget-being-edited');\n          }\n\n          return classes;\n        };\n\n        $scope.openFullScreen = function() {\n          var definition = $scope.definition;\n          var fullScreenScope = $scope.$new();\n          var opts = {\n            scope: fullScreenScope,\n            templateUrl: adfTemplatePath + 'widget-fullscreen.html',\n            size: definition.modalSize || 'lg', // 'sm', 'lg'\n            backdrop: 'static',\n            windowClass: (definition.fullScreen) ? 'dashboard-modal widget-fullscreen' : 'dashboard-modal'\n          };\n\n          var instance = $uibModal.open(opts);\n          fullScreenScope.closeDialog = function() {\n            instance.close();\n            fullScreenScope.$destroy();\n          };\n        };\n\n        $scope.toggleWidgetFullscreen = function(){\n          $scope.columnState.isExpanded = !$scope.columnState.isExpanded;\n          $rootScope.$broadcast('widgetToggleFullscreen', $scope.col.cid);\n        };\n      },\n      compile: function() {\n\n        /**\n         * use pre link, because link of widget-content\n         * is executed before post link widget\n         */\n        return {\n          pre: preLink,\n          post: postLink\n        };\n      }\n    };\n\n  });\n\nangular.module(\"adf\").run([\"$templateCache\", function($templateCache) {$templateCache.put(\"../src/templates/dashboard-column-custom.html\",\"<div adf-id={{column.cid}} class=\\\"dashboardPlaceholder column {{column.styleClass}}\\\" ng-class=\\\"{\\'full-screen\\': columnState.isExpanded }\\\" ng-model=column.widgets ng-hide=columnState.isHidden> <div ng-sortable=sortableConfig class=adf-widgets adf-id={{column.cid}} ng-class=\\\"{\\'adf-nested\\':column.rows}\\\"> <adf-widget ng-repeat=\\\"definition in column.widgets track by definition.wid\\\" definition=definition column=column edit-mode=editMode options=options widget-state=widgetState column-state=columnState dash-id=adfModel._id> </adf-widget></div> <div ng-if=\\\"editMode && !column.rows\\\" class=\\\"text-center js-remove\\\"> <a href title=\\\"add new widget\\\" ng-click=addWidgetDialog()> <i class=\\\"fa fa-plus fa-5x\\\"></i> <p>Add widget</p> </a> </div>  </div> \");\n$templateCache.put(\"../src/templates/dashboard-column.html\",\"<div adf-id={{column.cid}} class=column ng-class=column.styleClass ng-model=column.widgets> <adf-widget ng-repeat=\\\"definition in column.widgets\\\" definition=definition column=column edit-mode=editMode options=options widget-state=widgetState>  </adf-widget></div> \");\n$templateCache.put(\"../src/templates/dashboard-edit.html\",\"<div class=modal-header> <button type=button class=close ng-click=closeDialog() aria-hidden=true>&times;</button> <h4 class=modal-title>Edit Dashboard</h4> </div> <div class=modal-body> <form role=form>     <div class=form-group> <label>Structure</label> <div class=radio ng-repeat=\\\"(key, structure) in structures\\\"> <label> <input type=radio value={{key}} ng-model=model.structure ng-change=\\\"changeStructure(key, structure)\\\"> {{key}} </label> </div> </div> </form> </div> <div class=modal-footer> <button type=button class=\\\"btn btn-primary\\\" ng-click=closeDialog()>Close</button> </div> \");\n$templateCache.put(\"../src/templates/dashboard-row.html\",\"<div class=row ng-class=row.styleClass>  </div> \");\n$templateCache.put(\"../src/templates/dashboard-title-custom.html\",\"<div class=\\\"row dashboard-nav\\\"> <div class=col-md-8> <h1 ng-if=editMode> {{model.title}} </h1> </div> <div class=col-md-4> <ul style=\\\"font-size: 16px\\\" class=\\\"nav navbar-nav navbar-right dashboard-menu\\\"> <li ng-if=editMode> <a href title=\\\"edit dashboard\\\" ng-click=editDashboardDialog()> <i class=\\\"fa fa-sliders\\\"></i> <p>Settings</p> </a> </li> <li ng-if=editMode> <a href title=\\\"{{editMode ? \\'save changes\\' : \\'enable edit mode\\'}}\\\" ng-click=toggleEditMode()> <i class=fa x-ng-class=\\\"{\\'fa-pencil\\' : !editMode, \\'fa-floppy-o\\' : editMode}\\\"></i> <p ng-if=editMode>Save</p> <p ng-if=!editMode>Edit</p> </a> </li> <li ng-if=editMode> <a href title=\\\"undo changes\\\" ng-click=cancelEditMode()> <i class=\\\"fa fa-undo adf-flip\\\"></i> <p>Undo</p> </a> </li> </ul> </div> </div> \");\n$templateCache.put(\"../src/templates/dashboard-title.html\",\"<h1> {{model.title}} <span style=\\\"font-size: 16px\\\" class=pull-right> <a href ng-if=editMode title=\\\"add new widget\\\" ng-click=addWidgetDialog()> <i class=\\\"glyphicon glyphicon-plus-sign\\\"></i> </a> <a href ng-if=editMode title=\\\"edit dashboard\\\" ng-click=editDashboardDialog()> <i class=\\\"glyphicon glyphicon-cog\\\"></i> </a> <a href ng-if=options.editable title=\\\"{{editMode ? \\'save changes\\' : \\'enable edit mode\\'}}\\\" ng-click=toggleEditMode()> <i class=glyphicon x-ng-class=\\\"{\\'glyphicon-edit\\' : !editMode, \\'glyphicon-save\\' : editMode}\\\"></i> </a> <a href ng-if=editMode title=\\\"undo changes\\\" ng-click=cancelEditMode()> <i class=\\\"glyphicon glyphicon-repeat adf-flip\\\"></i> </a> </span> </h1> \");\n$templateCache.put(\"../src/templates/dashboard.html\",\"<div class=dashboard-container>  <div class=\\\"dashboard container-fluid\\\" x-ng-class=\\\"{\\'edit\\' : editMode}\\\"> <adf-dashboard-row row=row adf-model=model options=options ng-repeat=\\\"row in model.rows track by $index\\\" edit-mode=editMode continuous-edit-mode=continuousEditMode> </adf-dashboard-row></div> </div> \");\n$templateCache.put(\"../src/templates/widget-add.html\",\"<div class=modal-header> <button type=button class=close ng-click=closeDialog() aria-hidden=true>&times;</button> <h4 class=modal-title>Add new widget</h4> </div> <div class=modal-body> <div style=\\\"display: inline-block;\\\"> <dl class=dl-horizontal> <dt ng-repeat-start=\\\"(key, widget) in widgets\\\"> <a href ng-click=addWidget(key)> {{widget.title}} </a> </dt> <dd ng-repeat-end ng-if=widget.description> {{widget.description}} </dd> </dl> <div ng-if=noWidgetsAvailable>No widgets available for selected placeholder</div> </div> </div> <div class=modal-footer> <button type=button class=\\\"btn btn-primary\\\" ng-click=closeDialog()>Close</button> </div> \");\n$templateCache.put(\"../src/templates/widget-delete.html\",\"<div class=modal-header> <h4 class=modal-title>Delete {{widget.title}}</h4> </div> <div class=modal-body> <form role=form> <div class=form-group> <label for=widgetTitle>Are you sure you want to delete this widget ?</label> </div> </form> </div> <div class=modal-footer> <button type=button class=\\\"btn btn-default\\\" ng-click=closeDialog()>Close</button> <button type=button class=\\\"btn btn-primary\\\" ng-click=deleteDialog()>Delete</button> </div> \");\n$templateCache.put(\"../src/templates/widget-edit.html\",\"<form name=widgetEditForm novalidate role=form ng-submit=saveDialog()> <div class=modal-header> <button type=button class=close ng-click=closeDialog() aria-hidden=true>&times;</button> <h4 class=modal-title>{{widget.title}}</h4> </div> <div class=modal-body> <div class=\\\"alert alert-danger\\\" role=alert ng-show=validationError> <strong>Apply error:</strong> {{validationError}} </div> <div class=form-group> <label for=widgetTitle>Title</label> <input type=text class=form-control id=widgetTitle ng-model=definition.title placeholder=\\\"Enter title\\\" required> </div> <div ng-if=widget.edit> <adf-widget-content model=definition content=widget.edit dash-id=dashId> </adf-widget-content></div> </div> <div class=modal-footer> <button type=button class=\\\"btn btn-default\\\" ng-click=closeDialog()>Cancel</button> <input type=submit class=\\\"btn btn-primary\\\" ng-disabled=widgetEditForm.$invalid value=Apply> </div> </form> \");\n$templateCache.put(\"../src/templates/widget-fullscreen.html\",\"<div class=modal-header> <div class=\\\"pull-right widget-icons\\\"> <a href title=\\\"Reload Widget Content\\\" ng-if=widget.reload ng-click=reload()> <i class=\\\"glyphicon glyphicon-refresh\\\"></i> </a> <a href title=close ng-click=closeDialog()> <i class=\\\"glyphicon glyphicon-remove\\\"></i> </a> </div> <h4 class=modal-title>{{definition.title}}</h4> </div> <div class=modal-body> <adf-widget-content model=definition content=widget> </adf-widget-content></div> <div class=modal-footer> <button type=button class=\\\"btn btn-primary\\\" ng-click=closeDialog()>Close</button> </div> \");\n$templateCache.put(\"../src/templates/widget-title-custom.html\",\"<div class=panel-title> <div class=status-bar-widget ng-if=widget.statusBar> <adf-widget-content class=status-bar-widget-content model=definition content=widget.statusBar widget-shared-data=widgetSharedData> </adf-widget-content></div> <div class=\\\"widget-actions pull-right\\\"> <div class=pull-right>  <button class=\\\"btn btn-link\\\" title=\\\"filter widget data\\\" ng-disabled=\\\"editMode || widgetSharedData.layoutEditMode\\\" ng-click=\\\"widgetState.showFilters = !widgetState.showFilters\\\" ng-if=widget.filter> <i class=\\\"fa fa-filter\\\"></i> </button>  <button class=\\\"btn btn-link\\\" title=Minimize/Maximize ng-click=toggleWidgetFullscreen() ng-show=options.maximizable> <i class=fa ng-class=\\\"columnState.isExpanded ? \\'fa-compress\\' : \\'fa-expand\\'\\\"></i> </button>  <button class=\\\"btn btn-link\\\" title=\\\"remove widget\\\" ng-click=remove() ng-if=editMode> <i class=\\\"fa fa-times\\\"></i> </button> </div> <div ng-if=widget.headerActions class=pull-right> <adf-widget-content model=definition content=widget.headerActions widget-shared-data=widgetSharedData> </adf-widget-content></div> <div class=clear></div> </div> <div class=clear></div> </div> \");\n$templateCache.put(\"../src/templates/widget-title.html\",\"<h3 class=panel-title> {{definition.title}} <span class=pull-right> <a href title=\\\"reload widget content\\\" ng-if=widget.reload ng-click=reload()> <i class=\\\"glyphicon glyphicon-refresh\\\"></i> </a>  <a href title=\\\"change widget location\\\" class=adf-move ng-if=editMode> <i class=\\\"glyphicon glyphicon-move\\\"></i> </a>  <a href title=\\\"collapse widget\\\" ng-show=\\\"options.collapsible && !widgetState.isCollapsed\\\" ng-click=\\\"widgetState.isCollapsed = !widgetState.isCollapsed\\\"> <i class=\\\"glyphicon glyphicon-minus\\\"></i> </a>  <a href title=\\\"expand widget\\\" ng-show=\\\"options.collapsible && widgetState.isCollapsed\\\" ng-click=\\\"widgetState.isCollapsed = !widgetState.isCollapsed\\\"> <i class=\\\"glyphicon glyphicon-plus\\\"></i> </a>   <a href title=Minimize/Maximize ng-click=openFullScreen() ng-show=options.maximizable> <i class=\\\"glyphicon glyphicon-fullscreen\\\"></i> </a>  <a href title=\\\"remove widget\\\" ng-click=remove() ng-if=editMode> <i class=\\\"glyphicon glyphicon-remove\\\"></i> </a> </span> </h3> \");\n$templateCache.put(\"../src/templates/widget.html\",\"<div adf-id={{definition.wid}} adf-widget-type={{definition.type}} ng-class=\\\"widgetClasses(widget, definition, widgetState)\\\" class=\\\"widget panel panel-default\\\"> <div class=widget-growl-messages> <div growl reference={{definition.wid}} inline=true></div> </div> <div class=\\\"panel-heading clearfix\\\" ng-if=\\\"!widget.frameless || editMode\\\"> <div ng-include src=widget.titleTemplateUrl ng-class=\\\"{\\'adf-move\\':editMode}\\\"></div> </div> <div ng-class=\\\"{\\'panel-body\\':!widget.frameless || editMode}\\\" uib-collapse=widgetState.isCollapsed> <div ng-if=\\\"widget.filter && widgetState.showFilters\\\" class=widget-filter> <adf-widget-content model=definition content=widget.filter widget-shared-data=widgetSharedData dash-id=dashId> </adf-widget-content></div> <adf-widget-content model=definition content=widget widget-shared-data=widgetSharedData dash-id=dashId> </adf-widget-content></div> </div> \");}]);})(window);"],"sourceRoot":"/source/"}