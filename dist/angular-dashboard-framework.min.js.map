{"version":3,"sources":["adf.js","column-custom.js","angular-dashboard-framework.min.js","column.js","dashboard.js","provider.js","row.js","widget-content.js","widget.js","angular-dashboard-framework.tpl.js","angular-dashboard-framework.js"],"names":["window","undefined","angular","module","value","directive","$log","$compile","$rootScope","adfTemplatePath","rowTemplate","dashboard","columnCustomController","$scope","columnState","isHidden","isExpanded","allowPutWidgetIntoColumn","widget","sourceColumn","column","options","singleWidgetMode","allowPutWidget","minSize","width","columnHasWidgets","widgets","length","addWidgetDialog","$emit","$on","evt","expandedCid","cid","isDefined","rows","sortableConfig","group","name","put","handle","ghostClass","animation","onStart","$broadcast","model","onEnd","onAdd","onRemove","onUpdate","$inject","restrict","replace","scope","editMode","continuousEditMode","adfModel","templateUrl","controller","link","$element","col","id","isArray","cloned","append","moveWidgetInColumn","$apply","splice","newIndex","oldIndex","findWidget","index","i","w","idEquals","wid","findColumn","r","j","columns","c","getId","el","getAttribute","addWidgetToColumn","targetColumn","from","item","warn","removeWidgetFromColumn","applySortable","sortable","Sortable","create","on","destroy","$timeout","$uibModal","stringToBoolean","string","toLowerCase","Boolean","widgetFilter","copyWidgets","source","target","warnings","shift","widgetExceedsMinSize","push","fillStructure","root","counter","forEach","row","oneWidgetPerColumn","readColumns","changeStructure","structure","warningMessages","copy","createConfiguration","type","cfg","config","findFirstWidgetColumn","error","addNewWidgetToModel","unshift","isEditModeImmediate","edit","immediate","openEditMode","changeConfigForWidgetById","key","setExternalApiFunctions","api","saveDashboard","manageEditMode","editDashboardDialog","cancelEditMode","changeDashStructure","triggerDashboardChanged","addNewWidget","defConfig","widgetName","extend","title","changeWidgetConfig","externalApi","transclude","collapsible","editable","maximizable","adfWidgetFilter","structureName","$watch","oldVal","newVal","structures","titleTemplateUrl","editClass","toggleEditMode","modelCopy","collapseAll","collapseExpandStatus","editDashboardScope","$new","adfEditTemplatePath","editTemplateUrl","instance","open","backdrop","info","closeDialog","close","$destroy","addScope","isFunction","noWidgetsAvailable","equals","adfAddTemplatePath","addTemplateUrl","opts","addWidget","event","stopPropagation","$attr","enableConfirmDelete","enableconfirmdelete","provider","widgetsPath","messageTemplate","loadingTemplate","defaultApplyFunction","this","reload","frameless","apply","path","template","$get","Date","getTime","other","toString","columnTemplate","$q","$sce","$http","$templateCache","$controller","$injector","parseUrl","url","parsedUrl","indexOf","substring","getTemplate","deferred","defer","resolve","tpl","get","getTrustedResourceUrl","success","response","reject","promise","compileWidget","currentScope","content","html","templateScope","base","widgetSharedData","dashId","resolvers","$tpl","isString","invoke","all","then","locals","templateCtrl","controllerAs","children","data","contents","reason","msg","onEditConfig","onUpdateConfig","_","preLink","definition","styleClass","configIdx","widgetState","isCollapsed","collapsed","configBeingEdited","isValidWidth","debug","postLink","deleteWidget","findIndex","remove","deleteScope","deleteTemplateUrl","deleteDialog","createApplyPromise","result","when","editScope","saveDialog","validationError","applyFn","err","args","showFilters","widgetClasses","classes","openFullScreen","fullScreenScope","size","modalSize","windowClass","toggleWidgetFullscreen","compile","pre","post","run"],"mappings":"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","file":"angular-dashboard-framework.min.js","sourcesContent":["/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n'use strict';\r\n\r\nangular.module('adf', ['adf.provider', 'ui.bootstrap'])\r\n  .value('adfTemplatePath', '../src/templates/')\r\n  .value('rowTemplate', '<adf-dashboard-row row=\"row\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"row in column.rows track by $index\" />')\r\n  .value('columnTemplate', '<adf-dashboard-column-custom column=\"column\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"column in row.columns track by $index\" />')\r\n  .value('adfVersion', '<<adfVersion>>');\r\n","/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n/* global angular */\nangular.module('adf')\n  .directive('adfDashboardColumnCustom', function ($log, $compile, $rootScope, adfTemplatePath, rowTemplate, dashboard) {\n    'use strict';\n\n    function columnCustomController($scope) {\n\n      $scope.columnState = {\n        isHidden: false,\n        isExpanded: false\n      };\n\n      var allowPutWidgetIntoColumn = function (widget, sourceColumn) {\n        if ($scope.column === sourceColumn || !$scope.options.singleWidgetMode) {return true;}\n\n        var allowPutWidget = !widget || !widget.minSize || $scope.column.width >= widget.minSize;\n        var columnHasWidgets = $scope.column.widgets.length ? false : true;\n\n        return columnHasWidgets && allowPutWidget;\n      };\n\n      $scope.addWidgetDialog = function () {\n        $scope.$emit('addWidgetDialog', $scope.column);\n      };\n\n      $scope.$on('widgetToggleFullscreen', function (evt, expandedCid) {\n        if ($scope.column.cid !== expandedCid) {\n          $scope.columnState.isHidden = !$scope.columnState.isHidden;\n        }\n      });\n\n      if (!angular.isDefined($scope.column.rows)) {\n        $scope.sortableConfig = {\n          group: {\n            name: 'widgets',\n            put: true\n          },\n          handle: '.adf-move',\n          ghostClass: 'placeholder',\n          animation: 150,\n          onStart: function (evt) {\n            $rootScope.$broadcast('widgetMoveStart', evt.model, $scope.column);\n          },\n          onEnd: function () {\n            $rootScope.$broadcast('widgetMoveEnd');\n            $scope.$emit('dashboardWidgetChanged');\n          },\n          onAdd: function () {\n            $rootScope.$broadcast('adfWidgetAddedToColumn');\n          },\n          onRemove: function () {\n            $rootScope.$broadcast('adfWidgetRemovedFromColumn');\n          },\n          onUpdate: function () {\n            $rootScope.$broadcast('adfWidgetMovedInColumn');\n          }\n        };\n\n        $scope.$on('widgetMoveStart', function (evt, widget, sourceColumn) {\n          $scope.sortableConfig.group.put = allowPutWidgetIntoColumn(widget, sourceColumn);\n        });\n\n        $scope.$on('widgetMoveEnd', function () {\n          $scope.sortableConfig.group.put = true;\n        });\n      }\n    }\n\n    return {\n      restrict: 'E',\n      replace: true,\n      scope: {\n        column: '=',\n        editMode: '=',\n        continuousEditMode: '=',\n        adfModel: '=',\n        options: '='\n      },\n      templateUrl: adfTemplatePath + 'dashboard-column-custom.html',\n      controller: columnCustomController,\n      link: function ($scope, $element) {\n        // set id\n        var col = $scope.column;\n        if (!col.cid) {\n          col.cid = dashboard.id();\n        }\n\n        if (angular.isDefined(col.rows) && angular.isArray(col.rows)) {\n          // be sure to tell Angular about the injected directive and push the new row directive to the column\n          $compile(rowTemplate)($scope, function (cloned) {\n            $element.append(cloned);\n          });\n        }\n      }\n    };\n\n  });\n","(function(window, undefined) {'use strict';\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n\r\nangular.module('adf', ['adf.provider', 'ui.bootstrap'])\r\n  .value('adfTemplatePath', '../src/templates/')\r\n  .value('rowTemplate', '<adf-dashboard-row row=\"row\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"row in column.rows track by $index\" />')\r\n  .value('columnTemplate', '<adf-dashboard-column-custom column=\"column\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"column in row.columns track by $index\" />')\r\n  .value('adfVersion', '0.12.0-SNAPSHOT');\r\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n/* global angular */\nangular.module('adf')\n  .directive('adfDashboardColumnCustom', [\"$log\", \"$compile\", \"$rootScope\", \"adfTemplatePath\", \"rowTemplate\", \"dashboard\", function ($log, $compile, $rootScope, adfTemplatePath, rowTemplate, dashboard) {\n    \n\n    columnCustomController.$inject = [\"$scope\"];\n    function columnCustomController($scope) {\n\n      $scope.columnState = {\n        isHidden: false,\n        isExpanded: false\n      };\n\n      var allowPutWidgetIntoColumn = function (widget, sourceColumn) {\n        if ($scope.column === sourceColumn || !$scope.options.singleWidgetMode) {return true;}\n\n        var allowPutWidget = !widget || !widget.minSize || $scope.column.width >= widget.minSize;\n        var columnHasWidgets = $scope.column.widgets.length ? false : true;\n\n        return columnHasWidgets && allowPutWidget;\n      };\n\n      $scope.addWidgetDialog = function () {\n        $scope.$emit('addWidgetDialog', $scope.column);\n      };\n\n      $scope.$on('widgetToggleFullscreen', function (evt, expandedCid) {\n        if ($scope.column.cid !== expandedCid) {\n          $scope.columnState.isHidden = !$scope.columnState.isHidden;\n        }\n      });\n\n      if (!angular.isDefined($scope.column.rows)) {\n        $scope.sortableConfig = {\n          group: {\n            name: 'widgets',\n            put: true\n          },\n          handle: '.adf-move',\n          ghostClass: 'placeholder',\n          animation: 150,\n          onStart: function (evt) {\n            $rootScope.$broadcast('widgetMoveStart', evt.model, $scope.column);\n          },\n          onEnd: function () {\n            $rootScope.$broadcast('widgetMoveEnd');\n            $scope.$emit('dashboardWidgetChanged');\n          },\n          onAdd: function () {\n            $rootScope.$broadcast('adfWidgetAddedToColumn');\n          },\n          onRemove: function () {\n            $rootScope.$broadcast('adfWidgetRemovedFromColumn');\n          },\n          onUpdate: function () {\n            $rootScope.$broadcast('adfWidgetMovedInColumn');\n          }\n        };\n\n        $scope.$on('widgetMoveStart', function (evt, widget, sourceColumn) {\n          $scope.sortableConfig.group.put = allowPutWidgetIntoColumn(widget, sourceColumn);\n        });\n\n        $scope.$on('widgetMoveEnd', function () {\n          $scope.sortableConfig.group.put = true;\n        });\n      }\n    }\n\n    return {\n      restrict: 'E',\n      replace: true,\n      scope: {\n        column: '=',\n        editMode: '=',\n        continuousEditMode: '=',\n        adfModel: '=',\n        options: '='\n      },\n      templateUrl: adfTemplatePath + 'dashboard-column-custom.html',\n      controller: columnCustomController,\n      link: function ($scope, $element) {\n        // set id\n        var col = $scope.column;\n        if (!col.cid) {\n          col.cid = dashboard.id();\n        }\n\n        if (angular.isDefined(col.rows) && angular.isArray(col.rows)) {\n          // be sure to tell Angular about the injected directive and push the new row directive to the column\n          $compile(rowTemplate)($scope, function (cloned) {\n            $element.append(cloned);\n          });\n        }\n      }\n    };\n\n  }]);\n\n/*\r\n* The MIT License\r\n*\r\n* Copyright (c) 2015, Sebastian Sdorra\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in\r\n* all copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n* SOFTWARE.\r\n*/\r\n\r\n\r\n/* global angular */\r\nangular.module('adf')\r\n  .directive('adfDashboardColumn', [\"$log\", \"$compile\", \"$rootScope\", \"adfTemplatePath\", \"rowTemplate\", \"dashboard\", function ($log, $compile, $rootScope, adfTemplatePath, rowTemplate, dashboard) {\r\n    \r\n\r\n    /**\r\n     * moves a widget in between a column\r\n     */\r\n    function moveWidgetInColumn($scope, column, evt){\r\n      var widgets = column.widgets;\r\n      // move widget and apply to scope\r\n      $scope.$apply(function(){\r\n        widgets.splice(evt.newIndex, 0, widgets.splice(evt.oldIndex, 1)[0]);\r\n        $rootScope.$broadcast('adfWidgetMovedInColumn');\r\n      });\r\n    }\r\n\r\n    /**\r\n     * finds a widget by its id in the column\r\n     */\r\n    function findWidget(column, index){\r\n      var widget = null;\r\n      for (var i=0; i<column.widgets.length; i++){\r\n        var w = column.widgets[i];\r\n        if (dashboard.idEquals(w.wid,index)){\r\n          widget = w;\r\n          break;\r\n        }\r\n      }\r\n      return widget;\r\n    }\r\n\r\n    /**\r\n     * finds a column by its id in the model\r\n     */\r\n    function findColumn(model, index){\r\n      var column = null;\r\n      for (var i=0; i<model.rows.length; i++){\r\n        var r = model.rows[i];\r\n        for (var j=0; j<r.columns.length; j++){\r\n          var c = r.columns[j];\r\n          if (dashboard.idEquals(c.cid, index)){\r\n            column = c;\r\n            break;\r\n          } else if (c.rows){\r\n            column = findColumn(c, index);\r\n          }\r\n        }\r\n        if (column){\r\n          break;\r\n        }\r\n      }\r\n      return column;\r\n    }\r\n\r\n    /**\r\n     * get the adf id from an html element\r\n     */\r\n    function getId(el){\r\n      var id = el.getAttribute('adf-id');\r\n      return id ? id : '-1';\r\n    }\r\n\r\n    /**\r\n     * adds a widget to a column\r\n     */\r\n    function addWidgetToColumn($scope, model, targetColumn, evt){\r\n      // find source column\r\n      var cid = getId(evt.from);\r\n      var sourceColumn = findColumn(model, cid);\r\n\r\n      if (sourceColumn){\r\n        // find moved widget\r\n        var wid = getId(evt.item);\r\n        var widget = findWidget(sourceColumn, wid);\r\n\r\n        if (widget){\r\n          // add new item and apply to scope\r\n          $scope.$apply(function(){\r\n      \t\t\tif (!targetColumn.widgets) {\r\n      \t\t\t\ttargetColumn.widgets = [];\r\n      \t\t\t}\r\n            targetColumn.widgets.splice(evt.newIndex, 0, widget);\r\n\r\n            $rootScope.$broadcast('adfWidgetAddedToColumn');\r\n            $scope.$emit('dashboardWidgetChanged');\r\n          });\r\n        } else {\r\n          $log.warn('could not find widget with id ' + wid);\r\n        }\r\n      } else {\r\n        $log.warn('could not find column with id ' + cid);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * removes a widget from a column\r\n     */\r\n    function removeWidgetFromColumn($scope, column, evt){\r\n      // remove old item and apply to scope\r\n      $scope.$apply(function(){\r\n        column.widgets.splice(evt.oldIndex, 1);\r\n        $rootScope.$broadcast('adfWidgetRemovedFromColumn');\r\n      });\r\n    }\r\n\r\n    /**\r\n     * enable sortable\r\n     */\r\n    function applySortable($scope, $element, model, column){\r\n      // enable drag and drop\r\n      var el = $element[0];\r\n      var sortable = Sortable.create(el, {\r\n        group: 'widgets',\r\n        handle: '.adf-move',\r\n        ghostClass: 'placeholder',\r\n        animation: 150,\r\n        onAdd: function(evt){\r\n          addWidgetToColumn($scope, model, column, evt);\r\n        },\r\n        onRemove: function(evt){\r\n          removeWidgetFromColumn($scope, column, evt);\r\n        },\r\n        onUpdate: function(evt){\r\n          moveWidgetInColumn($scope, column, evt);\r\n        }\r\n      });\r\n\r\n      // destroy sortable on column destroy event\r\n      $element.on('$destroy', function () {\r\n        // check sortable element, before calling destroy\r\n        // see https://github.com/sdorra/angular-dashboard-framework/issues/118\r\n        if (sortable.el){\r\n          sortable.destroy();\r\n        }\r\n      });\r\n    }\r\n\r\n    return {\r\n      restrict: 'E',\r\n      replace: true,\r\n      scope: {\r\n        column: '=',\r\n        editMode: '=',\r\n        continuousEditMode: '=',\r\n        adfModel: '=',\r\n        options: '='\r\n      },\r\n      templateUrl: adfTemplatePath + 'dashboard-column.html',\r\n      link: function ($scope, $element) {\r\n        // set id\r\n        var col = $scope.column;\r\n        if (!col.cid){\r\n          col.cid = dashboard.id();\r\n        }\r\n\r\n        if (angular.isDefined(col.rows) && angular.isArray(col.rows)) {\r\n          // be sure to tell Angular about the injected directive and push the new row directive to the column\r\n          $compile(rowTemplate)($scope, function(cloned) {\r\n            $element.append(cloned);\r\n          });\r\n        } else {\r\n          // enable drag and drop for widget only columns\r\n          applySortable($scope, $element, $scope.adfModel, col);\r\n        }\r\n      }\r\n    };\r\n  }]);\r\n\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n/**\r\n * @ngdoc directive\r\n * @name adf.directive:adfDashboard\r\n * @element div\r\n * @restrict EA\r\n * @scope\r\n * @description\r\n *\r\n * `adfDashboard` is a directive which renders the dashboard with all its\r\n * components. The directive requires a name attribute. The name of the\r\n * dashboard can be used to store the model.\r\n *\r\n * @param {string} name name of the dashboard. This attribute is required.\r\n * @param {boolean=} editable false to disable the editmode of the dashboard.\r\n * @param {boolean=} collapsible true to make widgets collapsible on the dashboard.\r\n * @param {boolean=} maximizable true to add a button for open widgets in a large modal panel.\r\n * @param {boolean=} enableConfirmDelete true to ask before remove an widget from the dashboard.\r\n * @param {string=} structure the default structure of the dashboard.\r\n * @param {object=} adfModel model object of the dashboard.\r\n * @param {function=} adfWidgetFilter function to filter widgets on the add dialog.\r\n * @param {boolean=} continuousEditMode enable continuous edit mode, to fire add/change/remove\r\n *                   events during edit mode not reset it if edit mode is exited.\r\n */\r\n\r\nangular.module('adf')\r\n  .directive('adfDashboard', [\"$rootScope\", \"$log\", \"$timeout\", \"$uibModal\", \"dashboard\", \"adfTemplatePath\", function ($rootScope, $log, $timeout, $uibModal, dashboard, adfTemplatePath) {\r\n    \r\n\r\n    function stringToBoolean(string){\r\n      switch(angular.isDefined(string) ? string.toLowerCase() : null){\r\n        case 'true': case 'yes': case '1': return true;\r\n        case 'false': case 'no': case '0': case null: return false;\r\n        default: return Boolean(string);\r\n      }\r\n    }\r\n\r\n    function widgetFilter(widget, column){\r\n      return !widget.minSize || column.width >= widget.minSize;\r\n    }\r\n\r\n    function copyWidgets(source, target, warnings) {\r\n      if ( source.widgets && source.widgets.length > 0 ){\r\n        var w = source.widgets.shift();\r\n        if(warnings.widgetExceedsMinSize === false && !widgetFilter(w, target)){\r\n          warnings.widgetExceedsMinSize = true;\r\n        }\r\n        while (w){\r\n          target.widgets.push(w);\r\n          w = source.widgets.shift();\r\n        }\r\n      }\r\n    }\r\n\r\n    /**\r\n    * Copy widget from old columns to the new model\r\n    * @param object root the model\r\n    * @param array of columns\r\n    * @param counter\r\n    */\r\n    function fillStructure(root, columns, counter, warnings) {\r\n      counter = counter || 0;\r\n\r\n      if (angular.isDefined(root.rows)) {\r\n        angular.forEach(root.rows, function (row) {\r\n          angular.forEach(row.columns, function (column) {\r\n            // if the widgets prop doesn't exist, create a new array for it.\r\n            // this allows ui.sortable to do it's thing without error\r\n            if (!column.widgets) {\r\n              column.widgets = [];\r\n            }\r\n\r\n            // if a column exist at the counter index, copy over the column\r\n            if (angular.isDefined(columns[counter])) {\r\n              // do not add widgets to a column, which uses nested rows\r\n              if (!angular.isDefined(column.rows)){\r\n                copyWidgets(columns[counter], column, warnings);\r\n                counter++;\r\n                if(warnings && warnings.oneWidgetPerColumn === false && column.widgets.length > 1){\r\n                  warnings.oneWidgetPerColumn = true;\r\n                }\r\n              }\r\n            }\r\n\r\n            // run fillStructure again for any sub rows/columns\r\n            counter = fillStructure(column, columns, counter);\r\n          });\r\n        });\r\n      }\r\n      return counter;\r\n    }\r\n\r\n    /**\r\n    * Read Columns: recursively searches an object for the 'columns' property\r\n    * @param object model\r\n    * @param array  an array of existing columns; used when recursion happens\r\n    */\r\n    function readColumns(root, columns) {\r\n      columns = columns || [];\r\n\r\n      if (angular.isDefined(root.rows)) {\r\n        angular.forEach(root.rows, function (row) {\r\n          angular.forEach(row.columns, function (col) {\r\n            columns.push(col);\r\n            // keep reading columns until we can't any more\r\n            readColumns(col, columns);\r\n          });\r\n        });\r\n      }\r\n\r\n      return columns;\r\n    }\r\n\r\n    function changeStructure(model, structure, scope){\r\n      var columns = readColumns(model);\r\n      var counter = 0;\r\n      var warningMessages = [];\r\n      var warnings = {\r\n        widgetExceedsMinSize: false,\r\n        oneWidgetPerColumn: false\r\n      };\r\n\r\n      model.rows = angular.copy(structure.rows);\r\n\r\n      while ( counter < columns.length ){\r\n        counter = fillStructure(model, columns, counter, warnings);\r\n      }\r\n\r\n      if(warnings.widgetExceedsMinSize) {\r\n        warningMessages.push('At least one placeholder was too small for a widget!');\r\n      }\r\n      if(scope.singleWidgetMode && warnings.oneWidgetPerColumn) {\r\n        warningMessages.push('Multiple widgets were copied to a single placeholder!');\r\n      }\r\n      if(warningMessages.length) {\r\n        scope.$emit('changeStructureWarning', warningMessages);\r\n      }\r\n    }\r\n\r\n    function createConfiguration(type){\r\n      var cfg = {};\r\n      var config = dashboard.widgets[type].config;\r\n      if (config){\r\n        cfg = angular.copy(config);\r\n      }\r\n      return cfg;\r\n    }\r\n\r\n    /**\r\n     * Find first widget column in model.\r\n     *\r\n     * @param dashboard model\r\n     */\r\n    function findFirstWidgetColumn(model){\r\n      var column = null;\r\n      if (!angular.isArray(model.rows)){\r\n        $log.error('model does not have any rows');\r\n        return null;\r\n      }\r\n      for (var i=0; i<model.rows.length; i++){\r\n        var row = model.rows[i];\r\n        if (angular.isArray(row.columns)){\r\n          for (var j=0; j<row.columns.length; j++){\r\n            var col = row.columns[j];\r\n            if (!col.rows){\r\n              column = col;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n        if (column){\r\n          break;\r\n        }\r\n      }\r\n      return column;\r\n    }\r\n\r\n    /**\r\n     * Adds the widget to first column of the model.\r\n     *\r\n     * @param dashboard model\r\n     * @param widget to add to model\r\n     * @param name name of the dashboard\r\n     */\r\n    function addNewWidgetToModel(model, widget, name, column){\r\n      if (model){\r\n        if(!column) {\r\n          column = findFirstWidgetColumn(model);\r\n        }\r\n        if (column){\r\n          if (!column.widgets){\r\n            column.widgets = [];\r\n          }\r\n          column.widgets.unshift(widget);\r\n\r\n          // broadcast added event\r\n          $rootScope.$broadcast('adfWidgetAdded', name, model, widget);\r\n        } else {\r\n          $log.error('could not find first widget column');\r\n        }\r\n      } else {\r\n        $log.error('model is undefined');\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Checks if the edit mode of the widget should be opened immediately.\r\n     *\r\n     * @param widget type\r\n     */\r\n    function isEditModeImmediate(type){\r\n      var widget = dashboard.widgets[type];\r\n      return widget && widget.edit && widget.edit.immediate;\r\n    }\r\n\r\n    /**\r\n     * Opens the edit mode of the specified widget.\r\n     *\r\n     * @param dashboard scope\r\n     * @param widget\r\n     */\r\n    function openEditMode($scope, widget){\r\n      // wait some time before fire enter edit mode event\r\n      $timeout(function(){\r\n        $scope.$broadcast('adfWidgetEnterEditMode', widget);\r\n      }, 200);\r\n    }\r\n\r\n    /**\r\n     * finds a widget by its id in the column\r\n     */\r\n    function findWidget(column, index){\r\n      var widget = null;\r\n      for (var i=0; i<column.widgets.length; i++){\r\n        var w = column.widgets[i];\r\n        if (dashboard.idEquals(w.wid,index)){\r\n          widget = w;\r\n          break;\r\n        }\r\n      }\r\n      return widget;\r\n    }\r\n\r\n    /**\r\n     * finds a column by its id in the model\r\n     */\r\n    function findColumn(model, index){\r\n      var column = null;\r\n      for (var i=0; i<model.rows.length; i++){\r\n        var r = model.rows[i];\r\n        for (var j=0; j<r.columns.length; j++){\r\n          var c = r.columns[j];\r\n          if (dashboard.idEquals(c.cid, index)){\r\n            column = c;\r\n            break;\r\n          } else if (c.rows){\r\n            column = findColumn(c, index);\r\n          }\r\n        }\r\n        if (column){\r\n          break;\r\n        }\r\n      }\r\n      return column;\r\n    }\r\n\r\n    /**\r\n     * Finds widget by id and changes its config\r\n     */\r\n    function changeConfigForWidgetById($scope, wid, config){\r\n      var model = $scope.model,\r\n        rows;\r\n\r\n      rows = model.rows;\r\n\r\n      if(rows){\r\n        angular.forEach(rows, function(row){\r\n          var columns = row.columns;\r\n\r\n          if(columns){\r\n\r\n            angular.forEach(columns, function(column){\r\n              var widgets = column.widgets;\r\n\r\n              if(widgets){\r\n                angular.forEach(widgets, function (widget, key) {\r\n\r\n                  if( widget.wid === wid ){\r\n                    widget.config = config;\r\n                  }\r\n                });\r\n              }\r\n            });\r\n          }\r\n        });\r\n      }\r\n    }\r\n\r\n    function setExternalApiFunctions(scope) {\r\n      var api = {};\r\n\r\n      api.saveDashboard = function() {\r\n        return scope.saveDashboard();\r\n      };\r\n\r\n      api.manageEditMode = function() {\r\n        return scope.manageEditMode();\r\n      };\r\n\r\n      api.editDashboardDialog = function() {\r\n        return scope.editDashboardDialog();\r\n      };\r\n\r\n      api.cancelEditMode = function() {\r\n        return scope.cancelEditMode();\r\n      };\r\n\r\n      api.changeDashStructure = function(name, structure) {\r\n        scope.changeStructure(name, structure, scope);\r\n      };\r\n\r\n      api.triggerDashboardChanged = function() {\r\n        scope.triggerDashboardChanged();\r\n      };\r\n\r\n      api.addNewWidget = function(config, type, name) {\r\n        var defConfig = createConfiguration(type);\r\n\r\n        var widgetName = name ? name : '',\r\n          model = scope.model,\r\n          widget = {\r\n          type: type,\r\n          config: angular.extend({}, defConfig, config),\r\n          wid: dashboard.id(),\r\n          title: widgetName\r\n        };\r\n\r\n        addNewWidgetToModel(model, widget, widgetName);\r\n\r\n        scope.triggerDashboardChanged();\r\n      };\r\n\r\n      api.changeWidgetConfig = function(wid, config) {\r\n        changeConfigForWidgetById(scope, wid, config);\r\n\r\n        scope.$broadcast('adfWidgetConfigChanged', wid);\r\n\r\n        scope.triggerDashboardChanged();\r\n      };\r\n\r\n      scope.externalApi = api;\r\n    }\r\n\r\n    return {\r\n      replace: true,\r\n      restrict: 'EA',\r\n      transclude : false,\r\n      scope: {\r\n        structure: '@',\r\n        name: '@',\r\n        collapsible: '@',\r\n        editable: '@',\r\n        editMode: '@',\r\n        continuousEditMode: '=',\r\n        maximizable: '@',\r\n        adfModel: '=',\r\n        adfWidgetFilter: '=',\r\n        singleWidgetMode: '@',\r\n        externalApi: '='\r\n      },\r\n      controller: [\"$scope\", function($scope){\r\n        var model = {};\r\n        var structure = {};\r\n        var widgetFilter = null;\r\n        var structureName = {};\r\n        var name = $scope.name;\r\n\r\n        // Watching for changes on adfModel\r\n        $scope.$watch('adfModel', function(oldVal, newVal) {\r\n          // has model changed or is the model attribute not set\r\n          if (newVal !== null || (oldVal === null && newVal === null)) {\r\n            model = $scope.adfModel;\r\n            widgetFilter = $scope.adfWidgetFilter;\r\n            if ( ! model || ! model.rows ){\r\n              structureName = $scope.structure;\r\n              structure = dashboard.structures[structureName];\r\n              if (structure){\r\n                if (model){\r\n                  model.rows = angular.copy(structure).rows;\r\n                } else {\r\n                  model = angular.copy(structure);\r\n                }\r\n                model.structure = structureName;\r\n              } else {\r\n                $log.error( 'could not find structure ' + structureName);\r\n              }\r\n            }\r\n\r\n            if (model) {\r\n              if (!model.title){\r\n                model.title = 'Dashboard';\r\n              }\r\n              if (!model.titleTemplateUrl) {\r\n                model.titleTemplateUrl = adfTemplatePath + 'dashboard-title-custom.html';\r\n              }\r\n              $scope.model = model;\r\n            } else {\r\n              $log.error('could not find or create model');\r\n            }\r\n          }\r\n        }, true);\r\n\r\n        // edit mode\r\n        $scope.editMode = false;\r\n        $scope.editClass = '';\r\n\r\n        $scope.toggleEditMode = function(){\r\n          $scope.editMode = ! $scope.editMode;\r\n          if ($scope.editMode){\r\n            if (!$scope.continuousEditMode) {\r\n              $scope.modelCopy = angular.copy($scope.adfModel, {});\r\n              $rootScope.$broadcast('adfIsEditMode');\r\n            }\r\n          }\r\n\r\n          if (!$scope.editMode){\r\n             $scope.triggerDashboardChanged();\r\n          }\r\n        };\r\n\r\n        $scope.$on('adfToggleEditMode', function() {\r\n            $scope.toggleEditMode();\r\n        });\r\n\r\n        $scope.collapseAll = function(collapseExpandStatus){\r\n          $rootScope.$broadcast('adfDashboardCollapseExpand',{collapseExpandStatus : collapseExpandStatus});\r\n        };\r\n\r\n        $scope.cancelEditMode = function(){\r\n          $scope.editMode = false;\r\n          if (!$scope.continuousEditMode) {\r\n            $scope.modelCopy = angular.copy($scope.modelCopy, $scope.adfModel);\r\n          }\r\n          $rootScope.$broadcast('adfDashboardEditsCancelled');\r\n        };\r\n\r\n        // edit dashboard settings\r\n        $scope.editDashboardDialog = function(){\r\n          var editDashboardScope = $scope.$new();\r\n          // create a copy of the title, to avoid changing the title to\r\n          // \"dashboard\" if the field is empty\r\n          editDashboardScope.copy = {\r\n            title: model.title\r\n          };\r\n          editDashboardScope.structures = dashboard.structures;\r\n\r\n          var adfEditTemplatePath = adfTemplatePath + 'dashboard-edit.html';\r\n          if(model.editTemplateUrl) {\r\n            adfEditTemplatePath = model.editTemplateUrl;\r\n          }\r\n          var instance = $uibModal.open({\r\n            scope: editDashboardScope,\r\n            templateUrl: adfEditTemplatePath,\r\n            backdrop: 'static'\r\n          });\r\n          editDashboardScope.changeStructure = function(name, structure){\r\n            $log.info('change structure to ' + name);\r\n            changeStructure(model, structure, $scope);\r\n          };\r\n          editDashboardScope.closeDialog = function(){\r\n            // copy the new title back to the model\r\n            model.title = editDashboardScope.copy.title;\r\n            // close modal and destroy the scope\r\n            instance.close();\r\n            editDashboardScope.$destroy();\r\n          };\r\n        };\r\n\r\n        // add widget dialog\r\n        $scope.addWidgetDialog = function(column){\r\n          var addScope = $scope.$new();\r\n          var model = $scope.model;\r\n          var widgets;\r\n          if (angular.isFunction(widgetFilter)){\r\n            widgets = {};\r\n            angular.forEach(dashboard.widgets, function(widget, type){\r\n              if (widgetFilter(widget, type, model, column)){\r\n                widgets[type] = widget;\r\n              }\r\n            });\r\n          } else {\r\n            widgets = dashboard.widgets;\r\n          }\r\n          addScope.widgets = widgets;\r\n          addScope.noWidgetsAvailable = angular.equals({}, widgets);\r\n\r\n          var adfAddTemplatePath = adfTemplatePath + 'widget-add.html';\r\n          if(model.addTemplateUrl) {\r\n            adfAddTemplatePath = model.addTemplateUrl;\r\n          }\r\n\r\n          var opts = {\r\n            scope: addScope,\r\n            templateUrl: adfAddTemplatePath,\r\n            backdrop: 'static'\r\n          };\r\n\r\n          var instance = $uibModal.open(opts);\r\n          addScope.addWidget = function(widget){\r\n            var w = {\r\n              type: widget,\r\n              config: createConfiguration(widget),\r\n              wid: dashboard.id()\r\n            };\r\n            addNewWidgetToModel(model, w, name, column);\r\n            // close and destroy\r\n            instance.close();\r\n            addScope.$destroy();\r\n\r\n            // check for open edit mode immediately\r\n            if (isEditModeImmediate(widget)){\r\n              openEditMode($scope, w);\r\n            }\r\n\r\n            $scope.triggerDashboardChanged();\r\n          };\r\n          addScope.closeDialog = function(){\r\n            // close and destroy\r\n            instance.close();\r\n            addScope.$destroy();\r\n          };\r\n        };\r\n\r\n        $scope.manageEditMode = function () {\r\n          $scope.editMode = !$scope.editMode;\r\n          if ($scope.editMode){\r\n            $scope.modelCopy = angular.copy($scope.adfModel, {});\r\n          }\r\n          return $scope.editMode;\r\n        };\r\n\r\n        $scope.saveDashboard = function() {\r\n          $scope.editMode = false;\r\n          $scope.triggerDashboardChanged();\r\n          return false;\r\n        };\r\n\r\n        $scope.changeStructure = function(name, structure) {\r\n          changeStructure(model, structure, $scope);\r\n        };\r\n\r\n        $scope.triggerDashboardChanged = function() {\r\n          $rootScope.$broadcast('adfDashboardChanged', name, model);\r\n        };\r\n\r\n        $scope.addNewWidgetToModel = addNewWidgetToModel;\r\n\r\n        $scope.$on('addWidgetDialog', function(event, column) {\r\n          $scope.addWidgetDialog(column);\r\n        });\r\n\r\n        $scope.$on('dashboardWidgetChanged', function() {\r\n          // the event should only be caught by dashboard directive, that's why it is not propagated further up the chain\r\n          event.stopPropagation();\r\n\r\n          $scope.triggerDashboardChanged();\r\n        });\r\n\r\n        $scope.$on('dashboardWidgetConfigUpdated', function(event, config, wid, cid) {\r\n          // the event should only be caught by dashboard directive, that's why it is not propagated further up the chain\r\n          event.stopPropagation();\r\n\r\n          // we need to overwrite config object before saving to database, otherwise it is set after saving so the changed data is lost\r\n          if(cid) {\r\n            var col = findColumn(model, cid);\r\n            if(wid && col) {\r\n              var widget = findWidget(col, wid);\r\n              if(widget) {\r\n                widget.config = config;\r\n                $scope.triggerDashboardChanged();\r\n              }\r\n            }\r\n          }\r\n        });\r\n\r\n        setExternalApiFunctions($scope);\r\n      }],\r\n      link: function ($scope, $element, $attr) {\r\n        // pass options to scope\r\n        var options = {\r\n          name: $attr.name,\r\n          editable: true,\r\n          enableConfirmDelete: stringToBoolean($attr.enableconfirmdelete),\r\n          maximizable: stringToBoolean($attr.maximizable),\r\n          collapsible: stringToBoolean($attr.collapsible),\r\n          singleWidgetMode: stringToBoolean($attr.singleWidgetMode)\r\n        };\r\n        if (angular.isDefined($attr.editable)){\r\n          options.editable = stringToBoolean($attr.editable);\r\n        }\r\n        $scope.options = options;\r\n      },\r\n      templateUrl: adfTemplatePath + 'dashboard.html'\r\n    };\r\n  }]);\r\n\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n\r\n/**\r\n * @ngdoc object\r\n * @name adf.dashboardProvider\r\n * @description\r\n *\r\n * The dashboardProvider can be used to register structures and widgets.\r\n */\r\nangular.module('adf.provider', [])\r\n  .provider('dashboard', function(){\r\n\r\n    var widgets = {};\r\n    var widgetsPath = '';\r\n    var structures = {};\r\n    var messageTemplate = '<div class=\"alert alert-danger\">{}</div>';\r\n    var loadingTemplate = '\\\r\n      <div class=\"progress progress-striped active\">\\n\\\r\n        <div class=\"progress-bar\" role=\"progressbar\" style=\"width: 100%\">\\n\\\r\n          <span class=\"sr-only\">loading ...</span>\\n\\\r\n        </div>\\n\\\r\n      </div>';\r\n\r\n    // default apply function of widget.edit.apply\r\n    var defaultApplyFunction = function(){\r\n      return true;\r\n    };\r\n\r\n   /**\r\n    * @ngdoc method\r\n    * @name adf.dashboardProvider#widget\r\n    * @methodOf adf.dashboardProvider\r\n    * @description\r\n    *\r\n    * Registers a new widget.\r\n    *\r\n    * @param {string} name of the widget\r\n    * @param {object} widget to be registered.\r\n    *\r\n    *   Object properties:\r\n    *\r\n    *   - `title` - `{string=}` - The title of the widget.\r\n    *   - `description` - `{string=}` - Description of the widget.\r\n    *   - `collapsed` - `{boolean=}` - true if the widget should be in collapsed state. Default is false.\r\n    *   - `config` - `{object}` - Predefined widget configuration.\r\n    *   - `controller` - `{string=|function()=}` - Controller fn that should be\r\n    *      associated with newly created scope of the widget or the name of a\r\n    *      {@link http://docs.angularjs.org/api/angular.Module#controller registered controller}\r\n    *      if passed as a string.\r\n    *   - `controllerAs` - `{string=}` - A controller alias name. If present the controller will be\r\n    *      published to scope under the `controllerAs` name.\r\n    *   - `frameless` - `{boolean=}` - false if the widget should be shown in frameless mode. The default is false.\r\n    *   - `styleClass` - `{object}` - space delimited string or map of classes bound to the widget.\r\n    *   - `template` - `{string=|function()=}` - html template as a string.\r\n    *   - `templateUrl` - `{string=}` - path to an html template.\r\n    *   - `reload` - `{boolean=}` - true if the widget could be reloaded. The default is false.\r\n    *   - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\r\n    *      be injected into the controller. If any of these dependencies are promises, the widget\r\n    *      will wait for them all to be resolved or one to be rejected before the controller is\r\n    *      instantiated.\r\n    *      If all the promises are resolved successfully, the values of the resolved promises are\r\n    *      injected.\r\n    *\r\n    *      The map object is:\r\n    *      - `key` – `{string}`: a name of a dependency to be injected into the controller.\r\n    *      - `factory` - `{string|function}`: If `string` then it is an alias for a service.\r\n    *        Otherwise if function, then it is {@link http://docs.angularjs.org/api/AUTO.$injector#invoke injected}\r\n    *        and the return value is treated as the dependency. If the result is a promise, it is\r\n    *        resolved before its value is injected into the controller.\r\n    *   - `edit` - `{object}` - Edit modus of the widget.\r\n    *      - `controller` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\r\n    *      - `controllerAs` - `{string=}` - Same as above, but for the edit mode of the widget.\r\n    *      - `template` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\r\n    *      - `templateUrl` - `{string=}` - Same as above, but for the edit mode of the widget.\r\n    *      - `resolve` - `{Object.<string, function>=}` - Same as above, but for the edit mode of the widget.\r\n    *      - `reload` - {boolean} - true if the widget should be reloaded, after the edit mode is closed.\r\n    *        Default is true.\r\n    *      - `immediate` - {boolean} - The widget enters the edit mode immediately after creation. Default is false.\r\n    *      - `apply` - `{function()=}` - The apply function is called, before the widget is saved.\r\n    *        The function have to return a boolean or an promise which can be resolved to a boolean.\r\n    *        The function can use injection.\r\n    *\r\n    * @returns {Object} self\r\n    */\r\n    this.widget = function(name, widget){\r\n      var w = angular.extend({reload: false, frameless: false}, widget);\r\n      if ( w.edit ){\r\n        var edit = {\r\n          reload: true,\r\n          immediate: false,\r\n          apply: defaultApplyFunction\r\n        };\r\n        angular.extend(edit, w.edit);\r\n        w.edit = edit;\r\n      }\r\n      widgets[name] = w;\r\n      return this;\r\n    };\r\n\r\n    /**\r\n     * @ngdoc method\r\n     * @name adf.dashboardProvider#widgetsPath\r\n     * @methodOf adf.dashboardProvider\r\n     * @description\r\n     *\r\n     * Sets the path to the directory which contains the widgets. The widgets\r\n     * path is used for widgets with a templateUrl which contains the\r\n     * placeholder {widgetsPath}. The placeholder is replaced with the\r\n     * configured value, before the template is loaded, but the template is\r\n     * cached with the unmodified templateUrl (e.g.: {widgetPath}/src/widgets).\r\n     * The default value of widgetPaths is ''.\r\n     *\r\n     *\r\n     * @param {string} path to the directory which contains the widgets\r\n     *\r\n     * @returns {Object} self\r\n     */\r\n    this.widgetsPath = function(path){\r\n      widgetsPath = path;\r\n      return this;\r\n    };\r\n\r\n   /**\r\n    * @ngdoc method\r\n    * @name adf.dashboardProvider#structure\r\n    * @methodOf adf.dashboardProvider\r\n    * @description\r\n    *\r\n    * Registers a new structure.\r\n    *\r\n    * @param {string} name of the structure\r\n    * @param {object} structure to be registered.\r\n    *\r\n    *   Object properties:\r\n    *\r\n    *   - `rows` - `{Array.<Object>}` - Rows of the dashboard structure.\r\n    *     - `styleClass` - `{string}` - CSS Class of the row.\r\n    *     - `columns` - `{Array.<Object>}` - Columns of the row.\r\n    *       - `styleClass` - `{string}` - CSS Class of the column.\r\n    *\r\n    * @returns {Object} self\r\n    */\r\n    this.structure = function(name, structure){\r\n      structures[name] = structure;\r\n      return this;\r\n    };\r\n\r\n   /**\r\n    * @ngdoc method\r\n    * @name adf.dashboardProvider#messageTemplate\r\n    * @methodOf adf.dashboardProvider\r\n    * @description\r\n    *\r\n    * Changes the template for messages.\r\n    *\r\n    * @param {string} template for messages.\r\n    *\r\n    * @returns {Object} self\r\n    */\r\n    this.messageTemplate = function(template){\r\n      messageTemplate = template;\r\n      return this;\r\n    };\r\n\r\n   /**\r\n    * @ngdoc method\r\n    * @name adf.dashboardProvider#loadingTemplate\r\n    * @methodOf adf.dashboardProvider\r\n    * @description\r\n    *\r\n    * Changes the template which is displayed as\r\n    * long as the widget resources are not resolved.\r\n    *\r\n    * @param {string} template loading template\r\n    *\r\n    * @returns {Object} self\r\n    */\r\n    this.loadingTemplate = function(template){\r\n      loadingTemplate = template;\r\n      return this;\r\n    };\r\n\r\n   /**\r\n    * @ngdoc service\r\n    * @name adf.dashboard\r\n    * @description\r\n    *\r\n    * The dashboard holds all options, structures and widgets.\r\n    *\r\n    * @property {Array.<Object>} widgets Array of registered widgets.\r\n    * @property {string} widgetsPath Default path for widgets.\r\n    * @property {Array.<Object>} structures Array of registered structures.\r\n    * @property {string} messageTemplate Template for messages.\r\n    * @property {string} loadingTemplate Template for widget loading.\r\n    *\r\n    * @returns {Object} self\r\n    */\r\n    this.$get = function(){\r\n      var cid = 0;\r\n\r\n      return {\r\n        widgets: widgets,\r\n        widgetsPath: widgetsPath,\r\n        structures: structures,\r\n        messageTemplate: messageTemplate,\r\n        loadingTemplate: loadingTemplate,\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboard#id\r\n         * @methodOf adf.dashboard\r\n         * @description\r\n         *\r\n         * Creates an ongoing numeric id. The method is used to create ids for\r\n         * columns and widgets in the dashboard.\r\n         */\r\n        id: function(){\r\n          return new Date().getTime() + '-' + (++cid);\r\n        },\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboard#idEqual\r\n         * @methodOf adf.dashboard\r\n         * @description\r\n         *\r\n         * Checks if the given ids are equal.\r\n         *\r\n         * @param {string} id widget or column id\r\n         * @param {string} other widget or column id\r\n         */\r\n         idEquals: function(id, other){\r\n           // use toString, because old ids are numbers\r\n           return ((id) && (other)) && (id.toString() === other.toString());\r\n         }\r\n      };\r\n    };\r\n\r\n  });\r\n\n/*\r\n* The MIT License\r\n*\r\n* Copyright (c) 2015, Sebastian Sdorra\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in\r\n* all copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n* SOFTWARE.\r\n*/\r\n\r\n\r\n/* global angular */\r\nangular.module('adf')\r\n  .directive('adfDashboardRow', [\"$compile\", \"adfTemplatePath\", \"columnTemplate\", function ($compile, adfTemplatePath, columnTemplate) {\r\n    \r\n\r\n    return {\r\n      restrict: 'E',\r\n      replace: true,\r\n      scope: {\r\n        row: '=',\r\n        adfModel: '=',\r\n        editMode: '=',\r\n        continuousEditMode: '=',\r\n        options: '='\r\n      },\r\n      templateUrl: adfTemplatePath + 'dashboard-row.html',\r\n      link: function($scope, $element) {\r\n        if (angular.isDefined($scope.row.columns) && angular.isArray($scope.row.columns)) {\r\n          $compile(columnTemplate)($scope, function(cloned) {\r\n            $element.append(cloned);\r\n          });\r\n        }\r\n      }\r\n    };\r\n  }]);\r\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\nangular.module('adf')\n  .directive('adfWidgetContent', [\"$log\", \"$q\", \"$sce\", \"$http\", \"$templateCache\", \"$compile\", \"$controller\", \"$injector\", \"dashboard\", function($log, $q, $sce, $http, $templateCache,\n          $compile, $controller, $injector, dashboard) {\n\n    function parseUrl(url) {\n      var parsedUrl = url;\n      if (url.indexOf('{widgetsPath}') >= 0) {\n        parsedUrl = url.replace('{widgetsPath}', dashboard.widgetsPath)\n                .replace('//', '/');\n        if (parsedUrl.indexOf('/') === 0) {\n          parsedUrl = parsedUrl.substring(1);\n        }\n      }\n      return parsedUrl;\n    }\n\n    function getTemplate(widget) {\n      var deferred = $q.defer();\n\n      if (widget.template) {\n        deferred.resolve(widget.template);\n      } else if (widget.templateUrl) {\n        // try to fetch template from cache\n        var tpl = $templateCache.get(widget.templateUrl);\n        if (tpl) {\n          deferred.resolve(tpl);\n        } else {\n          var url = $sce.getTrustedResourceUrl(parseUrl(widget.templateUrl));\n          $http.get(url)\n               .success(function(response) {\n                 // put response to cache, with unmodified url as key\n                 $templateCache.put(widget.templateUrl, response);\n                 deferred.resolve(response);\n               })\n               .error(function() {\n                 deferred.reject('could not load template');\n               });\n        }\n      }\n\n      return deferred.promise;\n    }\n\n    function compileWidget($scope, $element, currentScope) {\n      var model = $scope.model;\n      var content = $scope.content;\n\n      // display loading template\n      $element.html(dashboard.loadingTemplate);\n\n      // create new scope\n      var templateScope = $scope.$new();\n\n      // pass config object to scope\n      if (!model.config) {\n        model.config = {};\n      }\n\n      templateScope.config = model.config;\n\n      // local injections\n      var base = {\n        $scope: templateScope,\n        widget: model,\n        config: model.config,\n        widgetSharedData: $scope.widgetSharedData || {},\n        dashId: $scope.dashId\n      };\n\n      // get resolve promises from content object\n      var resolvers = {};\n      resolvers.$tpl = getTemplate(content);\n      if (content.resolve) {\n        angular.forEach(content.resolve, function(promise, key) {\n          if (angular.isString(promise)) {\n            resolvers[key] = $injector.get(promise);\n          } else {\n            resolvers[key] = $injector.invoke(promise, promise, base);\n          }\n        });\n      }\n\n      // resolve all resolvers\n      $q.all(resolvers).then(function(locals) {\n        angular.extend(locals, base);\n\n        // compile & render template\n        var template = locals.$tpl;\n        $element.html(template);\n        if (content.controller) {\n          var templateCtrl = $controller(content.controller, locals);\n          if (content.controllerAs) {\n            templateScope[content.controllerAs] = templateCtrl;\n          }\n          $element.children().data('$ngControllerController', templateCtrl);\n        }\n        $compile($element.contents())(templateScope);\n      }, function(reason) {\n        // handle promise rejection\n        var msg = 'Could not resolve all promises';\n        if (reason) {\n          msg += ': ' + reason;\n        }\n        $log.warn(msg);\n        $element.html(dashboard.messageTemplate.replace(/{}/g, msg));\n      });\n\n      // destroy old scope\n      if (currentScope) {\n        currentScope.$destroy();\n      }\n\n      return templateScope;\n    }\n\n    return {\n      replace: true,\n      restrict: 'EA',\n      transclude: false,\n      scope: {\n        model: '=',\n        content: '=',\n        widgetSharedData: '=',\n        dashId: '='\n      },\n      link: function($scope, $element) {\n        var currentScope = compileWidget($scope, $element, null);\n        $scope.$on('widgetConfigChanged', function() {\n          currentScope = compileWidget($scope, $element, currentScope);\n        });\n        $scope.$on('widgetReload', function() {\n          currentScope = compileWidget($scope, $element, currentScope);\n        });\n        $scope.onEditConfig = function(){\n          $scope.$emit('adfEditWidgetConfig', $scope.model.config, $scope.model.wid);\n        };\n        $scope.onUpdateConfig = function(config){\n          $scope.model.config = config;\n          $scope.$emit('widgetConfigUpdated');\n        };\n      }\n    };\n\n  }]);\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\nangular.module('adf')\n  .directive('adfWidget', [\"_\", \"$injector\", \"$q\", \"$log\", \"$uibModal\", \"$rootScope\", \"dashboard\", \"adfTemplatePath\", function(_, $injector, $q, $log, $uibModal, $rootScope, dashboard, adfTemplatePath) {\n\n    function preLink($scope) {\n      var definition = $scope.definition;\n      if (definition) {\n        var w = dashboard.widgets[definition.type];\n        if (w) {\n          // pass title\n          if (!definition.title) {\n            definition.title = w.title;\n          }\n\n          definition.minSize = w.minSize;\n\n          //if (!definition.titleTemplateUrl) {\n          //  definition.titleTemplateUrl = adfTemplatePath + 'widget-title.html';\n          //  if (w.titleTemplateUrl) {\n          //    definition.titleTemplateUrl = w.titleTemplateUrl;\n          //  }\n          //}\n\n          //if (!definition.titleTemplateUrl) {\n          //  definition.frameless = w.frameless;\n          //}\n\n          if (!definition.styleClass) {\n            definition.styleClass = w.styleClass;\n          }\n\n          // set id for sortable\n          if (!definition.wid) {\n            definition.wid = dashboard.id();\n          }\n\n          // pass copy of widget to scope\n          $scope.widget = angular.copy(w);\n\n          $scope.widget.titleTemplateUrl = adfTemplatePath + 'widget-title-custom.html';\n          if (w.titleTemplateUrl) {\n            $scope.widget.titleTemplateUrl = w.titleTemplateUrl;\n          }\n\n          // merge default config object with definition from database\n          for (var configIdx in w.config) {\n            if(!definition.config) {\n              definition.config = {};\n            }\n            if(!definition.config[configIdx]) {\n              definition.config[configIdx] = w.config[configIdx];\n            }\n          }\n\n          //// create config object\n          //var config = definition.config;\n          //if (config) {\n          //  if (angular.isString(config)) {\n          //    config = angular.fromJson(config);\n          //  }\n          //} else {\n          //  config = {};\n          //}\n\n          // pass config to scope\n          $scope.config = definition.config;\n          $scope.widgetSharedData = w.widgetSharedData ? angular.copy(w.widgetSharedData) : {};\n\n          $scope.widgetSharedData.editMode = $scope.editMode;\n          $scope.$watch('editMode', function(editMode){\n            $scope.widgetSharedData.editMode = editMode;\n          });\n\n          // collapse exposed $scope.widgetState property\n          if (!$scope.widgetState) {\n            $scope.widgetState = {};\n            $scope.widgetState.isCollapsed= (w.collapsed === true) ? w.collapsed : false;\n            $scope.widgetState.configBeingEdited = false;\n          }\n\n          $scope.widgetState.isValidWidth = !w.minSize || $scope.col.width >= w.minSize;\n\n        } else {\n          $log.warn('could not find widget ' + definition.type);\n        }\n      } else {\n        $log.debug('definition not specified, widget was probably removed');\n      }\n    }\n\n    function postLink($scope, $element) {\n      var definition = $scope.definition;\n      if (definition) {\n        // bind close function\n\n        var deleteWidget = function() {\n          var column = $scope.col;\n          if (column) {\n            //var index = column.widgets.indexOf(definition);\n            var index = _.findIndex(column.widgets, function(w) { return w.wid === definition.wid; });\n            if (index >= 0) {\n              column.widgets.splice(index, 1);\n            }\n          }\n          $element.remove();\n          $rootScope.$broadcast('adfWidgetRemovedFromColumn');\n          $scope.$emit('dashboardWidgetChanged');\n        };\n\n        $scope.remove = function() {\n          if ($scope.options.enableConfirmDelete) {\n            var deleteScope = $scope.$new();\n            var deleteTemplateUrl = adfTemplatePath + 'widget-delete.html';\n            if (definition.deleteTemplateUrl) {\n              deleteTemplateUrl = definition.deleteTemplateUrl;\n            }\n            var opts = {\n              scope: deleteScope,\n              templateUrl: deleteTemplateUrl,\n              backdrop: 'static'\n            };\n            var instance = $uibModal.open(opts);\n\n            deleteScope.closeDialog = function() {\n              instance.close();\n              deleteScope.$destroy();\n            };\n            deleteScope.deleteDialog = function() {\n              deleteWidget();\n              deleteScope.closeDialog();\n            };\n          } else {\n            deleteWidget();\n          }\n        };\n\n        // bind reload function\n        $scope.reload = function() {\n          $scope.$broadcast('widgetReload');\n        };\n\n        // bind edit function\n        $scope.edit = function() {\n          var editScope = $scope.$new();\n          editScope.definition = angular.copy(definition);\n\n          var adfEditTemplatePath = adfTemplatePath + 'widget-edit.html';\n          if (definition.editTemplateUrl) {\n            adfEditTemplatePath = definition.editTemplateUrl;\n          }\n\n          var opts = {\n            scope: editScope,\n            templateUrl: adfEditTemplatePath,\n            backdrop: 'static'\n          };\n\n          var instance = $uibModal.open(opts);\n\n          editScope.closeDialog = function() {\n            instance.close();\n            editScope.$destroy();\n          };\n\n          // TODO create util method\n          function createApplyPromise(result){\n            var promise;\n            if (typeof result === 'boolean'){\n              var deferred = $q.defer();\n              if (result){\n                deferred.resolve();\n              } else {\n                deferred.reject();\n              }\n              promise = deferred.promise;\n            } else {\n              promise = $q.when(result);\n            }\n            return promise;\n          }\n\n          editScope.saveDialog = function() {\n            // clear validation error\n            editScope.validationError = null;\n\n            // build injection locals\n            var widget = $scope.widget;\n            var applyFn = widget.edit.apply;\n            var locals = {\n              widget: widget,\n              definition: editScope.definition,\n              config: editScope.definition.config\n            };\n\n            // invoke apply function and apply if success\n            var result = $injector.invoke(applyFn, applyFn, locals);\n            createApplyPromise(result).then(function(){\n              definition.title = editScope.definition.title;\n              angular.extend(definition.config, editScope.definition.config);\n              if (widget.edit && widget.edit.reload) {\n                // reload content after edit dialog is closed\n                $scope.$broadcast('widgetConfigChanged');\n              }\n              editScope.closeDialog();\n            }, function(err){\n              if (err){\n                editScope.validationError = err;\n              } else {\n                editScope.validationError = 'Validation durring apply failed';\n              }\n            });\n          };\n\n        };\n      } else {\n        $log.debug('widget not found');\n      }\n    }\n\n    return {\n      replace: true,\n      restrict: 'EA',\n      transclude: false,\n      templateUrl: adfTemplatePath + 'widget.html',\n      scope: {\n        definition: '=',\n        col: '=column',\n        editMode: '=',\n        options: '=',\n        widgetState: '=',\n        columnState: '=',\n        dashId: '='\n      },\n      controller: [\"$scope\", function($scope) {\n\n        $scope.$on('adfDashboardCollapseExpand', function(event, args) {\n          $scope.widgetState.isCollapsed = args.collapseExpandStatus;\n        });\n\n        $scope.$on('adfWidgetEnterEditMode', function(event, widget){\n          if (dashboard.idEquals($scope.definition.wid, widget.wid)){\n            $scope.edit();\n          }\n        });\n\n        $scope.$on('widgetConfigUpdated', function() {\n          $scope.$emit('dashboardWidgetConfigUpdated', $scope.config, $scope.definition.wid, $scope.col.cid);\n        });\n\n        $scope.$on('adfWidgetConfigChanged', function(event, id){\n          var definition = $scope.definition;\n\n          if(definition.wid === id){\n            $scope.reload();\n          }\n        });\n\n        $scope.$on('adfEditWidgetConfigStarted', function(event, id){\n          var definition = $scope.definition;\n\n          $scope.widgetState.configBeingEdited = definition.wid === id;\n        });\n\n        $scope.$watch('widgetState.showFilters', function(showFilters){\n          // override definition.config when toggling filters content, to prevent loosing reference to the latest saved $scope.config object\n          if(showFilters) {\n            $scope.definition.config = $scope.config;\n          }\n        });\n\n\n        $scope.widgetClasses = function(w, definition, widgetState){\n          var classes = [];\n          classes.push('widget-' + definition.type);\n\n          if(definition.styleClass) {\n            classes.push(definition.styleClass);\n          }\n\n          //if (!w.frameless || $scope.editMode){\n          //  classes += ' panel panel-default';\n          //}\n          if (!widgetState.isValidWidth) {\n            classes.push('widgets-warning');\n          }\n\n          if (widgetState.configBeingEdited) {\n            classes.push('widget-being-edited');\n          }\n\n          return classes;\n        };\n\n        $scope.openFullScreen = function() {\n          var definition = $scope.definition;\n          var fullScreenScope = $scope.$new();\n          var opts = {\n            scope: fullScreenScope,\n            templateUrl: adfTemplatePath + 'widget-fullscreen.html',\n            size: definition.modalSize || 'lg', // 'sm', 'lg'\n            backdrop: 'static',\n            windowClass: (definition.fullScreen) ? 'dashboard-modal widget-fullscreen' : 'dashboard-modal'\n          };\n\n          var instance = $uibModal.open(opts);\n          fullScreenScope.closeDialog = function() {\n            instance.close();\n            fullScreenScope.$destroy();\n          };\n        };\n\n        $scope.toggleWidgetFullscreen = function(){\n          $scope.columnState.isExpanded = !$scope.columnState.isExpanded;\n          $rootScope.$broadcast('widgetToggleFullscreen', $scope.col.cid);\n        };\n      }],\n      compile: function() {\n\n        /**\n         * use pre link, because link of widget-content\n         * is executed before post link widget\n         */\n        return {\n          pre: preLink,\n          post: postLink\n        };\n      }\n    };\n\n  }]);\n\nangular.module(\"adf\").run([\"$templateCache\", function($templateCache) {$templateCache.put(\"../src/templates/dashboard-column-custom.html\",\"<div adf-id={{column.cid}} class=\\\"dashboardPlaceholder column {{column.styleClass}}\\\" ng-class=\\\"{\\'widgets-warning\\': options.singleWidgetMode && column.widgets.length > 1, \\'full-screen\\': columnState.isExpanded }\\\" ng-model=column.widgets ng-hide=columnState.isHidden> <div ng-sortable=sortableConfig class=adf-widgets adf-id={{column.cid}} ng-class=\\\"{\\'adf-nested\\':column.rows, \\'disable-put\\': editMode && !sortableConfig.group.put}\\\"> <adf-widget ng-repeat=\\\"definition in column.widgets track by definition.wid\\\" definition=definition column=column edit-mode=editMode options=options widget-state=widgetState column-state=columnState dash-id=adfModel._id> </adf-widget></div> <div ng-if=\\\"editMode && (!options.singleWidgetMode || !column.widgets.length) && !column.rows\\\" class=\\\"text-center js-remove\\\" ng-class=\\\"{\\'empty-placeholder\\': options.singleWidgetMode && !column.widgets.length}\\\"> <a href title=\\\"add new widget\\\" ng-click=addWidgetDialog()> <i class=\\\"fa fa-plus fa-5x\\\"></i> <p>Add widget</p> </a> </div>  </div> \");\n$templateCache.put(\"../src/templates/dashboard-column.html\",\"<div adf-id={{column.cid}} class=column ng-class=column.styleClass ng-model=column.widgets> <adf-widget ng-repeat=\\\"definition in column.widgets\\\" definition=definition column=column edit-mode=editMode options=options widget-state=widgetState>  </adf-widget></div> \");\n$templateCache.put(\"../src/templates/dashboard-edit.html\",\"<div class=modal-header> <button type=button class=close ng-click=closeDialog() aria-hidden=true>&times;</button> <h4 class=modal-title>Edit Dashboard</h4> </div> <div class=modal-body> <form role=form>     <div class=form-group> <label>Structure</label> <div class=radio ng-repeat=\\\"(key, structure) in structures\\\"> <label> <input type=radio value={{key}} ng-model=model.structure ng-change=\\\"changeStructure(key, structure)\\\"> {{key}} </label> </div> </div> </form> </div> <div class=modal-footer> <button type=button class=\\\"btn btn-primary\\\" ng-click=closeDialog()>Close</button> </div> \");\n$templateCache.put(\"../src/templates/dashboard-row.html\",\"<div class=row ng-class=row.styleClass>  </div> \");\n$templateCache.put(\"../src/templates/dashboard-title-custom.html\",\"<div class=\\\"row dashboard-nav\\\"> <div class=col-md-8> <h1 ng-if=editMode> {{model.title}} </h1> </div> <div class=col-md-4> <ul style=\\\"font-size: 16px\\\" class=\\\"nav navbar-nav navbar-right dashboard-menu\\\"> <li ng-if=editMode> <a href title=\\\"edit dashboard\\\" ng-click=editDashboardDialog()> <i class=\\\"fa fa-sliders\\\"></i> <p>Settings</p> </a> </li> <li ng-if=editMode> <a href title=\\\"{{editMode ? \\'save changes\\' : \\'enable edit mode\\'}}\\\" ng-click=toggleEditMode()> <i class=fa x-ng-class=\\\"{\\'fa-pencil\\' : !editMode, \\'fa-floppy-o\\' : editMode}\\\"></i> <p ng-if=editMode>Save</p> <p ng-if=!editMode>Edit</p> </a> </li> <li ng-if=editMode> <a href title=\\\"undo changes\\\" ng-click=cancelEditMode()> <i class=\\\"fa fa-undo adf-flip\\\"></i> <p>Undo</p> </a> </li> </ul> </div> </div> \");\n$templateCache.put(\"../src/templates/dashboard-title.html\",\"<h1> {{model.title}} <span style=\\\"font-size: 16px\\\" class=pull-right> <a href ng-if=editMode title=\\\"add new widget\\\" ng-click=addWidgetDialog()> <i class=\\\"glyphicon glyphicon-plus-sign\\\"></i> </a> <a href ng-if=editMode title=\\\"edit dashboard\\\" ng-click=editDashboardDialog()> <i class=\\\"glyphicon glyphicon-cog\\\"></i> </a> <a href ng-if=options.editable title=\\\"{{editMode ? \\'save changes\\' : \\'enable edit mode\\'}}\\\" ng-click=toggleEditMode()> <i class=glyphicon x-ng-class=\\\"{\\'glyphicon-edit\\' : !editMode, \\'glyphicon-save\\' : editMode}\\\"></i> </a> <a href ng-if=editMode title=\\\"undo changes\\\" ng-click=cancelEditMode()> <i class=\\\"glyphicon glyphicon-repeat adf-flip\\\"></i> </a> </span> </h1> \");\n$templateCache.put(\"../src/templates/dashboard.html\",\"<div class=dashboard-container>  <div class=\\\"dashboard container-fluid\\\" x-ng-class=\\\"{\\'edit\\' : editMode}\\\"> <adf-dashboard-row row=row adf-model=model options=options ng-repeat=\\\"row in model.rows track by $index\\\" edit-mode=editMode continuous-edit-mode=continuousEditMode> </adf-dashboard-row></div> </div> \");\n$templateCache.put(\"../src/templates/widget-add.html\",\"<div class=modal-header> <button type=button class=close ng-click=closeDialog() aria-hidden=true>&times;</button> <h4 class=modal-title>Add new widget</h4> </div> <div class=modal-body> <div style=\\\"display: inline-block;\\\"> <dl class=dl-horizontal> <dt ng-repeat-start=\\\"(key, widget) in widgets\\\"> <a href ng-click=addWidget(key)> {{widget.title}} </a> </dt> <dd ng-repeat-end ng-if=widget.description> {{widget.description}} </dd> </dl> <div ng-if=noWidgetsAvailable>No widgets available for selected placeholder</div> </div> </div> <div class=modal-footer> <button type=button class=\\\"btn btn-primary\\\" ng-click=closeDialog()>Close</button> </div> \");\n$templateCache.put(\"../src/templates/widget-delete.html\",\"<div class=modal-header> <h4 class=modal-title>Delete {{widget.title}}</h4> </div> <div class=modal-body> <form role=form> <div class=form-group> <label for=widgetTitle>Are you sure you want to delete this widget ?</label> </div> </form> </div> <div class=modal-footer> <button type=button class=\\\"btn btn-default\\\" ng-click=closeDialog()>Close</button> <button type=button class=\\\"btn btn-primary\\\" ng-click=deleteDialog()>Delete</button> </div> \");\n$templateCache.put(\"../src/templates/widget-edit.html\",\"<form name=widgetEditForm novalidate role=form ng-submit=saveDialog()> <div class=modal-header> <button type=button class=close ng-click=closeDialog() aria-hidden=true>&times;</button> <h4 class=modal-title>{{widget.title}}</h4> </div> <div class=modal-body> <div class=\\\"alert alert-danger\\\" role=alert ng-show=validationError> <strong>Apply error:</strong> {{validationError}} </div> <div class=form-group> <label for=widgetTitle>Title</label> <input type=text class=form-control id=widgetTitle ng-model=definition.title placeholder=\\\"Enter title\\\" required> </div> <div ng-if=widget.edit> <adf-widget-content model=definition content=widget.edit dash-id=dashId> </adf-widget-content></div> </div> <div class=modal-footer> <button type=button class=\\\"btn btn-default\\\" ng-click=closeDialog()>Cancel</button> <input type=submit class=\\\"btn btn-primary\\\" ng-disabled=widgetEditForm.$invalid value=Apply> </div> </form> \");\n$templateCache.put(\"../src/templates/widget-fullscreen.html\",\"<div class=modal-header> <div class=\\\"pull-right widget-icons\\\"> <a href title=\\\"Reload Widget Content\\\" ng-if=widget.reload ng-click=reload()> <i class=\\\"glyphicon glyphicon-refresh\\\"></i> </a> <a href title=close ng-click=closeDialog()> <i class=\\\"glyphicon glyphicon-remove\\\"></i> </a> </div> <h4 class=modal-title>{{definition.title}}</h4> </div> <div class=modal-body> <adf-widget-content model=definition content=widget> </adf-widget-content></div> <div class=modal-footer> <button type=button class=\\\"btn btn-primary\\\" ng-click=closeDialog()>Close</button> </div> \");\n$templateCache.put(\"../src/templates/widget-title-custom.html\",\"<div class=panel-title> <div class=status-bar-widget ng-if=widget.statusBar> <adf-widget-content class=status-bar-widget-content model=definition content=widget.statusBar widget-shared-data=widgetSharedData> </adf-widget-content></div> <div class=\\\"widget-actions pull-right\\\"> <div class=pull-right>  <button class=\\\"btn btn-link\\\" title=\\\"filter widget data\\\" ng-disabled=\\\"editMode || widgetSharedData.layoutEditMode\\\" ng-click=\\\"widgetState.showFilters = !widgetState.showFilters\\\" ng-if=widget.filter> <i class=\\\"fa fa-filter\\\"></i> </button>  <button class=\\\"btn btn-link\\\" title=Minimize/Maximize ng-click=toggleWidgetFullscreen() ng-show=options.maximizable> <i class=fa ng-class=\\\"columnState.isExpanded ? \\'fa-compress\\' : \\'fa-expand\\'\\\"></i> </button>  <button class=\\\"btn btn-link\\\" title=\\\"remove widget\\\" ng-click=remove() ng-if=editMode> <i class=\\\"fa fa-times\\\"></i> </button> </div> <div ng-if=widget.headerActions class=pull-right> <adf-widget-content model=definition content=widget.headerActions widget-shared-data=widgetSharedData> </adf-widget-content></div> <div class=clear></div> </div> <div class=clear></div> </div> \");\n$templateCache.put(\"../src/templates/widget-title.html\",\"<h3 class=panel-title> {{definition.title}} <span class=pull-right> <a href title=\\\"reload widget content\\\" ng-if=widget.reload ng-click=reload()> <i class=\\\"glyphicon glyphicon-refresh\\\"></i> </a>  <a href title=\\\"change widget location\\\" class=adf-move ng-if=editMode> <i class=\\\"glyphicon glyphicon-move\\\"></i> </a>  <a href title=\\\"collapse widget\\\" ng-show=\\\"options.collapsible && !widgetState.isCollapsed\\\" ng-click=\\\"widgetState.isCollapsed = !widgetState.isCollapsed\\\"> <i class=\\\"glyphicon glyphicon-minus\\\"></i> </a>  <a href title=\\\"expand widget\\\" ng-show=\\\"options.collapsible && widgetState.isCollapsed\\\" ng-click=\\\"widgetState.isCollapsed = !widgetState.isCollapsed\\\"> <i class=\\\"glyphicon glyphicon-plus\\\"></i> </a>   <a href title=Minimize/Maximize ng-click=openFullScreen() ng-show=options.maximizable> <i class=\\\"glyphicon glyphicon-fullscreen\\\"></i> </a>  <a href title=\\\"remove widget\\\" ng-click=remove() ng-if=editMode> <i class=\\\"glyphicon glyphicon-remove\\\"></i> </a> </span> </h3> \");\n$templateCache.put(\"../src/templates/widget.html\",\"<div adf-id={{definition.wid}} adf-widget-type={{definition.type}} ng-class=\\\"widgetClasses(widget, definition, widgetState)\\\" class=\\\"widget panel panel-default\\\"> <div class=widget-growl-messages> <div growl reference={{definition.wid}} inline=true></div> </div> <div class=\\\"panel-heading clearfix\\\" ng-if=\\\"!widget.frameless || editMode\\\"> <div ng-include src=widget.titleTemplateUrl ng-class=\\\"{\\'adf-move\\':editMode}\\\"></div> </div> <div ng-class=\\\"{\\'panel-body\\':!widget.frameless || editMode}\\\" uib-collapse=widgetState.isCollapsed> <div ng-if=\\\"widget.filter && widgetState.showFilters\\\" class=widget-filter> <adf-widget-content model=definition content=widget.filter widget-shared-data=widgetSharedData dash-id=dashId> </adf-widget-content></div> <adf-widget-content model=definition content=widget widget-shared-data=widgetSharedData dash-id=dashId> </adf-widget-content></div> </div> \");}]);})(window);","/*\r\n* The MIT License\r\n*\r\n* Copyright (c) 2015, Sebastian Sdorra\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in\r\n* all copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n* SOFTWARE.\r\n*/\r\n\r\n\r\n/* global angular */\r\nangular.module('adf')\r\n  .directive('adfDashboardColumn', function ($log, $compile, $rootScope, adfTemplatePath, rowTemplate, dashboard) {\r\n    'use strict';\r\n\r\n    /**\r\n     * moves a widget in between a column\r\n     */\r\n    function moveWidgetInColumn($scope, column, evt){\r\n      var widgets = column.widgets;\r\n      // move widget and apply to scope\r\n      $scope.$apply(function(){\r\n        widgets.splice(evt.newIndex, 0, widgets.splice(evt.oldIndex, 1)[0]);\r\n        $rootScope.$broadcast('adfWidgetMovedInColumn');\r\n      });\r\n    }\r\n\r\n    /**\r\n     * finds a widget by its id in the column\r\n     */\r\n    function findWidget(column, index){\r\n      var widget = null;\r\n      for (var i=0; i<column.widgets.length; i++){\r\n        var w = column.widgets[i];\r\n        if (dashboard.idEquals(w.wid,index)){\r\n          widget = w;\r\n          break;\r\n        }\r\n      }\r\n      return widget;\r\n    }\r\n\r\n    /**\r\n     * finds a column by its id in the model\r\n     */\r\n    function findColumn(model, index){\r\n      var column = null;\r\n      for (var i=0; i<model.rows.length; i++){\r\n        var r = model.rows[i];\r\n        for (var j=0; j<r.columns.length; j++){\r\n          var c = r.columns[j];\r\n          if (dashboard.idEquals(c.cid, index)){\r\n            column = c;\r\n            break;\r\n          } else if (c.rows){\r\n            column = findColumn(c, index);\r\n          }\r\n        }\r\n        if (column){\r\n          break;\r\n        }\r\n      }\r\n      return column;\r\n    }\r\n\r\n    /**\r\n     * get the adf id from an html element\r\n     */\r\n    function getId(el){\r\n      var id = el.getAttribute('adf-id');\r\n      return id ? id : '-1';\r\n    }\r\n\r\n    /**\r\n     * adds a widget to a column\r\n     */\r\n    function addWidgetToColumn($scope, model, targetColumn, evt){\r\n      // find source column\r\n      var cid = getId(evt.from);\r\n      var sourceColumn = findColumn(model, cid);\r\n\r\n      if (sourceColumn){\r\n        // find moved widget\r\n        var wid = getId(evt.item);\r\n        var widget = findWidget(sourceColumn, wid);\r\n\r\n        if (widget){\r\n          // add new item and apply to scope\r\n          $scope.$apply(function(){\r\n      \t\t\tif (!targetColumn.widgets) {\r\n      \t\t\t\ttargetColumn.widgets = [];\r\n      \t\t\t}\r\n            targetColumn.widgets.splice(evt.newIndex, 0, widget);\r\n\r\n            $rootScope.$broadcast('adfWidgetAddedToColumn');\r\n            $scope.$emit('dashboardWidgetChanged');\r\n          });\r\n        } else {\r\n          $log.warn('could not find widget with id ' + wid);\r\n        }\r\n      } else {\r\n        $log.warn('could not find column with id ' + cid);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * removes a widget from a column\r\n     */\r\n    function removeWidgetFromColumn($scope, column, evt){\r\n      // remove old item and apply to scope\r\n      $scope.$apply(function(){\r\n        column.widgets.splice(evt.oldIndex, 1);\r\n        $rootScope.$broadcast('adfWidgetRemovedFromColumn');\r\n      });\r\n    }\r\n\r\n    /**\r\n     * enable sortable\r\n     */\r\n    function applySortable($scope, $element, model, column){\r\n      // enable drag and drop\r\n      var el = $element[0];\r\n      var sortable = Sortable.create(el, {\r\n        group: 'widgets',\r\n        handle: '.adf-move',\r\n        ghostClass: 'placeholder',\r\n        animation: 150,\r\n        onAdd: function(evt){\r\n          addWidgetToColumn($scope, model, column, evt);\r\n        },\r\n        onRemove: function(evt){\r\n          removeWidgetFromColumn($scope, column, evt);\r\n        },\r\n        onUpdate: function(evt){\r\n          moveWidgetInColumn($scope, column, evt);\r\n        }\r\n      });\r\n\r\n      // destroy sortable on column destroy event\r\n      $element.on('$destroy', function () {\r\n        // check sortable element, before calling destroy\r\n        // see https://github.com/sdorra/angular-dashboard-framework/issues/118\r\n        if (sortable.el){\r\n          sortable.destroy();\r\n        }\r\n      });\r\n    }\r\n\r\n    return {\r\n      restrict: 'E',\r\n      replace: true,\r\n      scope: {\r\n        column: '=',\r\n        editMode: '=',\r\n        continuousEditMode: '=',\r\n        adfModel: '=',\r\n        options: '='\r\n      },\r\n      templateUrl: adfTemplatePath + 'dashboard-column.html',\r\n      link: function ($scope, $element) {\r\n        // set id\r\n        var col = $scope.column;\r\n        if (!col.cid){\r\n          col.cid = dashboard.id();\r\n        }\r\n\r\n        if (angular.isDefined(col.rows) && angular.isArray(col.rows)) {\r\n          // be sure to tell Angular about the injected directive and push the new row directive to the column\r\n          $compile(rowTemplate)($scope, function(cloned) {\r\n            $element.append(cloned);\r\n          });\r\n        } else {\r\n          // enable drag and drop for widget only columns\r\n          applySortable($scope, $element, $scope.adfModel, col);\r\n        }\r\n      }\r\n    };\r\n  });\r\n","/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n/**\r\n * @ngdoc directive\r\n * @name adf.directive:adfDashboard\r\n * @element div\r\n * @restrict EA\r\n * @scope\r\n * @description\r\n *\r\n * `adfDashboard` is a directive which renders the dashboard with all its\r\n * components. The directive requires a name attribute. The name of the\r\n * dashboard can be used to store the model.\r\n *\r\n * @param {string} name name of the dashboard. This attribute is required.\r\n * @param {boolean=} editable false to disable the editmode of the dashboard.\r\n * @param {boolean=} collapsible true to make widgets collapsible on the dashboard.\r\n * @param {boolean=} maximizable true to add a button for open widgets in a large modal panel.\r\n * @param {boolean=} enableConfirmDelete true to ask before remove an widget from the dashboard.\r\n * @param {string=} structure the default structure of the dashboard.\r\n * @param {object=} adfModel model object of the dashboard.\r\n * @param {function=} adfWidgetFilter function to filter widgets on the add dialog.\r\n * @param {boolean=} continuousEditMode enable continuous edit mode, to fire add/change/remove\r\n *                   events during edit mode not reset it if edit mode is exited.\r\n */\r\n\r\nangular.module('adf')\r\n  .directive('adfDashboard', function ($rootScope, $log, $timeout, $uibModal, dashboard, adfTemplatePath) {\r\n    'use strict';\r\n\r\n    function stringToBoolean(string){\r\n      switch(angular.isDefined(string) ? string.toLowerCase() : null){\r\n        case 'true': case 'yes': case '1': return true;\r\n        case 'false': case 'no': case '0': case null: return false;\r\n        default: return Boolean(string);\r\n      }\r\n    }\r\n\r\n    function widgetFilter(widget, column){\r\n      return !widget.minSize || column.width >= widget.minSize;\r\n    }\r\n\r\n    function copyWidgets(source, target, warnings) {\r\n      if ( source.widgets && source.widgets.length > 0 ){\r\n        var w = source.widgets.shift();\r\n        if(warnings.widgetExceedsMinSize === false && !widgetFilter(w, target)){\r\n          warnings.widgetExceedsMinSize = true;\r\n        }\r\n        while (w){\r\n          target.widgets.push(w);\r\n          w = source.widgets.shift();\r\n        }\r\n      }\r\n    }\r\n\r\n    /**\r\n    * Copy widget from old columns to the new model\r\n    * @param object root the model\r\n    * @param array of columns\r\n    * @param counter\r\n    */\r\n    function fillStructure(root, columns, counter, warnings) {\r\n      counter = counter || 0;\r\n\r\n      if (angular.isDefined(root.rows)) {\r\n        angular.forEach(root.rows, function (row) {\r\n          angular.forEach(row.columns, function (column) {\r\n            // if the widgets prop doesn't exist, create a new array for it.\r\n            // this allows ui.sortable to do it's thing without error\r\n            if (!column.widgets) {\r\n              column.widgets = [];\r\n            }\r\n\r\n            // if a column exist at the counter index, copy over the column\r\n            if (angular.isDefined(columns[counter])) {\r\n              // do not add widgets to a column, which uses nested rows\r\n              if (!angular.isDefined(column.rows)){\r\n                copyWidgets(columns[counter], column, warnings);\r\n                counter++;\r\n                if(warnings && warnings.oneWidgetPerColumn === false && column.widgets.length > 1){\r\n                  warnings.oneWidgetPerColumn = true;\r\n                }\r\n              }\r\n            }\r\n\r\n            // run fillStructure again for any sub rows/columns\r\n            counter = fillStructure(column, columns, counter);\r\n          });\r\n        });\r\n      }\r\n      return counter;\r\n    }\r\n\r\n    /**\r\n    * Read Columns: recursively searches an object for the 'columns' property\r\n    * @param object model\r\n    * @param array  an array of existing columns; used when recursion happens\r\n    */\r\n    function readColumns(root, columns) {\r\n      columns = columns || [];\r\n\r\n      if (angular.isDefined(root.rows)) {\r\n        angular.forEach(root.rows, function (row) {\r\n          angular.forEach(row.columns, function (col) {\r\n            columns.push(col);\r\n            // keep reading columns until we can't any more\r\n            readColumns(col, columns);\r\n          });\r\n        });\r\n      }\r\n\r\n      return columns;\r\n    }\r\n\r\n    function changeStructure(model, structure, scope){\r\n      var columns = readColumns(model);\r\n      var counter = 0;\r\n      var warningMessages = [];\r\n      var warnings = {\r\n        widgetExceedsMinSize: false,\r\n        oneWidgetPerColumn: false\r\n      };\r\n\r\n      model.rows = angular.copy(structure.rows);\r\n\r\n      while ( counter < columns.length ){\r\n        counter = fillStructure(model, columns, counter, warnings);\r\n      }\r\n\r\n      if(warnings.widgetExceedsMinSize) {\r\n        warningMessages.push('At least one placeholder was too small for a widget!');\r\n      }\r\n      if(scope.singleWidgetMode && warnings.oneWidgetPerColumn) {\r\n        warningMessages.push('Multiple widgets were copied to a single placeholder!');\r\n      }\r\n      if(warningMessages.length) {\r\n        scope.$emit('changeStructureWarning', warningMessages);\r\n      }\r\n    }\r\n\r\n    function createConfiguration(type){\r\n      var cfg = {};\r\n      var config = dashboard.widgets[type].config;\r\n      if (config){\r\n        cfg = angular.copy(config);\r\n      }\r\n      return cfg;\r\n    }\r\n\r\n    /**\r\n     * Find first widget column in model.\r\n     *\r\n     * @param dashboard model\r\n     */\r\n    function findFirstWidgetColumn(model){\r\n      var column = null;\r\n      if (!angular.isArray(model.rows)){\r\n        $log.error('model does not have any rows');\r\n        return null;\r\n      }\r\n      for (var i=0; i<model.rows.length; i++){\r\n        var row = model.rows[i];\r\n        if (angular.isArray(row.columns)){\r\n          for (var j=0; j<row.columns.length; j++){\r\n            var col = row.columns[j];\r\n            if (!col.rows){\r\n              column = col;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n        if (column){\r\n          break;\r\n        }\r\n      }\r\n      return column;\r\n    }\r\n\r\n    /**\r\n     * Adds the widget to first column of the model.\r\n     *\r\n     * @param dashboard model\r\n     * @param widget to add to model\r\n     * @param name name of the dashboard\r\n     */\r\n    function addNewWidgetToModel(model, widget, name, column){\r\n      if (model){\r\n        if(!column) {\r\n          column = findFirstWidgetColumn(model);\r\n        }\r\n        if (column){\r\n          if (!column.widgets){\r\n            column.widgets = [];\r\n          }\r\n          column.widgets.unshift(widget);\r\n\r\n          // broadcast added event\r\n          $rootScope.$broadcast('adfWidgetAdded', name, model, widget);\r\n        } else {\r\n          $log.error('could not find first widget column');\r\n        }\r\n      } else {\r\n        $log.error('model is undefined');\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Checks if the edit mode of the widget should be opened immediately.\r\n     *\r\n     * @param widget type\r\n     */\r\n    function isEditModeImmediate(type){\r\n      var widget = dashboard.widgets[type];\r\n      return widget && widget.edit && widget.edit.immediate;\r\n    }\r\n\r\n    /**\r\n     * Opens the edit mode of the specified widget.\r\n     *\r\n     * @param dashboard scope\r\n     * @param widget\r\n     */\r\n    function openEditMode($scope, widget){\r\n      // wait some time before fire enter edit mode event\r\n      $timeout(function(){\r\n        $scope.$broadcast('adfWidgetEnterEditMode', widget);\r\n      }, 200);\r\n    }\r\n\r\n    /**\r\n     * finds a widget by its id in the column\r\n     */\r\n    function findWidget(column, index){\r\n      var widget = null;\r\n      for (var i=0; i<column.widgets.length; i++){\r\n        var w = column.widgets[i];\r\n        if (dashboard.idEquals(w.wid,index)){\r\n          widget = w;\r\n          break;\r\n        }\r\n      }\r\n      return widget;\r\n    }\r\n\r\n    /**\r\n     * finds a column by its id in the model\r\n     */\r\n    function findColumn(model, index){\r\n      var column = null;\r\n      for (var i=0; i<model.rows.length; i++){\r\n        var r = model.rows[i];\r\n        for (var j=0; j<r.columns.length; j++){\r\n          var c = r.columns[j];\r\n          if (dashboard.idEquals(c.cid, index)){\r\n            column = c;\r\n            break;\r\n          } else if (c.rows){\r\n            column = findColumn(c, index);\r\n          }\r\n        }\r\n        if (column){\r\n          break;\r\n        }\r\n      }\r\n      return column;\r\n    }\r\n\r\n    /**\r\n     * Finds widget by id and changes its config\r\n     */\r\n    function changeConfigForWidgetById($scope, wid, config){\r\n      var model = $scope.model,\r\n        rows;\r\n\r\n      rows = model.rows;\r\n\r\n      if(rows){\r\n        angular.forEach(rows, function(row){\r\n          var columns = row.columns;\r\n\r\n          if(columns){\r\n\r\n            angular.forEach(columns, function(column){\r\n              var widgets = column.widgets;\r\n\r\n              if(widgets){\r\n                angular.forEach(widgets, function (widget, key) {\r\n\r\n                  if( widget.wid === wid ){\r\n                    widget.config = config;\r\n                  }\r\n                });\r\n              }\r\n            });\r\n          }\r\n        });\r\n      }\r\n    }\r\n\r\n    function setExternalApiFunctions(scope) {\r\n      var api = {};\r\n\r\n      api.saveDashboard = function() {\r\n        return scope.saveDashboard();\r\n      };\r\n\r\n      api.manageEditMode = function() {\r\n        return scope.manageEditMode();\r\n      };\r\n\r\n      api.editDashboardDialog = function() {\r\n        return scope.editDashboardDialog();\r\n      };\r\n\r\n      api.cancelEditMode = function() {\r\n        return scope.cancelEditMode();\r\n      };\r\n\r\n      api.changeDashStructure = function(name, structure) {\r\n        scope.changeStructure(name, structure, scope);\r\n      };\r\n\r\n      api.triggerDashboardChanged = function() {\r\n        scope.triggerDashboardChanged();\r\n      };\r\n\r\n      api.addNewWidget = function(config, type, name) {\r\n        var defConfig = createConfiguration(type);\r\n\r\n        var widgetName = name ? name : '',\r\n          model = scope.model,\r\n          widget = {\r\n          type: type,\r\n          config: angular.extend({}, defConfig, config),\r\n          wid: dashboard.id(),\r\n          title: widgetName\r\n        };\r\n\r\n        addNewWidgetToModel(model, widget, widgetName);\r\n\r\n        scope.triggerDashboardChanged();\r\n      };\r\n\r\n      api.changeWidgetConfig = function(wid, config) {\r\n        changeConfigForWidgetById(scope, wid, config);\r\n\r\n        scope.$broadcast('adfWidgetConfigChanged', wid);\r\n\r\n        scope.triggerDashboardChanged();\r\n      };\r\n\r\n      scope.externalApi = api;\r\n    }\r\n\r\n    return {\r\n      replace: true,\r\n      restrict: 'EA',\r\n      transclude : false,\r\n      scope: {\r\n        structure: '@',\r\n        name: '@',\r\n        collapsible: '@',\r\n        editable: '@',\r\n        editMode: '@',\r\n        continuousEditMode: '=',\r\n        maximizable: '@',\r\n        adfModel: '=',\r\n        adfWidgetFilter: '=',\r\n        singleWidgetMode: '@',\r\n        externalApi: '='\r\n      },\r\n      controller: function($scope){\r\n        var model = {};\r\n        var structure = {};\r\n        var widgetFilter = null;\r\n        var structureName = {};\r\n        var name = $scope.name;\r\n\r\n        // Watching for changes on adfModel\r\n        $scope.$watch('adfModel', function(oldVal, newVal) {\r\n          // has model changed or is the model attribute not set\r\n          if (newVal !== null || (oldVal === null && newVal === null)) {\r\n            model = $scope.adfModel;\r\n            widgetFilter = $scope.adfWidgetFilter;\r\n            if ( ! model || ! model.rows ){\r\n              structureName = $scope.structure;\r\n              structure = dashboard.structures[structureName];\r\n              if (structure){\r\n                if (model){\r\n                  model.rows = angular.copy(structure).rows;\r\n                } else {\r\n                  model = angular.copy(structure);\r\n                }\r\n                model.structure = structureName;\r\n              } else {\r\n                $log.error( 'could not find structure ' + structureName);\r\n              }\r\n            }\r\n\r\n            if (model) {\r\n              if (!model.title){\r\n                model.title = 'Dashboard';\r\n              }\r\n              if (!model.titleTemplateUrl) {\r\n                model.titleTemplateUrl = adfTemplatePath + 'dashboard-title-custom.html';\r\n              }\r\n              $scope.model = model;\r\n            } else {\r\n              $log.error('could not find or create model');\r\n            }\r\n          }\r\n        }, true);\r\n\r\n        // edit mode\r\n        $scope.editMode = false;\r\n        $scope.editClass = '';\r\n\r\n        $scope.toggleEditMode = function(){\r\n          $scope.editMode = ! $scope.editMode;\r\n          if ($scope.editMode){\r\n            if (!$scope.continuousEditMode) {\r\n              $scope.modelCopy = angular.copy($scope.adfModel, {});\r\n              $rootScope.$broadcast('adfIsEditMode');\r\n            }\r\n          }\r\n\r\n          if (!$scope.editMode){\r\n             $scope.triggerDashboardChanged();\r\n          }\r\n        };\r\n\r\n        $scope.$on('adfToggleEditMode', function() {\r\n            $scope.toggleEditMode();\r\n        });\r\n\r\n        $scope.collapseAll = function(collapseExpandStatus){\r\n          $rootScope.$broadcast('adfDashboardCollapseExpand',{collapseExpandStatus : collapseExpandStatus});\r\n        };\r\n\r\n        $scope.cancelEditMode = function(){\r\n          $scope.editMode = false;\r\n          if (!$scope.continuousEditMode) {\r\n            $scope.modelCopy = angular.copy($scope.modelCopy, $scope.adfModel);\r\n          }\r\n          $rootScope.$broadcast('adfDashboardEditsCancelled');\r\n        };\r\n\r\n        // edit dashboard settings\r\n        $scope.editDashboardDialog = function(){\r\n          var editDashboardScope = $scope.$new();\r\n          // create a copy of the title, to avoid changing the title to\r\n          // \"dashboard\" if the field is empty\r\n          editDashboardScope.copy = {\r\n            title: model.title\r\n          };\r\n          editDashboardScope.structures = dashboard.structures;\r\n\r\n          var adfEditTemplatePath = adfTemplatePath + 'dashboard-edit.html';\r\n          if(model.editTemplateUrl) {\r\n            adfEditTemplatePath = model.editTemplateUrl;\r\n          }\r\n          var instance = $uibModal.open({\r\n            scope: editDashboardScope,\r\n            templateUrl: adfEditTemplatePath,\r\n            backdrop: 'static'\r\n          });\r\n          editDashboardScope.changeStructure = function(name, structure){\r\n            $log.info('change structure to ' + name);\r\n            changeStructure(model, structure, $scope);\r\n          };\r\n          editDashboardScope.closeDialog = function(){\r\n            // copy the new title back to the model\r\n            model.title = editDashboardScope.copy.title;\r\n            // close modal and destroy the scope\r\n            instance.close();\r\n            editDashboardScope.$destroy();\r\n          };\r\n        };\r\n\r\n        // add widget dialog\r\n        $scope.addWidgetDialog = function(column){\r\n          var addScope = $scope.$new();\r\n          var model = $scope.model;\r\n          var widgets;\r\n          if (angular.isFunction(widgetFilter)){\r\n            widgets = {};\r\n            angular.forEach(dashboard.widgets, function(widget, type){\r\n              if (widgetFilter(widget, type, model, column)){\r\n                widgets[type] = widget;\r\n              }\r\n            });\r\n          } else {\r\n            widgets = dashboard.widgets;\r\n          }\r\n          addScope.widgets = widgets;\r\n          addScope.noWidgetsAvailable = angular.equals({}, widgets);\r\n\r\n          var adfAddTemplatePath = adfTemplatePath + 'widget-add.html';\r\n          if(model.addTemplateUrl) {\r\n            adfAddTemplatePath = model.addTemplateUrl;\r\n          }\r\n\r\n          var opts = {\r\n            scope: addScope,\r\n            templateUrl: adfAddTemplatePath,\r\n            backdrop: 'static'\r\n          };\r\n\r\n          var instance = $uibModal.open(opts);\r\n          addScope.addWidget = function(widget){\r\n            var w = {\r\n              type: widget,\r\n              config: createConfiguration(widget),\r\n              wid: dashboard.id()\r\n            };\r\n            addNewWidgetToModel(model, w, name, column);\r\n            // close and destroy\r\n            instance.close();\r\n            addScope.$destroy();\r\n\r\n            // check for open edit mode immediately\r\n            if (isEditModeImmediate(widget)){\r\n              openEditMode($scope, w);\r\n            }\r\n\r\n            $scope.triggerDashboardChanged();\r\n          };\r\n          addScope.closeDialog = function(){\r\n            // close and destroy\r\n            instance.close();\r\n            addScope.$destroy();\r\n          };\r\n        };\r\n\r\n        $scope.manageEditMode = function () {\r\n          $scope.editMode = !$scope.editMode;\r\n          if ($scope.editMode){\r\n            $scope.modelCopy = angular.copy($scope.adfModel, {});\r\n          }\r\n          return $scope.editMode;\r\n        };\r\n\r\n        $scope.saveDashboard = function() {\r\n          $scope.editMode = false;\r\n          $scope.triggerDashboardChanged();\r\n          return false;\r\n        };\r\n\r\n        $scope.changeStructure = function(name, structure) {\r\n          changeStructure(model, structure, $scope);\r\n        };\r\n\r\n        $scope.triggerDashboardChanged = function() {\r\n          $rootScope.$broadcast('adfDashboardChanged', name, model);\r\n        };\r\n\r\n        $scope.addNewWidgetToModel = addNewWidgetToModel;\r\n\r\n        $scope.$on('addWidgetDialog', function(event, column) {\r\n          $scope.addWidgetDialog(column);\r\n        });\r\n\r\n        $scope.$on('dashboardWidgetChanged', function() {\r\n          // the event should only be caught by dashboard directive, that's why it is not propagated further up the chain\r\n          event.stopPropagation();\r\n\r\n          $scope.triggerDashboardChanged();\r\n        });\r\n\r\n        $scope.$on('dashboardWidgetConfigUpdated', function(event, config, wid, cid) {\r\n          // the event should only be caught by dashboard directive, that's why it is not propagated further up the chain\r\n          event.stopPropagation();\r\n\r\n          // we need to overwrite config object before saving to database, otherwise it is set after saving so the changed data is lost\r\n          if(cid) {\r\n            var col = findColumn(model, cid);\r\n            if(wid && col) {\r\n              var widget = findWidget(col, wid);\r\n              if(widget) {\r\n                widget.config = config;\r\n                $scope.triggerDashboardChanged();\r\n              }\r\n            }\r\n          }\r\n        });\r\n\r\n        setExternalApiFunctions($scope);\r\n      },\r\n      link: function ($scope, $element, $attr) {\r\n        // pass options to scope\r\n        var options = {\r\n          name: $attr.name,\r\n          editable: true,\r\n          enableConfirmDelete: stringToBoolean($attr.enableconfirmdelete),\r\n          maximizable: stringToBoolean($attr.maximizable),\r\n          collapsible: stringToBoolean($attr.collapsible),\r\n          singleWidgetMode: stringToBoolean($attr.singleWidgetMode)\r\n        };\r\n        if (angular.isDefined($attr.editable)){\r\n          options.editable = stringToBoolean($attr.editable);\r\n        }\r\n        $scope.options = options;\r\n      },\r\n      templateUrl: adfTemplatePath + 'dashboard.html'\r\n    };\r\n  });\r\n","/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n'use strict';\r\n\r\n/**\r\n * @ngdoc object\r\n * @name adf.dashboardProvider\r\n * @description\r\n *\r\n * The dashboardProvider can be used to register structures and widgets.\r\n */\r\nangular.module('adf.provider', [])\r\n  .provider('dashboard', function(){\r\n\r\n    var widgets = {};\r\n    var widgetsPath = '';\r\n    var structures = {};\r\n    var messageTemplate = '<div class=\"alert alert-danger\">{}</div>';\r\n    var loadingTemplate = '\\\r\n      <div class=\"progress progress-striped active\">\\n\\\r\n        <div class=\"progress-bar\" role=\"progressbar\" style=\"width: 100%\">\\n\\\r\n          <span class=\"sr-only\">loading ...</span>\\n\\\r\n        </div>\\n\\\r\n      </div>';\r\n\r\n    // default apply function of widget.edit.apply\r\n    var defaultApplyFunction = function(){\r\n      return true;\r\n    };\r\n\r\n   /**\r\n    * @ngdoc method\r\n    * @name adf.dashboardProvider#widget\r\n    * @methodOf adf.dashboardProvider\r\n    * @description\r\n    *\r\n    * Registers a new widget.\r\n    *\r\n    * @param {string} name of the widget\r\n    * @param {object} widget to be registered.\r\n    *\r\n    *   Object properties:\r\n    *\r\n    *   - `title` - `{string=}` - The title of the widget.\r\n    *   - `description` - `{string=}` - Description of the widget.\r\n    *   - `collapsed` - `{boolean=}` - true if the widget should be in collapsed state. Default is false.\r\n    *   - `config` - `{object}` - Predefined widget configuration.\r\n    *   - `controller` - `{string=|function()=}` - Controller fn that should be\r\n    *      associated with newly created scope of the widget or the name of a\r\n    *      {@link http://docs.angularjs.org/api/angular.Module#controller registered controller}\r\n    *      if passed as a string.\r\n    *   - `controllerAs` - `{string=}` - A controller alias name. If present the controller will be\r\n    *      published to scope under the `controllerAs` name.\r\n    *   - `frameless` - `{boolean=}` - false if the widget should be shown in frameless mode. The default is false.\r\n    *   - `styleClass` - `{object}` - space delimited string or map of classes bound to the widget.\r\n    *   - `template` - `{string=|function()=}` - html template as a string.\r\n    *   - `templateUrl` - `{string=}` - path to an html template.\r\n    *   - `reload` - `{boolean=}` - true if the widget could be reloaded. The default is false.\r\n    *   - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\r\n    *      be injected into the controller. If any of these dependencies are promises, the widget\r\n    *      will wait for them all to be resolved or one to be rejected before the controller is\r\n    *      instantiated.\r\n    *      If all the promises are resolved successfully, the values of the resolved promises are\r\n    *      injected.\r\n    *\r\n    *      The map object is:\r\n    *      - `key` – `{string}`: a name of a dependency to be injected into the controller.\r\n    *      - `factory` - `{string|function}`: If `string` then it is an alias for a service.\r\n    *        Otherwise if function, then it is {@link http://docs.angularjs.org/api/AUTO.$injector#invoke injected}\r\n    *        and the return value is treated as the dependency. If the result is a promise, it is\r\n    *        resolved before its value is injected into the controller.\r\n    *   - `edit` - `{object}` - Edit modus of the widget.\r\n    *      - `controller` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\r\n    *      - `controllerAs` - `{string=}` - Same as above, but for the edit mode of the widget.\r\n    *      - `template` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\r\n    *      - `templateUrl` - `{string=}` - Same as above, but for the edit mode of the widget.\r\n    *      - `resolve` - `{Object.<string, function>=}` - Same as above, but for the edit mode of the widget.\r\n    *      - `reload` - {boolean} - true if the widget should be reloaded, after the edit mode is closed.\r\n    *        Default is true.\r\n    *      - `immediate` - {boolean} - The widget enters the edit mode immediately after creation. Default is false.\r\n    *      - `apply` - `{function()=}` - The apply function is called, before the widget is saved.\r\n    *        The function have to return a boolean or an promise which can be resolved to a boolean.\r\n    *        The function can use injection.\r\n    *\r\n    * @returns {Object} self\r\n    */\r\n    this.widget = function(name, widget){\r\n      var w = angular.extend({reload: false, frameless: false}, widget);\r\n      if ( w.edit ){\r\n        var edit = {\r\n          reload: true,\r\n          immediate: false,\r\n          apply: defaultApplyFunction\r\n        };\r\n        angular.extend(edit, w.edit);\r\n        w.edit = edit;\r\n      }\r\n      widgets[name] = w;\r\n      return this;\r\n    };\r\n\r\n    /**\r\n     * @ngdoc method\r\n     * @name adf.dashboardProvider#widgetsPath\r\n     * @methodOf adf.dashboardProvider\r\n     * @description\r\n     *\r\n     * Sets the path to the directory which contains the widgets. The widgets\r\n     * path is used for widgets with a templateUrl which contains the\r\n     * placeholder {widgetsPath}. The placeholder is replaced with the\r\n     * configured value, before the template is loaded, but the template is\r\n     * cached with the unmodified templateUrl (e.g.: {widgetPath}/src/widgets).\r\n     * The default value of widgetPaths is ''.\r\n     *\r\n     *\r\n     * @param {string} path to the directory which contains the widgets\r\n     *\r\n     * @returns {Object} self\r\n     */\r\n    this.widgetsPath = function(path){\r\n      widgetsPath = path;\r\n      return this;\r\n    };\r\n\r\n   /**\r\n    * @ngdoc method\r\n    * @name adf.dashboardProvider#structure\r\n    * @methodOf adf.dashboardProvider\r\n    * @description\r\n    *\r\n    * Registers a new structure.\r\n    *\r\n    * @param {string} name of the structure\r\n    * @param {object} structure to be registered.\r\n    *\r\n    *   Object properties:\r\n    *\r\n    *   - `rows` - `{Array.<Object>}` - Rows of the dashboard structure.\r\n    *     - `styleClass` - `{string}` - CSS Class of the row.\r\n    *     - `columns` - `{Array.<Object>}` - Columns of the row.\r\n    *       - `styleClass` - `{string}` - CSS Class of the column.\r\n    *\r\n    * @returns {Object} self\r\n    */\r\n    this.structure = function(name, structure){\r\n      structures[name] = structure;\r\n      return this;\r\n    };\r\n\r\n   /**\r\n    * @ngdoc method\r\n    * @name adf.dashboardProvider#messageTemplate\r\n    * @methodOf adf.dashboardProvider\r\n    * @description\r\n    *\r\n    * Changes the template for messages.\r\n    *\r\n    * @param {string} template for messages.\r\n    *\r\n    * @returns {Object} self\r\n    */\r\n    this.messageTemplate = function(template){\r\n      messageTemplate = template;\r\n      return this;\r\n    };\r\n\r\n   /**\r\n    * @ngdoc method\r\n    * @name adf.dashboardProvider#loadingTemplate\r\n    * @methodOf adf.dashboardProvider\r\n    * @description\r\n    *\r\n    * Changes the template which is displayed as\r\n    * long as the widget resources are not resolved.\r\n    *\r\n    * @param {string} template loading template\r\n    *\r\n    * @returns {Object} self\r\n    */\r\n    this.loadingTemplate = function(template){\r\n      loadingTemplate = template;\r\n      return this;\r\n    };\r\n\r\n   /**\r\n    * @ngdoc service\r\n    * @name adf.dashboard\r\n    * @description\r\n    *\r\n    * The dashboard holds all options, structures and widgets.\r\n    *\r\n    * @property {Array.<Object>} widgets Array of registered widgets.\r\n    * @property {string} widgetsPath Default path for widgets.\r\n    * @property {Array.<Object>} structures Array of registered structures.\r\n    * @property {string} messageTemplate Template for messages.\r\n    * @property {string} loadingTemplate Template for widget loading.\r\n    *\r\n    * @returns {Object} self\r\n    */\r\n    this.$get = function(){\r\n      var cid = 0;\r\n\r\n      return {\r\n        widgets: widgets,\r\n        widgetsPath: widgetsPath,\r\n        structures: structures,\r\n        messageTemplate: messageTemplate,\r\n        loadingTemplate: loadingTemplate,\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboard#id\r\n         * @methodOf adf.dashboard\r\n         * @description\r\n         *\r\n         * Creates an ongoing numeric id. The method is used to create ids for\r\n         * columns and widgets in the dashboard.\r\n         */\r\n        id: function(){\r\n          return new Date().getTime() + '-' + (++cid);\r\n        },\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboard#idEqual\r\n         * @methodOf adf.dashboard\r\n         * @description\r\n         *\r\n         * Checks if the given ids are equal.\r\n         *\r\n         * @param {string} id widget or column id\r\n         * @param {string} other widget or column id\r\n         */\r\n         idEquals: function(id, other){\r\n           // use toString, because old ids are numbers\r\n           return ((id) && (other)) && (id.toString() === other.toString());\r\n         }\r\n      };\r\n    };\r\n\r\n  });\r\n","/*\r\n* The MIT License\r\n*\r\n* Copyright (c) 2015, Sebastian Sdorra\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in\r\n* all copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n* SOFTWARE.\r\n*/\r\n\r\n\r\n/* global angular */\r\nangular.module('adf')\r\n  .directive('adfDashboardRow', function ($compile, adfTemplatePath, columnTemplate) {\r\n    'use strict';\r\n\r\n    return {\r\n      restrict: 'E',\r\n      replace: true,\r\n      scope: {\r\n        row: '=',\r\n        adfModel: '=',\r\n        editMode: '=',\r\n        continuousEditMode: '=',\r\n        options: '='\r\n      },\r\n      templateUrl: adfTemplatePath + 'dashboard-row.html',\r\n      link: function($scope, $element) {\r\n        if (angular.isDefined($scope.row.columns) && angular.isArray($scope.row.columns)) {\r\n          $compile(columnTemplate)($scope, function(cloned) {\r\n            $element.append(cloned);\r\n          });\r\n        }\r\n      }\r\n    };\r\n  });\r\n","/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\nangular.module('adf')\n  .directive('adfWidgetContent', function($log, $q, $sce, $http, $templateCache,\n          $compile, $controller, $injector, dashboard) {\n\n    function parseUrl(url) {\n      var parsedUrl = url;\n      if (url.indexOf('{widgetsPath}') >= 0) {\n        parsedUrl = url.replace('{widgetsPath}', dashboard.widgetsPath)\n                .replace('//', '/');\n        if (parsedUrl.indexOf('/') === 0) {\n          parsedUrl = parsedUrl.substring(1);\n        }\n      }\n      return parsedUrl;\n    }\n\n    function getTemplate(widget) {\n      var deferred = $q.defer();\n\n      if (widget.template) {\n        deferred.resolve(widget.template);\n      } else if (widget.templateUrl) {\n        // try to fetch template from cache\n        var tpl = $templateCache.get(widget.templateUrl);\n        if (tpl) {\n          deferred.resolve(tpl);\n        } else {\n          var url = $sce.getTrustedResourceUrl(parseUrl(widget.templateUrl));\n          $http.get(url)\n               .success(function(response) {\n                 // put response to cache, with unmodified url as key\n                 $templateCache.put(widget.templateUrl, response);\n                 deferred.resolve(response);\n               })\n               .error(function() {\n                 deferred.reject('could not load template');\n               });\n        }\n      }\n\n      return deferred.promise;\n    }\n\n    function compileWidget($scope, $element, currentScope) {\n      var model = $scope.model;\n      var content = $scope.content;\n\n      // display loading template\n      $element.html(dashboard.loadingTemplate);\n\n      // create new scope\n      var templateScope = $scope.$new();\n\n      // pass config object to scope\n      if (!model.config) {\n        model.config = {};\n      }\n\n      templateScope.config = model.config;\n\n      // local injections\n      var base = {\n        $scope: templateScope,\n        widget: model,\n        config: model.config,\n        widgetSharedData: $scope.widgetSharedData || {},\n        dashId: $scope.dashId\n      };\n\n      // get resolve promises from content object\n      var resolvers = {};\n      resolvers.$tpl = getTemplate(content);\n      if (content.resolve) {\n        angular.forEach(content.resolve, function(promise, key) {\n          if (angular.isString(promise)) {\n            resolvers[key] = $injector.get(promise);\n          } else {\n            resolvers[key] = $injector.invoke(promise, promise, base);\n          }\n        });\n      }\n\n      // resolve all resolvers\n      $q.all(resolvers).then(function(locals) {\n        angular.extend(locals, base);\n\n        // compile & render template\n        var template = locals.$tpl;\n        $element.html(template);\n        if (content.controller) {\n          var templateCtrl = $controller(content.controller, locals);\n          if (content.controllerAs) {\n            templateScope[content.controllerAs] = templateCtrl;\n          }\n          $element.children().data('$ngControllerController', templateCtrl);\n        }\n        $compile($element.contents())(templateScope);\n      }, function(reason) {\n        // handle promise rejection\n        var msg = 'Could not resolve all promises';\n        if (reason) {\n          msg += ': ' + reason;\n        }\n        $log.warn(msg);\n        $element.html(dashboard.messageTemplate.replace(/{}/g, msg));\n      });\n\n      // destroy old scope\n      if (currentScope) {\n        currentScope.$destroy();\n      }\n\n      return templateScope;\n    }\n\n    return {\n      replace: true,\n      restrict: 'EA',\n      transclude: false,\n      scope: {\n        model: '=',\n        content: '=',\n        widgetSharedData: '=',\n        dashId: '='\n      },\n      link: function($scope, $element) {\n        var currentScope = compileWidget($scope, $element, null);\n        $scope.$on('widgetConfigChanged', function() {\n          currentScope = compileWidget($scope, $element, currentScope);\n        });\n        $scope.$on('widgetReload', function() {\n          currentScope = compileWidget($scope, $element, currentScope);\n        });\n        $scope.onEditConfig = function(){\n          $scope.$emit('adfEditWidgetConfig', $scope.model.config, $scope.model.wid);\n        };\n        $scope.onUpdateConfig = function(config){\n          $scope.model.config = config;\n          $scope.$emit('widgetConfigUpdated');\n        };\n      }\n    };\n\n  });\n","/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\nangular.module('adf')\n  .directive('adfWidget', function(_, $injector, $q, $log, $uibModal, $rootScope, dashboard, adfTemplatePath) {\n\n    function preLink($scope) {\n      var definition = $scope.definition;\n      if (definition) {\n        var w = dashboard.widgets[definition.type];\n        if (w) {\n          // pass title\n          if (!definition.title) {\n            definition.title = w.title;\n          }\n\n          definition.minSize = w.minSize;\n\n          //if (!definition.titleTemplateUrl) {\n          //  definition.titleTemplateUrl = adfTemplatePath + 'widget-title.html';\n          //  if (w.titleTemplateUrl) {\n          //    definition.titleTemplateUrl = w.titleTemplateUrl;\n          //  }\n          //}\n\n          //if (!definition.titleTemplateUrl) {\n          //  definition.frameless = w.frameless;\n          //}\n\n          if (!definition.styleClass) {\n            definition.styleClass = w.styleClass;\n          }\n\n          // set id for sortable\n          if (!definition.wid) {\n            definition.wid = dashboard.id();\n          }\n\n          // pass copy of widget to scope\n          $scope.widget = angular.copy(w);\n\n          $scope.widget.titleTemplateUrl = adfTemplatePath + 'widget-title-custom.html';\n          if (w.titleTemplateUrl) {\n            $scope.widget.titleTemplateUrl = w.titleTemplateUrl;\n          }\n\n          // merge default config object with definition from database\n          for (var configIdx in w.config) {\n            if(!definition.config) {\n              definition.config = {};\n            }\n            if(!definition.config[configIdx]) {\n              definition.config[configIdx] = w.config[configIdx];\n            }\n          }\n\n          //// create config object\n          //var config = definition.config;\n          //if (config) {\n          //  if (angular.isString(config)) {\n          //    config = angular.fromJson(config);\n          //  }\n          //} else {\n          //  config = {};\n          //}\n\n          // pass config to scope\n          $scope.config = definition.config;\n          $scope.widgetSharedData = w.widgetSharedData ? angular.copy(w.widgetSharedData) : {};\n\n          $scope.widgetSharedData.editMode = $scope.editMode;\n          $scope.$watch('editMode', function(editMode){\n            $scope.widgetSharedData.editMode = editMode;\n          });\n\n          // collapse exposed $scope.widgetState property\n          if (!$scope.widgetState) {\n            $scope.widgetState = {};\n            $scope.widgetState.isCollapsed= (w.collapsed === true) ? w.collapsed : false;\n            $scope.widgetState.configBeingEdited = false;\n          }\n\n          $scope.widgetState.isValidWidth = !w.minSize || $scope.col.width >= w.minSize;\n\n        } else {\n          $log.warn('could not find widget ' + definition.type);\n        }\n      } else {\n        $log.debug('definition not specified, widget was probably removed');\n      }\n    }\n\n    function postLink($scope, $element) {\n      var definition = $scope.definition;\n      if (definition) {\n        // bind close function\n\n        var deleteWidget = function() {\n          var column = $scope.col;\n          if (column) {\n            //var index = column.widgets.indexOf(definition);\n            var index = _.findIndex(column.widgets, function(w) { return w.wid === definition.wid; });\n            if (index >= 0) {\n              column.widgets.splice(index, 1);\n            }\n          }\n          $element.remove();\n          $rootScope.$broadcast('adfWidgetRemovedFromColumn');\n          $scope.$emit('dashboardWidgetChanged');\n        };\n\n        $scope.remove = function() {\n          if ($scope.options.enableConfirmDelete) {\n            var deleteScope = $scope.$new();\n            var deleteTemplateUrl = adfTemplatePath + 'widget-delete.html';\n            if (definition.deleteTemplateUrl) {\n              deleteTemplateUrl = definition.deleteTemplateUrl;\n            }\n            var opts = {\n              scope: deleteScope,\n              templateUrl: deleteTemplateUrl,\n              backdrop: 'static'\n            };\n            var instance = $uibModal.open(opts);\n\n            deleteScope.closeDialog = function() {\n              instance.close();\n              deleteScope.$destroy();\n            };\n            deleteScope.deleteDialog = function() {\n              deleteWidget();\n              deleteScope.closeDialog();\n            };\n          } else {\n            deleteWidget();\n          }\n        };\n\n        // bind reload function\n        $scope.reload = function() {\n          $scope.$broadcast('widgetReload');\n        };\n\n        // bind edit function\n        $scope.edit = function() {\n          var editScope = $scope.$new();\n          editScope.definition = angular.copy(definition);\n\n          var adfEditTemplatePath = adfTemplatePath + 'widget-edit.html';\n          if (definition.editTemplateUrl) {\n            adfEditTemplatePath = definition.editTemplateUrl;\n          }\n\n          var opts = {\n            scope: editScope,\n            templateUrl: adfEditTemplatePath,\n            backdrop: 'static'\n          };\n\n          var instance = $uibModal.open(opts);\n\n          editScope.closeDialog = function() {\n            instance.close();\n            editScope.$destroy();\n          };\n\n          // TODO create util method\n          function createApplyPromise(result){\n            var promise;\n            if (typeof result === 'boolean'){\n              var deferred = $q.defer();\n              if (result){\n                deferred.resolve();\n              } else {\n                deferred.reject();\n              }\n              promise = deferred.promise;\n            } else {\n              promise = $q.when(result);\n            }\n            return promise;\n          }\n\n          editScope.saveDialog = function() {\n            // clear validation error\n            editScope.validationError = null;\n\n            // build injection locals\n            var widget = $scope.widget;\n            var applyFn = widget.edit.apply;\n            var locals = {\n              widget: widget,\n              definition: editScope.definition,\n              config: editScope.definition.config\n            };\n\n            // invoke apply function and apply if success\n            var result = $injector.invoke(applyFn, applyFn, locals);\n            createApplyPromise(result).then(function(){\n              definition.title = editScope.definition.title;\n              angular.extend(definition.config, editScope.definition.config);\n              if (widget.edit && widget.edit.reload) {\n                // reload content after edit dialog is closed\n                $scope.$broadcast('widgetConfigChanged');\n              }\n              editScope.closeDialog();\n            }, function(err){\n              if (err){\n                editScope.validationError = err;\n              } else {\n                editScope.validationError = 'Validation durring apply failed';\n              }\n            });\n          };\n\n        };\n      } else {\n        $log.debug('widget not found');\n      }\n    }\n\n    return {\n      replace: true,\n      restrict: 'EA',\n      transclude: false,\n      templateUrl: adfTemplatePath + 'widget.html',\n      scope: {\n        definition: '=',\n        col: '=column',\n        editMode: '=',\n        options: '=',\n        widgetState: '=',\n        columnState: '=',\n        dashId: '='\n      },\n      controller: function($scope) {\n\n        $scope.$on('adfDashboardCollapseExpand', function(event, args) {\n          $scope.widgetState.isCollapsed = args.collapseExpandStatus;\n        });\n\n        $scope.$on('adfWidgetEnterEditMode', function(event, widget){\n          if (dashboard.idEquals($scope.definition.wid, widget.wid)){\n            $scope.edit();\n          }\n        });\n\n        $scope.$on('widgetConfigUpdated', function() {\n          $scope.$emit('dashboardWidgetConfigUpdated', $scope.config, $scope.definition.wid, $scope.col.cid);\n        });\n\n        $scope.$on('adfWidgetConfigChanged', function(event, id){\n          var definition = $scope.definition;\n\n          if(definition.wid === id){\n            $scope.reload();\n          }\n        });\n\n        $scope.$on('adfEditWidgetConfigStarted', function(event, id){\n          var definition = $scope.definition;\n\n          $scope.widgetState.configBeingEdited = definition.wid === id;\n        });\n\n        $scope.$watch('widgetState.showFilters', function(showFilters){\n          // override definition.config when toggling filters content, to prevent loosing reference to the latest saved $scope.config object\n          if(showFilters) {\n            $scope.definition.config = $scope.config;\n          }\n        });\n\n\n        $scope.widgetClasses = function(w, definition, widgetState){\n          var classes = [];\n          classes.push('widget-' + definition.type);\n\n          if(definition.styleClass) {\n            classes.push(definition.styleClass);\n          }\n\n          //if (!w.frameless || $scope.editMode){\n          //  classes += ' panel panel-default';\n          //}\n          if (!widgetState.isValidWidth) {\n            classes.push('widgets-warning');\n          }\n\n          if (widgetState.configBeingEdited) {\n            classes.push('widget-being-edited');\n          }\n\n          return classes;\n        };\n\n        $scope.openFullScreen = function() {\n          var definition = $scope.definition;\n          var fullScreenScope = $scope.$new();\n          var opts = {\n            scope: fullScreenScope,\n            templateUrl: adfTemplatePath + 'widget-fullscreen.html',\n            size: definition.modalSize || 'lg', // 'sm', 'lg'\n            backdrop: 'static',\n            windowClass: (definition.fullScreen) ? 'dashboard-modal widget-fullscreen' : 'dashboard-modal'\n          };\n\n          var instance = $uibModal.open(opts);\n          fullScreenScope.closeDialog = function() {\n            instance.close();\n            fullScreenScope.$destroy();\n          };\n        };\n\n        $scope.toggleWidgetFullscreen = function(){\n          $scope.columnState.isExpanded = !$scope.columnState.isExpanded;\n          $rootScope.$broadcast('widgetToggleFullscreen', $scope.col.cid);\n        };\n      },\n      compile: function() {\n\n        /**\n         * use pre link, because link of widget-content\n         * is executed before post link widget\n         */\n        return {\n          pre: preLink,\n          post: postLink\n        };\n      }\n    };\n\n  });\n",null,"(function(window, undefined) {'use strict';\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n\r\nangular.module('adf', ['adf.provider', 'ui.bootstrap'])\r\n  .value('adfTemplatePath', '../src/templates/')\r\n  .value('rowTemplate', '<adf-dashboard-row row=\"row\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"row in column.rows track by $index\" />')\r\n  .value('columnTemplate', '<adf-dashboard-column-custom column=\"column\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"column in row.columns track by $index\" />')\r\n  .value('adfVersion', '0.12.0-SNAPSHOT');\r\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n/* global angular */\nangular.module('adf')\n  .directive('adfDashboardColumnCustom', function ($log, $compile, $rootScope, adfTemplatePath, rowTemplate, dashboard) {\n    \n\n    function columnCustomController($scope) {\n\n      $scope.columnState = {\n        isHidden: false,\n        isExpanded: false\n      };\n\n      var allowPutWidgetIntoColumn = function (widget, sourceColumn) {\n        if ($scope.column === sourceColumn || !$scope.options.singleWidgetMode) {return true;}\n\n        var allowPutWidget = !widget || !widget.minSize || $scope.column.width >= widget.minSize;\n        var columnHasWidgets = $scope.column.widgets.length ? false : true;\n\n        return columnHasWidgets && allowPutWidget;\n      };\n\n      $scope.addWidgetDialog = function () {\n        $scope.$emit('addWidgetDialog', $scope.column);\n      };\n\n      $scope.$on('widgetToggleFullscreen', function (evt, expandedCid) {\n        if ($scope.column.cid !== expandedCid) {\n          $scope.columnState.isHidden = !$scope.columnState.isHidden;\n        }\n      });\n\n      if (!angular.isDefined($scope.column.rows)) {\n        $scope.sortableConfig = {\n          group: {\n            name: 'widgets',\n            put: true\n          },\n          handle: '.adf-move',\n          ghostClass: 'placeholder',\n          animation: 150,\n          onStart: function (evt) {\n            $rootScope.$broadcast('widgetMoveStart', evt.model, $scope.column);\n          },\n          onEnd: function () {\n            $rootScope.$broadcast('widgetMoveEnd');\n            $scope.$emit('dashboardWidgetChanged');\n          },\n          onAdd: function () {\n            $rootScope.$broadcast('adfWidgetAddedToColumn');\n          },\n          onRemove: function () {\n            $rootScope.$broadcast('adfWidgetRemovedFromColumn');\n          },\n          onUpdate: function () {\n            $rootScope.$broadcast('adfWidgetMovedInColumn');\n          }\n        };\n\n        $scope.$on('widgetMoveStart', function (evt, widget, sourceColumn) {\n          $scope.sortableConfig.group.put = allowPutWidgetIntoColumn(widget, sourceColumn);\n        });\n\n        $scope.$on('widgetMoveEnd', function () {\n          $scope.sortableConfig.group.put = true;\n        });\n      }\n    }\n\n    return {\n      restrict: 'E',\n      replace: true,\n      scope: {\n        column: '=',\n        editMode: '=',\n        continuousEditMode: '=',\n        adfModel: '=',\n        options: '='\n      },\n      templateUrl: adfTemplatePath + 'dashboard-column-custom.html',\n      controller: columnCustomController,\n      link: function ($scope, $element) {\n        // set id\n        var col = $scope.column;\n        if (!col.cid) {\n          col.cid = dashboard.id();\n        }\n\n        if (angular.isDefined(col.rows) && angular.isArray(col.rows)) {\n          // be sure to tell Angular about the injected directive and push the new row directive to the column\n          $compile(rowTemplate)($scope, function (cloned) {\n            $element.append(cloned);\n          });\n        }\n      }\n    };\n\n  });\n\n/*\r\n* The MIT License\r\n*\r\n* Copyright (c) 2015, Sebastian Sdorra\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in\r\n* all copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n* SOFTWARE.\r\n*/\r\n\r\n\r\n/* global angular */\r\nangular.module('adf')\r\n  .directive('adfDashboardColumn', function ($log, $compile, $rootScope, adfTemplatePath, rowTemplate, dashboard) {\r\n    \r\n\r\n    /**\r\n     * moves a widget in between a column\r\n     */\r\n    function moveWidgetInColumn($scope, column, evt){\r\n      var widgets = column.widgets;\r\n      // move widget and apply to scope\r\n      $scope.$apply(function(){\r\n        widgets.splice(evt.newIndex, 0, widgets.splice(evt.oldIndex, 1)[0]);\r\n        $rootScope.$broadcast('adfWidgetMovedInColumn');\r\n      });\r\n    }\r\n\r\n    /**\r\n     * finds a widget by its id in the column\r\n     */\r\n    function findWidget(column, index){\r\n      var widget = null;\r\n      for (var i=0; i<column.widgets.length; i++){\r\n        var w = column.widgets[i];\r\n        if (dashboard.idEquals(w.wid,index)){\r\n          widget = w;\r\n          break;\r\n        }\r\n      }\r\n      return widget;\r\n    }\r\n\r\n    /**\r\n     * finds a column by its id in the model\r\n     */\r\n    function findColumn(model, index){\r\n      var column = null;\r\n      for (var i=0; i<model.rows.length; i++){\r\n        var r = model.rows[i];\r\n        for (var j=0; j<r.columns.length; j++){\r\n          var c = r.columns[j];\r\n          if (dashboard.idEquals(c.cid, index)){\r\n            column = c;\r\n            break;\r\n          } else if (c.rows){\r\n            column = findColumn(c, index);\r\n          }\r\n        }\r\n        if (column){\r\n          break;\r\n        }\r\n      }\r\n      return column;\r\n    }\r\n\r\n    /**\r\n     * get the adf id from an html element\r\n     */\r\n    function getId(el){\r\n      var id = el.getAttribute('adf-id');\r\n      return id ? id : '-1';\r\n    }\r\n\r\n    /**\r\n     * adds a widget to a column\r\n     */\r\n    function addWidgetToColumn($scope, model, targetColumn, evt){\r\n      // find source column\r\n      var cid = getId(evt.from);\r\n      var sourceColumn = findColumn(model, cid);\r\n\r\n      if (sourceColumn){\r\n        // find moved widget\r\n        var wid = getId(evt.item);\r\n        var widget = findWidget(sourceColumn, wid);\r\n\r\n        if (widget){\r\n          // add new item and apply to scope\r\n          $scope.$apply(function(){\r\n      \t\t\tif (!targetColumn.widgets) {\r\n      \t\t\t\ttargetColumn.widgets = [];\r\n      \t\t\t}\r\n            targetColumn.widgets.splice(evt.newIndex, 0, widget);\r\n\r\n            $rootScope.$broadcast('adfWidgetAddedToColumn');\r\n            $scope.$emit('dashboardWidgetChanged');\r\n          });\r\n        } else {\r\n          $log.warn('could not find widget with id ' + wid);\r\n        }\r\n      } else {\r\n        $log.warn('could not find column with id ' + cid);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * removes a widget from a column\r\n     */\r\n    function removeWidgetFromColumn($scope, column, evt){\r\n      // remove old item and apply to scope\r\n      $scope.$apply(function(){\r\n        column.widgets.splice(evt.oldIndex, 1);\r\n        $rootScope.$broadcast('adfWidgetRemovedFromColumn');\r\n      });\r\n    }\r\n\r\n    /**\r\n     * enable sortable\r\n     */\r\n    function applySortable($scope, $element, model, column){\r\n      // enable drag and drop\r\n      var el = $element[0];\r\n      var sortable = Sortable.create(el, {\r\n        group: 'widgets',\r\n        handle: '.adf-move',\r\n        ghostClass: 'placeholder',\r\n        animation: 150,\r\n        onAdd: function(evt){\r\n          addWidgetToColumn($scope, model, column, evt);\r\n        },\r\n        onRemove: function(evt){\r\n          removeWidgetFromColumn($scope, column, evt);\r\n        },\r\n        onUpdate: function(evt){\r\n          moveWidgetInColumn($scope, column, evt);\r\n        }\r\n      });\r\n\r\n      // destroy sortable on column destroy event\r\n      $element.on('$destroy', function () {\r\n        // check sortable element, before calling destroy\r\n        // see https://github.com/sdorra/angular-dashboard-framework/issues/118\r\n        if (sortable.el){\r\n          sortable.destroy();\r\n        }\r\n      });\r\n    }\r\n\r\n    return {\r\n      restrict: 'E',\r\n      replace: true,\r\n      scope: {\r\n        column: '=',\r\n        editMode: '=',\r\n        continuousEditMode: '=',\r\n        adfModel: '=',\r\n        options: '='\r\n      },\r\n      templateUrl: adfTemplatePath + 'dashboard-column.html',\r\n      link: function ($scope, $element) {\r\n        // set id\r\n        var col = $scope.column;\r\n        if (!col.cid){\r\n          col.cid = dashboard.id();\r\n        }\r\n\r\n        if (angular.isDefined(col.rows) && angular.isArray(col.rows)) {\r\n          // be sure to tell Angular about the injected directive and push the new row directive to the column\r\n          $compile(rowTemplate)($scope, function(cloned) {\r\n            $element.append(cloned);\r\n          });\r\n        } else {\r\n          // enable drag and drop for widget only columns\r\n          applySortable($scope, $element, $scope.adfModel, col);\r\n        }\r\n      }\r\n    };\r\n  });\r\n\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n/**\r\n * @ngdoc directive\r\n * @name adf.directive:adfDashboard\r\n * @element div\r\n * @restrict EA\r\n * @scope\r\n * @description\r\n *\r\n * `adfDashboard` is a directive which renders the dashboard with all its\r\n * components. The directive requires a name attribute. The name of the\r\n * dashboard can be used to store the model.\r\n *\r\n * @param {string} name name of the dashboard. This attribute is required.\r\n * @param {boolean=} editable false to disable the editmode of the dashboard.\r\n * @param {boolean=} collapsible true to make widgets collapsible on the dashboard.\r\n * @param {boolean=} maximizable true to add a button for open widgets in a large modal panel.\r\n * @param {boolean=} enableConfirmDelete true to ask before remove an widget from the dashboard.\r\n * @param {string=} structure the default structure of the dashboard.\r\n * @param {object=} adfModel model object of the dashboard.\r\n * @param {function=} adfWidgetFilter function to filter widgets on the add dialog.\r\n * @param {boolean=} continuousEditMode enable continuous edit mode, to fire add/change/remove\r\n *                   events during edit mode not reset it if edit mode is exited.\r\n */\r\n\r\nangular.module('adf')\r\n  .directive('adfDashboard', function ($rootScope, $log, $timeout, $uibModal, dashboard, adfTemplatePath) {\r\n    \r\n\r\n    function stringToBoolean(string){\r\n      switch(angular.isDefined(string) ? string.toLowerCase() : null){\r\n        case 'true': case 'yes': case '1': return true;\r\n        case 'false': case 'no': case '0': case null: return false;\r\n        default: return Boolean(string);\r\n      }\r\n    }\r\n\r\n    function widgetFilter(widget, column){\r\n      return !widget.minSize || column.width >= widget.minSize;\r\n    }\r\n\r\n    function copyWidgets(source, target, warnings) {\r\n      if ( source.widgets && source.widgets.length > 0 ){\r\n        var w = source.widgets.shift();\r\n        if(warnings.widgetExceedsMinSize === false && !widgetFilter(w, target)){\r\n          warnings.widgetExceedsMinSize = true;\r\n        }\r\n        while (w){\r\n          target.widgets.push(w);\r\n          w = source.widgets.shift();\r\n        }\r\n      }\r\n    }\r\n\r\n    /**\r\n    * Copy widget from old columns to the new model\r\n    * @param object root the model\r\n    * @param array of columns\r\n    * @param counter\r\n    */\r\n    function fillStructure(root, columns, counter, warnings) {\r\n      counter = counter || 0;\r\n\r\n      if (angular.isDefined(root.rows)) {\r\n        angular.forEach(root.rows, function (row) {\r\n          angular.forEach(row.columns, function (column) {\r\n            // if the widgets prop doesn't exist, create a new array for it.\r\n            // this allows ui.sortable to do it's thing without error\r\n            if (!column.widgets) {\r\n              column.widgets = [];\r\n            }\r\n\r\n            // if a column exist at the counter index, copy over the column\r\n            if (angular.isDefined(columns[counter])) {\r\n              // do not add widgets to a column, which uses nested rows\r\n              if (!angular.isDefined(column.rows)){\r\n                copyWidgets(columns[counter], column, warnings);\r\n                counter++;\r\n                if(warnings && warnings.oneWidgetPerColumn === false && column.widgets.length > 1){\r\n                  warnings.oneWidgetPerColumn = true;\r\n                }\r\n              }\r\n            }\r\n\r\n            // run fillStructure again for any sub rows/columns\r\n            counter = fillStructure(column, columns, counter);\r\n          });\r\n        });\r\n      }\r\n      return counter;\r\n    }\r\n\r\n    /**\r\n    * Read Columns: recursively searches an object for the 'columns' property\r\n    * @param object model\r\n    * @param array  an array of existing columns; used when recursion happens\r\n    */\r\n    function readColumns(root, columns) {\r\n      columns = columns || [];\r\n\r\n      if (angular.isDefined(root.rows)) {\r\n        angular.forEach(root.rows, function (row) {\r\n          angular.forEach(row.columns, function (col) {\r\n            columns.push(col);\r\n            // keep reading columns until we can't any more\r\n            readColumns(col, columns);\r\n          });\r\n        });\r\n      }\r\n\r\n      return columns;\r\n    }\r\n\r\n    function changeStructure(model, structure, scope){\r\n      var columns = readColumns(model);\r\n      var counter = 0;\r\n      var warningMessages = [];\r\n      var warnings = {\r\n        widgetExceedsMinSize: false,\r\n        oneWidgetPerColumn: false\r\n      };\r\n\r\n      model.rows = angular.copy(structure.rows);\r\n\r\n      while ( counter < columns.length ){\r\n        counter = fillStructure(model, columns, counter, warnings);\r\n      }\r\n\r\n      if(warnings.widgetExceedsMinSize) {\r\n        warningMessages.push('At least one placeholder was too small for a widget!');\r\n      }\r\n      if(scope.singleWidgetMode && warnings.oneWidgetPerColumn) {\r\n        warningMessages.push('Multiple widgets were copied to a single placeholder!');\r\n      }\r\n      if(warningMessages.length) {\r\n        scope.$emit('changeStructureWarning', warningMessages);\r\n      }\r\n    }\r\n\r\n    function createConfiguration(type){\r\n      var cfg = {};\r\n      var config = dashboard.widgets[type].config;\r\n      if (config){\r\n        cfg = angular.copy(config);\r\n      }\r\n      return cfg;\r\n    }\r\n\r\n    /**\r\n     * Find first widget column in model.\r\n     *\r\n     * @param dashboard model\r\n     */\r\n    function findFirstWidgetColumn(model){\r\n      var column = null;\r\n      if (!angular.isArray(model.rows)){\r\n        $log.error('model does not have any rows');\r\n        return null;\r\n      }\r\n      for (var i=0; i<model.rows.length; i++){\r\n        var row = model.rows[i];\r\n        if (angular.isArray(row.columns)){\r\n          for (var j=0; j<row.columns.length; j++){\r\n            var col = row.columns[j];\r\n            if (!col.rows){\r\n              column = col;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n        if (column){\r\n          break;\r\n        }\r\n      }\r\n      return column;\r\n    }\r\n\r\n    /**\r\n     * Adds the widget to first column of the model.\r\n     *\r\n     * @param dashboard model\r\n     * @param widget to add to model\r\n     * @param name name of the dashboard\r\n     */\r\n    function addNewWidgetToModel(model, widget, name, column){\r\n      if (model){\r\n        if(!column) {\r\n          column = findFirstWidgetColumn(model);\r\n        }\r\n        if (column){\r\n          if (!column.widgets){\r\n            column.widgets = [];\r\n          }\r\n          column.widgets.unshift(widget);\r\n\r\n          // broadcast added event\r\n          $rootScope.$broadcast('adfWidgetAdded', name, model, widget);\r\n        } else {\r\n          $log.error('could not find first widget column');\r\n        }\r\n      } else {\r\n        $log.error('model is undefined');\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Checks if the edit mode of the widget should be opened immediately.\r\n     *\r\n     * @param widget type\r\n     */\r\n    function isEditModeImmediate(type){\r\n      var widget = dashboard.widgets[type];\r\n      return widget && widget.edit && widget.edit.immediate;\r\n    }\r\n\r\n    /**\r\n     * Opens the edit mode of the specified widget.\r\n     *\r\n     * @param dashboard scope\r\n     * @param widget\r\n     */\r\n    function openEditMode($scope, widget){\r\n      // wait some time before fire enter edit mode event\r\n      $timeout(function(){\r\n        $scope.$broadcast('adfWidgetEnterEditMode', widget);\r\n      }, 200);\r\n    }\r\n\r\n    /**\r\n     * finds a widget by its id in the column\r\n     */\r\n    function findWidget(column, index){\r\n      var widget = null;\r\n      for (var i=0; i<column.widgets.length; i++){\r\n        var w = column.widgets[i];\r\n        if (dashboard.idEquals(w.wid,index)){\r\n          widget = w;\r\n          break;\r\n        }\r\n      }\r\n      return widget;\r\n    }\r\n\r\n    /**\r\n     * finds a column by its id in the model\r\n     */\r\n    function findColumn(model, index){\r\n      var column = null;\r\n      for (var i=0; i<model.rows.length; i++){\r\n        var r = model.rows[i];\r\n        for (var j=0; j<r.columns.length; j++){\r\n          var c = r.columns[j];\r\n          if (dashboard.idEquals(c.cid, index)){\r\n            column = c;\r\n            break;\r\n          } else if (c.rows){\r\n            column = findColumn(c, index);\r\n          }\r\n        }\r\n        if (column){\r\n          break;\r\n        }\r\n      }\r\n      return column;\r\n    }\r\n\r\n    /**\r\n     * Finds widget by id and changes its config\r\n     */\r\n    function changeConfigForWidgetById($scope, wid, config){\r\n      var model = $scope.model,\r\n        rows;\r\n\r\n      rows = model.rows;\r\n\r\n      if(rows){\r\n        angular.forEach(rows, function(row){\r\n          var columns = row.columns;\r\n\r\n          if(columns){\r\n\r\n            angular.forEach(columns, function(column){\r\n              var widgets = column.widgets;\r\n\r\n              if(widgets){\r\n                angular.forEach(widgets, function (widget, key) {\r\n\r\n                  if( widget.wid === wid ){\r\n                    widget.config = config;\r\n                  }\r\n                });\r\n              }\r\n            });\r\n          }\r\n        });\r\n      }\r\n    }\r\n\r\n    function setExternalApiFunctions(scope) {\r\n      var api = {};\r\n\r\n      api.saveDashboard = function() {\r\n        return scope.saveDashboard();\r\n      };\r\n\r\n      api.manageEditMode = function() {\r\n        return scope.manageEditMode();\r\n      };\r\n\r\n      api.editDashboardDialog = function() {\r\n        return scope.editDashboardDialog();\r\n      };\r\n\r\n      api.cancelEditMode = function() {\r\n        return scope.cancelEditMode();\r\n      };\r\n\r\n      api.changeDashStructure = function(name, structure) {\r\n        scope.changeStructure(name, structure, scope);\r\n      };\r\n\r\n      api.triggerDashboardChanged = function() {\r\n        scope.triggerDashboardChanged();\r\n      };\r\n\r\n      api.addNewWidget = function(config, type, name) {\r\n        var defConfig = createConfiguration(type);\r\n\r\n        var widgetName = name ? name : '',\r\n          model = scope.model,\r\n          widget = {\r\n          type: type,\r\n          config: angular.extend({}, defConfig, config),\r\n          wid: dashboard.id(),\r\n          title: widgetName\r\n        };\r\n\r\n        addNewWidgetToModel(model, widget, widgetName);\r\n\r\n        scope.triggerDashboardChanged();\r\n      };\r\n\r\n      api.changeWidgetConfig = function(wid, config) {\r\n        changeConfigForWidgetById(scope, wid, config);\r\n\r\n        scope.$broadcast('adfWidgetConfigChanged', wid);\r\n\r\n        scope.triggerDashboardChanged();\r\n      };\r\n\r\n      scope.externalApi = api;\r\n    }\r\n\r\n    return {\r\n      replace: true,\r\n      restrict: 'EA',\r\n      transclude : false,\r\n      scope: {\r\n        structure: '@',\r\n        name: '@',\r\n        collapsible: '@',\r\n        editable: '@',\r\n        editMode: '@',\r\n        continuousEditMode: '=',\r\n        maximizable: '@',\r\n        adfModel: '=',\r\n        adfWidgetFilter: '=',\r\n        singleWidgetMode: '@',\r\n        externalApi: '='\r\n      },\r\n      controller: function($scope){\r\n        var model = {};\r\n        var structure = {};\r\n        var widgetFilter = null;\r\n        var structureName = {};\r\n        var name = $scope.name;\r\n\r\n        // Watching for changes on adfModel\r\n        $scope.$watch('adfModel', function(oldVal, newVal) {\r\n          // has model changed or is the model attribute not set\r\n          if (newVal !== null || (oldVal === null && newVal === null)) {\r\n            model = $scope.adfModel;\r\n            widgetFilter = $scope.adfWidgetFilter;\r\n            if ( ! model || ! model.rows ){\r\n              structureName = $scope.structure;\r\n              structure = dashboard.structures[structureName];\r\n              if (structure){\r\n                if (model){\r\n                  model.rows = angular.copy(structure).rows;\r\n                } else {\r\n                  model = angular.copy(structure);\r\n                }\r\n                model.structure = structureName;\r\n              } else {\r\n                $log.error( 'could not find structure ' + structureName);\r\n              }\r\n            }\r\n\r\n            if (model) {\r\n              if (!model.title){\r\n                model.title = 'Dashboard';\r\n              }\r\n              if (!model.titleTemplateUrl) {\r\n                model.titleTemplateUrl = adfTemplatePath + 'dashboard-title-custom.html';\r\n              }\r\n              $scope.model = model;\r\n            } else {\r\n              $log.error('could not find or create model');\r\n            }\r\n          }\r\n        }, true);\r\n\r\n        // edit mode\r\n        $scope.editMode = false;\r\n        $scope.editClass = '';\r\n\r\n        $scope.toggleEditMode = function(){\r\n          $scope.editMode = ! $scope.editMode;\r\n          if ($scope.editMode){\r\n            if (!$scope.continuousEditMode) {\r\n              $scope.modelCopy = angular.copy($scope.adfModel, {});\r\n              $rootScope.$broadcast('adfIsEditMode');\r\n            }\r\n          }\r\n\r\n          if (!$scope.editMode){\r\n             $scope.triggerDashboardChanged();\r\n          }\r\n        };\r\n\r\n        $scope.$on('adfToggleEditMode', function() {\r\n            $scope.toggleEditMode();\r\n        });\r\n\r\n        $scope.collapseAll = function(collapseExpandStatus){\r\n          $rootScope.$broadcast('adfDashboardCollapseExpand',{collapseExpandStatus : collapseExpandStatus});\r\n        };\r\n\r\n        $scope.cancelEditMode = function(){\r\n          $scope.editMode = false;\r\n          if (!$scope.continuousEditMode) {\r\n            $scope.modelCopy = angular.copy($scope.modelCopy, $scope.adfModel);\r\n          }\r\n          $rootScope.$broadcast('adfDashboardEditsCancelled');\r\n        };\r\n\r\n        // edit dashboard settings\r\n        $scope.editDashboardDialog = function(){\r\n          var editDashboardScope = $scope.$new();\r\n          // create a copy of the title, to avoid changing the title to\r\n          // \"dashboard\" if the field is empty\r\n          editDashboardScope.copy = {\r\n            title: model.title\r\n          };\r\n          editDashboardScope.structures = dashboard.structures;\r\n\r\n          var adfEditTemplatePath = adfTemplatePath + 'dashboard-edit.html';\r\n          if(model.editTemplateUrl) {\r\n            adfEditTemplatePath = model.editTemplateUrl;\r\n          }\r\n          var instance = $uibModal.open({\r\n            scope: editDashboardScope,\r\n            templateUrl: adfEditTemplatePath,\r\n            backdrop: 'static'\r\n          });\r\n          editDashboardScope.changeStructure = function(name, structure){\r\n            $log.info('change structure to ' + name);\r\n            changeStructure(model, structure, $scope);\r\n          };\r\n          editDashboardScope.closeDialog = function(){\r\n            // copy the new title back to the model\r\n            model.title = editDashboardScope.copy.title;\r\n            // close modal and destroy the scope\r\n            instance.close();\r\n            editDashboardScope.$destroy();\r\n          };\r\n        };\r\n\r\n        // add widget dialog\r\n        $scope.addWidgetDialog = function(column){\r\n          var addScope = $scope.$new();\r\n          var model = $scope.model;\r\n          var widgets;\r\n          if (angular.isFunction(widgetFilter)){\r\n            widgets = {};\r\n            angular.forEach(dashboard.widgets, function(widget, type){\r\n              if (widgetFilter(widget, type, model, column)){\r\n                widgets[type] = widget;\r\n              }\r\n            });\r\n          } else {\r\n            widgets = dashboard.widgets;\r\n          }\r\n          addScope.widgets = widgets;\r\n          addScope.noWidgetsAvailable = angular.equals({}, widgets);\r\n\r\n          var adfAddTemplatePath = adfTemplatePath + 'widget-add.html';\r\n          if(model.addTemplateUrl) {\r\n            adfAddTemplatePath = model.addTemplateUrl;\r\n          }\r\n\r\n          var opts = {\r\n            scope: addScope,\r\n            templateUrl: adfAddTemplatePath,\r\n            backdrop: 'static'\r\n          };\r\n\r\n          var instance = $uibModal.open(opts);\r\n          addScope.addWidget = function(widget){\r\n            var w = {\r\n              type: widget,\r\n              config: createConfiguration(widget),\r\n              wid: dashboard.id()\r\n            };\r\n            addNewWidgetToModel(model, w, name, column);\r\n            // close and destroy\r\n            instance.close();\r\n            addScope.$destroy();\r\n\r\n            // check for open edit mode immediately\r\n            if (isEditModeImmediate(widget)){\r\n              openEditMode($scope, w);\r\n            }\r\n\r\n            $scope.triggerDashboardChanged();\r\n          };\r\n          addScope.closeDialog = function(){\r\n            // close and destroy\r\n            instance.close();\r\n            addScope.$destroy();\r\n          };\r\n        };\r\n\r\n        $scope.manageEditMode = function () {\r\n          $scope.editMode = !$scope.editMode;\r\n          if ($scope.editMode){\r\n            $scope.modelCopy = angular.copy($scope.adfModel, {});\r\n          }\r\n          return $scope.editMode;\r\n        };\r\n\r\n        $scope.saveDashboard = function() {\r\n          $scope.editMode = false;\r\n          $scope.triggerDashboardChanged();\r\n          return false;\r\n        };\r\n\r\n        $scope.changeStructure = function(name, structure) {\r\n          changeStructure(model, structure, $scope);\r\n        };\r\n\r\n        $scope.triggerDashboardChanged = function() {\r\n          $rootScope.$broadcast('adfDashboardChanged', name, model);\r\n        };\r\n\r\n        $scope.addNewWidgetToModel = addNewWidgetToModel;\r\n\r\n        $scope.$on('addWidgetDialog', function(event, column) {\r\n          $scope.addWidgetDialog(column);\r\n        });\r\n\r\n        $scope.$on('dashboardWidgetChanged', function() {\r\n          // the event should only be caught by dashboard directive, that's why it is not propagated further up the chain\r\n          event.stopPropagation();\r\n\r\n          $scope.triggerDashboardChanged();\r\n        });\r\n\r\n        $scope.$on('dashboardWidgetConfigUpdated', function(event, config, wid, cid) {\r\n          // the event should only be caught by dashboard directive, that's why it is not propagated further up the chain\r\n          event.stopPropagation();\r\n\r\n          // we need to overwrite config object before saving to database, otherwise it is set after saving so the changed data is lost\r\n          if(cid) {\r\n            var col = findColumn(model, cid);\r\n            if(wid && col) {\r\n              var widget = findWidget(col, wid);\r\n              if(widget) {\r\n                widget.config = config;\r\n                $scope.triggerDashboardChanged();\r\n              }\r\n            }\r\n          }\r\n        });\r\n\r\n        setExternalApiFunctions($scope);\r\n      },\r\n      link: function ($scope, $element, $attr) {\r\n        // pass options to scope\r\n        var options = {\r\n          name: $attr.name,\r\n          editable: true,\r\n          enableConfirmDelete: stringToBoolean($attr.enableconfirmdelete),\r\n          maximizable: stringToBoolean($attr.maximizable),\r\n          collapsible: stringToBoolean($attr.collapsible),\r\n          singleWidgetMode: stringToBoolean($attr.singleWidgetMode)\r\n        };\r\n        if (angular.isDefined($attr.editable)){\r\n          options.editable = stringToBoolean($attr.editable);\r\n        }\r\n        $scope.options = options;\r\n      },\r\n      templateUrl: adfTemplatePath + 'dashboard.html'\r\n    };\r\n  });\r\n\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n\r\n/**\r\n * @ngdoc object\r\n * @name adf.dashboardProvider\r\n * @description\r\n *\r\n * The dashboardProvider can be used to register structures and widgets.\r\n */\r\nangular.module('adf.provider', [])\r\n  .provider('dashboard', function(){\r\n\r\n    var widgets = {};\r\n    var widgetsPath = '';\r\n    var structures = {};\r\n    var messageTemplate = '<div class=\"alert alert-danger\">{}</div>';\r\n    var loadingTemplate = '\\\r\n      <div class=\"progress progress-striped active\">\\n\\\r\n        <div class=\"progress-bar\" role=\"progressbar\" style=\"width: 100%\">\\n\\\r\n          <span class=\"sr-only\">loading ...</span>\\n\\\r\n        </div>\\n\\\r\n      </div>';\r\n\r\n    // default apply function of widget.edit.apply\r\n    var defaultApplyFunction = function(){\r\n      return true;\r\n    };\r\n\r\n   /**\r\n    * @ngdoc method\r\n    * @name adf.dashboardProvider#widget\r\n    * @methodOf adf.dashboardProvider\r\n    * @description\r\n    *\r\n    * Registers a new widget.\r\n    *\r\n    * @param {string} name of the widget\r\n    * @param {object} widget to be registered.\r\n    *\r\n    *   Object properties:\r\n    *\r\n    *   - `title` - `{string=}` - The title of the widget.\r\n    *   - `description` - `{string=}` - Description of the widget.\r\n    *   - `collapsed` - `{boolean=}` - true if the widget should be in collapsed state. Default is false.\r\n    *   - `config` - `{object}` - Predefined widget configuration.\r\n    *   - `controller` - `{string=|function()=}` - Controller fn that should be\r\n    *      associated with newly created scope of the widget or the name of a\r\n    *      {@link http://docs.angularjs.org/api/angular.Module#controller registered controller}\r\n    *      if passed as a string.\r\n    *   - `controllerAs` - `{string=}` - A controller alias name. If present the controller will be\r\n    *      published to scope under the `controllerAs` name.\r\n    *   - `frameless` - `{boolean=}` - false if the widget should be shown in frameless mode. The default is false.\r\n    *   - `styleClass` - `{object}` - space delimited string or map of classes bound to the widget.\r\n    *   - `template` - `{string=|function()=}` - html template as a string.\r\n    *   - `templateUrl` - `{string=}` - path to an html template.\r\n    *   - `reload` - `{boolean=}` - true if the widget could be reloaded. The default is false.\r\n    *   - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\r\n    *      be injected into the controller. If any of these dependencies are promises, the widget\r\n    *      will wait for them all to be resolved or one to be rejected before the controller is\r\n    *      instantiated.\r\n    *      If all the promises are resolved successfully, the values of the resolved promises are\r\n    *      injected.\r\n    *\r\n    *      The map object is:\r\n    *      - `key` – `{string}`: a name of a dependency to be injected into the controller.\r\n    *      - `factory` - `{string|function}`: If `string` then it is an alias for a service.\r\n    *        Otherwise if function, then it is {@link http://docs.angularjs.org/api/AUTO.$injector#invoke injected}\r\n    *        and the return value is treated as the dependency. If the result is a promise, it is\r\n    *        resolved before its value is injected into the controller.\r\n    *   - `edit` - `{object}` - Edit modus of the widget.\r\n    *      - `controller` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\r\n    *      - `controllerAs` - `{string=}` - Same as above, but for the edit mode of the widget.\r\n    *      - `template` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\r\n    *      - `templateUrl` - `{string=}` - Same as above, but for the edit mode of the widget.\r\n    *      - `resolve` - `{Object.<string, function>=}` - Same as above, but for the edit mode of the widget.\r\n    *      - `reload` - {boolean} - true if the widget should be reloaded, after the edit mode is closed.\r\n    *        Default is true.\r\n    *      - `immediate` - {boolean} - The widget enters the edit mode immediately after creation. Default is false.\r\n    *      - `apply` - `{function()=}` - The apply function is called, before the widget is saved.\r\n    *        The function have to return a boolean or an promise which can be resolved to a boolean.\r\n    *        The function can use injection.\r\n    *\r\n    * @returns {Object} self\r\n    */\r\n    this.widget = function(name, widget){\r\n      var w = angular.extend({reload: false, frameless: false}, widget);\r\n      if ( w.edit ){\r\n        var edit = {\r\n          reload: true,\r\n          immediate: false,\r\n          apply: defaultApplyFunction\r\n        };\r\n        angular.extend(edit, w.edit);\r\n        w.edit = edit;\r\n      }\r\n      widgets[name] = w;\r\n      return this;\r\n    };\r\n\r\n    /**\r\n     * @ngdoc method\r\n     * @name adf.dashboardProvider#widgetsPath\r\n     * @methodOf adf.dashboardProvider\r\n     * @description\r\n     *\r\n     * Sets the path to the directory which contains the widgets. The widgets\r\n     * path is used for widgets with a templateUrl which contains the\r\n     * placeholder {widgetsPath}. The placeholder is replaced with the\r\n     * configured value, before the template is loaded, but the template is\r\n     * cached with the unmodified templateUrl (e.g.: {widgetPath}/src/widgets).\r\n     * The default value of widgetPaths is ''.\r\n     *\r\n     *\r\n     * @param {string} path to the directory which contains the widgets\r\n     *\r\n     * @returns {Object} self\r\n     */\r\n    this.widgetsPath = function(path){\r\n      widgetsPath = path;\r\n      return this;\r\n    };\r\n\r\n   /**\r\n    * @ngdoc method\r\n    * @name adf.dashboardProvider#structure\r\n    * @methodOf adf.dashboardProvider\r\n    * @description\r\n    *\r\n    * Registers a new structure.\r\n    *\r\n    * @param {string} name of the structure\r\n    * @param {object} structure to be registered.\r\n    *\r\n    *   Object properties:\r\n    *\r\n    *   - `rows` - `{Array.<Object>}` - Rows of the dashboard structure.\r\n    *     - `styleClass` - `{string}` - CSS Class of the row.\r\n    *     - `columns` - `{Array.<Object>}` - Columns of the row.\r\n    *       - `styleClass` - `{string}` - CSS Class of the column.\r\n    *\r\n    * @returns {Object} self\r\n    */\r\n    this.structure = function(name, structure){\r\n      structures[name] = structure;\r\n      return this;\r\n    };\r\n\r\n   /**\r\n    * @ngdoc method\r\n    * @name adf.dashboardProvider#messageTemplate\r\n    * @methodOf adf.dashboardProvider\r\n    * @description\r\n    *\r\n    * Changes the template for messages.\r\n    *\r\n    * @param {string} template for messages.\r\n    *\r\n    * @returns {Object} self\r\n    */\r\n    this.messageTemplate = function(template){\r\n      messageTemplate = template;\r\n      return this;\r\n    };\r\n\r\n   /**\r\n    * @ngdoc method\r\n    * @name adf.dashboardProvider#loadingTemplate\r\n    * @methodOf adf.dashboardProvider\r\n    * @description\r\n    *\r\n    * Changes the template which is displayed as\r\n    * long as the widget resources are not resolved.\r\n    *\r\n    * @param {string} template loading template\r\n    *\r\n    * @returns {Object} self\r\n    */\r\n    this.loadingTemplate = function(template){\r\n      loadingTemplate = template;\r\n      return this;\r\n    };\r\n\r\n   /**\r\n    * @ngdoc service\r\n    * @name adf.dashboard\r\n    * @description\r\n    *\r\n    * The dashboard holds all options, structures and widgets.\r\n    *\r\n    * @property {Array.<Object>} widgets Array of registered widgets.\r\n    * @property {string} widgetsPath Default path for widgets.\r\n    * @property {Array.<Object>} structures Array of registered structures.\r\n    * @property {string} messageTemplate Template for messages.\r\n    * @property {string} loadingTemplate Template for widget loading.\r\n    *\r\n    * @returns {Object} self\r\n    */\r\n    this.$get = function(){\r\n      var cid = 0;\r\n\r\n      return {\r\n        widgets: widgets,\r\n        widgetsPath: widgetsPath,\r\n        structures: structures,\r\n        messageTemplate: messageTemplate,\r\n        loadingTemplate: loadingTemplate,\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboard#id\r\n         * @methodOf adf.dashboard\r\n         * @description\r\n         *\r\n         * Creates an ongoing numeric id. The method is used to create ids for\r\n         * columns and widgets in the dashboard.\r\n         */\r\n        id: function(){\r\n          return new Date().getTime() + '-' + (++cid);\r\n        },\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboard#idEqual\r\n         * @methodOf adf.dashboard\r\n         * @description\r\n         *\r\n         * Checks if the given ids are equal.\r\n         *\r\n         * @param {string} id widget or column id\r\n         * @param {string} other widget or column id\r\n         */\r\n         idEquals: function(id, other){\r\n           // use toString, because old ids are numbers\r\n           return ((id) && (other)) && (id.toString() === other.toString());\r\n         }\r\n      };\r\n    };\r\n\r\n  });\r\n\n/*\r\n* The MIT License\r\n*\r\n* Copyright (c) 2015, Sebastian Sdorra\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in\r\n* all copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n* SOFTWARE.\r\n*/\r\n\r\n\r\n/* global angular */\r\nangular.module('adf')\r\n  .directive('adfDashboardRow', function ($compile, adfTemplatePath, columnTemplate) {\r\n    \r\n\r\n    return {\r\n      restrict: 'E',\r\n      replace: true,\r\n      scope: {\r\n        row: '=',\r\n        adfModel: '=',\r\n        editMode: '=',\r\n        continuousEditMode: '=',\r\n        options: '='\r\n      },\r\n      templateUrl: adfTemplatePath + 'dashboard-row.html',\r\n      link: function($scope, $element) {\r\n        if (angular.isDefined($scope.row.columns) && angular.isArray($scope.row.columns)) {\r\n          $compile(columnTemplate)($scope, function(cloned) {\r\n            $element.append(cloned);\r\n          });\r\n        }\r\n      }\r\n    };\r\n  });\r\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\nangular.module('adf')\n  .directive('adfWidgetContent', function($log, $q, $sce, $http, $templateCache,\n          $compile, $controller, $injector, dashboard) {\n\n    function parseUrl(url) {\n      var parsedUrl = url;\n      if (url.indexOf('{widgetsPath}') >= 0) {\n        parsedUrl = url.replace('{widgetsPath}', dashboard.widgetsPath)\n                .replace('//', '/');\n        if (parsedUrl.indexOf('/') === 0) {\n          parsedUrl = parsedUrl.substring(1);\n        }\n      }\n      return parsedUrl;\n    }\n\n    function getTemplate(widget) {\n      var deferred = $q.defer();\n\n      if (widget.template) {\n        deferred.resolve(widget.template);\n      } else if (widget.templateUrl) {\n        // try to fetch template from cache\n        var tpl = $templateCache.get(widget.templateUrl);\n        if (tpl) {\n          deferred.resolve(tpl);\n        } else {\n          var url = $sce.getTrustedResourceUrl(parseUrl(widget.templateUrl));\n          $http.get(url)\n               .success(function(response) {\n                 // put response to cache, with unmodified url as key\n                 $templateCache.put(widget.templateUrl, response);\n                 deferred.resolve(response);\n               })\n               .error(function() {\n                 deferred.reject('could not load template');\n               });\n        }\n      }\n\n      return deferred.promise;\n    }\n\n    function compileWidget($scope, $element, currentScope) {\n      var model = $scope.model;\n      var content = $scope.content;\n\n      // display loading template\n      $element.html(dashboard.loadingTemplate);\n\n      // create new scope\n      var templateScope = $scope.$new();\n\n      // pass config object to scope\n      if (!model.config) {\n        model.config = {};\n      }\n\n      templateScope.config = model.config;\n\n      // local injections\n      var base = {\n        $scope: templateScope,\n        widget: model,\n        config: model.config,\n        widgetSharedData: $scope.widgetSharedData || {},\n        dashId: $scope.dashId\n      };\n\n      // get resolve promises from content object\n      var resolvers = {};\n      resolvers.$tpl = getTemplate(content);\n      if (content.resolve) {\n        angular.forEach(content.resolve, function(promise, key) {\n          if (angular.isString(promise)) {\n            resolvers[key] = $injector.get(promise);\n          } else {\n            resolvers[key] = $injector.invoke(promise, promise, base);\n          }\n        });\n      }\n\n      // resolve all resolvers\n      $q.all(resolvers).then(function(locals) {\n        angular.extend(locals, base);\n\n        // compile & render template\n        var template = locals.$tpl;\n        $element.html(template);\n        if (content.controller) {\n          var templateCtrl = $controller(content.controller, locals);\n          if (content.controllerAs) {\n            templateScope[content.controllerAs] = templateCtrl;\n          }\n          $element.children().data('$ngControllerController', templateCtrl);\n        }\n        $compile($element.contents())(templateScope);\n      }, function(reason) {\n        // handle promise rejection\n        var msg = 'Could not resolve all promises';\n        if (reason) {\n          msg += ': ' + reason;\n        }\n        $log.warn(msg);\n        $element.html(dashboard.messageTemplate.replace(/{}/g, msg));\n      });\n\n      // destroy old scope\n      if (currentScope) {\n        currentScope.$destroy();\n      }\n\n      return templateScope;\n    }\n\n    return {\n      replace: true,\n      restrict: 'EA',\n      transclude: false,\n      scope: {\n        model: '=',\n        content: '=',\n        widgetSharedData: '=',\n        dashId: '='\n      },\n      link: function($scope, $element) {\n        var currentScope = compileWidget($scope, $element, null);\n        $scope.$on('widgetConfigChanged', function() {\n          currentScope = compileWidget($scope, $element, currentScope);\n        });\n        $scope.$on('widgetReload', function() {\n          currentScope = compileWidget($scope, $element, currentScope);\n        });\n        $scope.onEditConfig = function(){\n          $scope.$emit('adfEditWidgetConfig', $scope.model.config, $scope.model.wid);\n        };\n        $scope.onUpdateConfig = function(config){\n          $scope.model.config = config;\n          $scope.$emit('widgetConfigUpdated');\n        };\n      }\n    };\n\n  });\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\nangular.module('adf')\n  .directive('adfWidget', function(_, $injector, $q, $log, $uibModal, $rootScope, dashboard, adfTemplatePath) {\n\n    function preLink($scope) {\n      var definition = $scope.definition;\n      if (definition) {\n        var w = dashboard.widgets[definition.type];\n        if (w) {\n          // pass title\n          if (!definition.title) {\n            definition.title = w.title;\n          }\n\n          definition.minSize = w.minSize;\n\n          //if (!definition.titleTemplateUrl) {\n          //  definition.titleTemplateUrl = adfTemplatePath + 'widget-title.html';\n          //  if (w.titleTemplateUrl) {\n          //    definition.titleTemplateUrl = w.titleTemplateUrl;\n          //  }\n          //}\n\n          //if (!definition.titleTemplateUrl) {\n          //  definition.frameless = w.frameless;\n          //}\n\n          if (!definition.styleClass) {\n            definition.styleClass = w.styleClass;\n          }\n\n          // set id for sortable\n          if (!definition.wid) {\n            definition.wid = dashboard.id();\n          }\n\n          // pass copy of widget to scope\n          $scope.widget = angular.copy(w);\n\n          $scope.widget.titleTemplateUrl = adfTemplatePath + 'widget-title-custom.html';\n          if (w.titleTemplateUrl) {\n            $scope.widget.titleTemplateUrl = w.titleTemplateUrl;\n          }\n\n          // merge default config object with definition from database\n          for (var configIdx in w.config) {\n            if(!definition.config) {\n              definition.config = {};\n            }\n            if(!definition.config[configIdx]) {\n              definition.config[configIdx] = w.config[configIdx];\n            }\n          }\n\n          //// create config object\n          //var config = definition.config;\n          //if (config) {\n          //  if (angular.isString(config)) {\n          //    config = angular.fromJson(config);\n          //  }\n          //} else {\n          //  config = {};\n          //}\n\n          // pass config to scope\n          $scope.config = definition.config;\n          $scope.widgetSharedData = w.widgetSharedData ? angular.copy(w.widgetSharedData) : {};\n\n          $scope.widgetSharedData.editMode = $scope.editMode;\n          $scope.$watch('editMode', function(editMode){\n            $scope.widgetSharedData.editMode = editMode;\n          });\n\n          // collapse exposed $scope.widgetState property\n          if (!$scope.widgetState) {\n            $scope.widgetState = {};\n            $scope.widgetState.isCollapsed= (w.collapsed === true) ? w.collapsed : false;\n            $scope.widgetState.configBeingEdited = false;\n          }\n\n          $scope.widgetState.isValidWidth = !w.minSize || $scope.col.width >= w.minSize;\n\n        } else {\n          $log.warn('could not find widget ' + definition.type);\n        }\n      } else {\n        $log.debug('definition not specified, widget was probably removed');\n      }\n    }\n\n    function postLink($scope, $element) {\n      var definition = $scope.definition;\n      if (definition) {\n        // bind close function\n\n        var deleteWidget = function() {\n          var column = $scope.col;\n          if (column) {\n            //var index = column.widgets.indexOf(definition);\n            var index = _.findIndex(column.widgets, function(w) { return w.wid === definition.wid; });\n            if (index >= 0) {\n              column.widgets.splice(index, 1);\n            }\n          }\n          $element.remove();\n          $rootScope.$broadcast('adfWidgetRemovedFromColumn');\n          $scope.$emit('dashboardWidgetChanged');\n        };\n\n        $scope.remove = function() {\n          if ($scope.options.enableConfirmDelete) {\n            var deleteScope = $scope.$new();\n            var deleteTemplateUrl = adfTemplatePath + 'widget-delete.html';\n            if (definition.deleteTemplateUrl) {\n              deleteTemplateUrl = definition.deleteTemplateUrl;\n            }\n            var opts = {\n              scope: deleteScope,\n              templateUrl: deleteTemplateUrl,\n              backdrop: 'static'\n            };\n            var instance = $uibModal.open(opts);\n\n            deleteScope.closeDialog = function() {\n              instance.close();\n              deleteScope.$destroy();\n            };\n            deleteScope.deleteDialog = function() {\n              deleteWidget();\n              deleteScope.closeDialog();\n            };\n          } else {\n            deleteWidget();\n          }\n        };\n\n        // bind reload function\n        $scope.reload = function() {\n          $scope.$broadcast('widgetReload');\n        };\n\n        // bind edit function\n        $scope.edit = function() {\n          var editScope = $scope.$new();\n          editScope.definition = angular.copy(definition);\n\n          var adfEditTemplatePath = adfTemplatePath + 'widget-edit.html';\n          if (definition.editTemplateUrl) {\n            adfEditTemplatePath = definition.editTemplateUrl;\n          }\n\n          var opts = {\n            scope: editScope,\n            templateUrl: adfEditTemplatePath,\n            backdrop: 'static'\n          };\n\n          var instance = $uibModal.open(opts);\n\n          editScope.closeDialog = function() {\n            instance.close();\n            editScope.$destroy();\n          };\n\n          // TODO create util method\n          function createApplyPromise(result){\n            var promise;\n            if (typeof result === 'boolean'){\n              var deferred = $q.defer();\n              if (result){\n                deferred.resolve();\n              } else {\n                deferred.reject();\n              }\n              promise = deferred.promise;\n            } else {\n              promise = $q.when(result);\n            }\n            return promise;\n          }\n\n          editScope.saveDialog = function() {\n            // clear validation error\n            editScope.validationError = null;\n\n            // build injection locals\n            var widget = $scope.widget;\n            var applyFn = widget.edit.apply;\n            var locals = {\n              widget: widget,\n              definition: editScope.definition,\n              config: editScope.definition.config\n            };\n\n            // invoke apply function and apply if success\n            var result = $injector.invoke(applyFn, applyFn, locals);\n            createApplyPromise(result).then(function(){\n              definition.title = editScope.definition.title;\n              angular.extend(definition.config, editScope.definition.config);\n              if (widget.edit && widget.edit.reload) {\n                // reload content after edit dialog is closed\n                $scope.$broadcast('widgetConfigChanged');\n              }\n              editScope.closeDialog();\n            }, function(err){\n              if (err){\n                editScope.validationError = err;\n              } else {\n                editScope.validationError = 'Validation durring apply failed';\n              }\n            });\n          };\n\n        };\n      } else {\n        $log.debug('widget not found');\n      }\n    }\n\n    return {\n      replace: true,\n      restrict: 'EA',\n      transclude: false,\n      templateUrl: adfTemplatePath + 'widget.html',\n      scope: {\n        definition: '=',\n        col: '=column',\n        editMode: '=',\n        options: '=',\n        widgetState: '=',\n        columnState: '=',\n        dashId: '='\n      },\n      controller: function($scope) {\n\n        $scope.$on('adfDashboardCollapseExpand', function(event, args) {\n          $scope.widgetState.isCollapsed = args.collapseExpandStatus;\n        });\n\n        $scope.$on('adfWidgetEnterEditMode', function(event, widget){\n          if (dashboard.idEquals($scope.definition.wid, widget.wid)){\n            $scope.edit();\n          }\n        });\n\n        $scope.$on('widgetConfigUpdated', function() {\n          $scope.$emit('dashboardWidgetConfigUpdated', $scope.config, $scope.definition.wid, $scope.col.cid);\n        });\n\n        $scope.$on('adfWidgetConfigChanged', function(event, id){\n          var definition = $scope.definition;\n\n          if(definition.wid === id){\n            $scope.reload();\n          }\n        });\n\n        $scope.$on('adfEditWidgetConfigStarted', function(event, id){\n          var definition = $scope.definition;\n\n          $scope.widgetState.configBeingEdited = definition.wid === id;\n        });\n\n        $scope.$watch('widgetState.showFilters', function(showFilters){\n          // override definition.config when toggling filters content, to prevent loosing reference to the latest saved $scope.config object\n          if(showFilters) {\n            $scope.definition.config = $scope.config;\n          }\n        });\n\n\n        $scope.widgetClasses = function(w, definition, widgetState){\n          var classes = [];\n          classes.push('widget-' + definition.type);\n\n          if(definition.styleClass) {\n            classes.push(definition.styleClass);\n          }\n\n          //if (!w.frameless || $scope.editMode){\n          //  classes += ' panel panel-default';\n          //}\n          if (!widgetState.isValidWidth) {\n            classes.push('widgets-warning');\n          }\n\n          if (widgetState.configBeingEdited) {\n            classes.push('widget-being-edited');\n          }\n\n          return classes;\n        };\n\n        $scope.openFullScreen = function() {\n          var definition = $scope.definition;\n          var fullScreenScope = $scope.$new();\n          var opts = {\n            scope: fullScreenScope,\n            templateUrl: adfTemplatePath + 'widget-fullscreen.html',\n            size: definition.modalSize || 'lg', // 'sm', 'lg'\n            backdrop: 'static',\n            windowClass: (definition.fullScreen) ? 'dashboard-modal widget-fullscreen' : 'dashboard-modal'\n          };\n\n          var instance = $uibModal.open(opts);\n          fullScreenScope.closeDialog = function() {\n            instance.close();\n            fullScreenScope.$destroy();\n          };\n        };\n\n        $scope.toggleWidgetFullscreen = function(){\n          $scope.columnState.isExpanded = !$scope.columnState.isExpanded;\n          $rootScope.$broadcast('widgetToggleFullscreen', $scope.col.cid);\n        };\n      },\n      compile: function() {\n\n        /**\n         * use pre link, because link of widget-content\n         * is executed before post link widget\n         */\n        return {\n          pre: preLink,\n          post: postLink\n        };\n      }\n    };\n\n  });\n\nangular.module(\"adf\").run([\"$templateCache\", function($templateCache) {$templateCache.put(\"../src/templates/dashboard-column-custom.html\",\"<div adf-id={{column.cid}} class=\\\"dashboardPlaceholder column {{column.styleClass}}\\\" ng-class=\\\"{\\'widgets-warning\\': options.singleWidgetMode && column.widgets.length > 1, \\'full-screen\\': columnState.isExpanded }\\\" ng-model=column.widgets ng-hide=columnState.isHidden> <div ng-sortable=sortableConfig class=adf-widgets adf-id={{column.cid}} ng-class=\\\"{\\'adf-nested\\':column.rows, \\'disable-put\\': editMode && !sortableConfig.group.put}\\\"> <adf-widget ng-repeat=\\\"definition in column.widgets track by definition.wid\\\" definition=definition column=column edit-mode=editMode options=options widget-state=widgetState column-state=columnState dash-id=adfModel._id> </adf-widget></div> <div ng-if=\\\"editMode && (!options.singleWidgetMode || !column.widgets.length) && !column.rows\\\" class=\\\"text-center js-remove\\\" ng-class=\\\"{\\'empty-placeholder\\': options.singleWidgetMode && !column.widgets.length}\\\"> <a href title=\\\"add new widget\\\" ng-click=addWidgetDialog()> <i class=\\\"fa fa-plus fa-5x\\\"></i> <p>Add widget</p> </a> </div>  </div> \");\n$templateCache.put(\"../src/templates/dashboard-column.html\",\"<div adf-id={{column.cid}} class=column ng-class=column.styleClass ng-model=column.widgets> <adf-widget ng-repeat=\\\"definition in column.widgets\\\" definition=definition column=column edit-mode=editMode options=options widget-state=widgetState>  </adf-widget></div> \");\n$templateCache.put(\"../src/templates/dashboard-edit.html\",\"<div class=modal-header> <button type=button class=close ng-click=closeDialog() aria-hidden=true>&times;</button> <h4 class=modal-title>Edit Dashboard</h4> </div> <div class=modal-body> <form role=form>     <div class=form-group> <label>Structure</label> <div class=radio ng-repeat=\\\"(key, structure) in structures\\\"> <label> <input type=radio value={{key}} ng-model=model.structure ng-change=\\\"changeStructure(key, structure)\\\"> {{key}} </label> </div> </div> </form> </div> <div class=modal-footer> <button type=button class=\\\"btn btn-primary\\\" ng-click=closeDialog()>Close</button> </div> \");\n$templateCache.put(\"../src/templates/dashboard-row.html\",\"<div class=row ng-class=row.styleClass>  </div> \");\n$templateCache.put(\"../src/templates/dashboard-title-custom.html\",\"<div class=\\\"row dashboard-nav\\\"> <div class=col-md-8> <h1 ng-if=editMode> {{model.title}} </h1> </div> <div class=col-md-4> <ul style=\\\"font-size: 16px\\\" class=\\\"nav navbar-nav navbar-right dashboard-menu\\\"> <li ng-if=editMode> <a href title=\\\"edit dashboard\\\" ng-click=editDashboardDialog()> <i class=\\\"fa fa-sliders\\\"></i> <p>Settings</p> </a> </li> <li ng-if=editMode> <a href title=\\\"{{editMode ? \\'save changes\\' : \\'enable edit mode\\'}}\\\" ng-click=toggleEditMode()> <i class=fa x-ng-class=\\\"{\\'fa-pencil\\' : !editMode, \\'fa-floppy-o\\' : editMode}\\\"></i> <p ng-if=editMode>Save</p> <p ng-if=!editMode>Edit</p> </a> </li> <li ng-if=editMode> <a href title=\\\"undo changes\\\" ng-click=cancelEditMode()> <i class=\\\"fa fa-undo adf-flip\\\"></i> <p>Undo</p> </a> </li> </ul> </div> </div> \");\n$templateCache.put(\"../src/templates/dashboard-title.html\",\"<h1> {{model.title}} <span style=\\\"font-size: 16px\\\" class=pull-right> <a href ng-if=editMode title=\\\"add new widget\\\" ng-click=addWidgetDialog()> <i class=\\\"glyphicon glyphicon-plus-sign\\\"></i> </a> <a href ng-if=editMode title=\\\"edit dashboard\\\" ng-click=editDashboardDialog()> <i class=\\\"glyphicon glyphicon-cog\\\"></i> </a> <a href ng-if=options.editable title=\\\"{{editMode ? \\'save changes\\' : \\'enable edit mode\\'}}\\\" ng-click=toggleEditMode()> <i class=glyphicon x-ng-class=\\\"{\\'glyphicon-edit\\' : !editMode, \\'glyphicon-save\\' : editMode}\\\"></i> </a> <a href ng-if=editMode title=\\\"undo changes\\\" ng-click=cancelEditMode()> <i class=\\\"glyphicon glyphicon-repeat adf-flip\\\"></i> </a> </span> </h1> \");\n$templateCache.put(\"../src/templates/dashboard.html\",\"<div class=dashboard-container>  <div class=\\\"dashboard container-fluid\\\" x-ng-class=\\\"{\\'edit\\' : editMode}\\\"> <adf-dashboard-row row=row adf-model=model options=options ng-repeat=\\\"row in model.rows track by $index\\\" edit-mode=editMode continuous-edit-mode=continuousEditMode> </adf-dashboard-row></div> </div> \");\n$templateCache.put(\"../src/templates/widget-add.html\",\"<div class=modal-header> <button type=button class=close ng-click=closeDialog() aria-hidden=true>&times;</button> <h4 class=modal-title>Add new widget</h4> </div> <div class=modal-body> <div style=\\\"display: inline-block;\\\"> <dl class=dl-horizontal> <dt ng-repeat-start=\\\"(key, widget) in widgets\\\"> <a href ng-click=addWidget(key)> {{widget.title}} </a> </dt> <dd ng-repeat-end ng-if=widget.description> {{widget.description}} </dd> </dl> <div ng-if=noWidgetsAvailable>No widgets available for selected placeholder</div> </div> </div> <div class=modal-footer> <button type=button class=\\\"btn btn-primary\\\" ng-click=closeDialog()>Close</button> </div> \");\n$templateCache.put(\"../src/templates/widget-delete.html\",\"<div class=modal-header> <h4 class=modal-title>Delete {{widget.title}}</h4> </div> <div class=modal-body> <form role=form> <div class=form-group> <label for=widgetTitle>Are you sure you want to delete this widget ?</label> </div> </form> </div> <div class=modal-footer> <button type=button class=\\\"btn btn-default\\\" ng-click=closeDialog()>Close</button> <button type=button class=\\\"btn btn-primary\\\" ng-click=deleteDialog()>Delete</button> </div> \");\n$templateCache.put(\"../src/templates/widget-edit.html\",\"<form name=widgetEditForm novalidate role=form ng-submit=saveDialog()> <div class=modal-header> <button type=button class=close ng-click=closeDialog() aria-hidden=true>&times;</button> <h4 class=modal-title>{{widget.title}}</h4> </div> <div class=modal-body> <div class=\\\"alert alert-danger\\\" role=alert ng-show=validationError> <strong>Apply error:</strong> {{validationError}} </div> <div class=form-group> <label for=widgetTitle>Title</label> <input type=text class=form-control id=widgetTitle ng-model=definition.title placeholder=\\\"Enter title\\\" required> </div> <div ng-if=widget.edit> <adf-widget-content model=definition content=widget.edit dash-id=dashId> </adf-widget-content></div> </div> <div class=modal-footer> <button type=button class=\\\"btn btn-default\\\" ng-click=closeDialog()>Cancel</button> <input type=submit class=\\\"btn btn-primary\\\" ng-disabled=widgetEditForm.$invalid value=Apply> </div> </form> \");\n$templateCache.put(\"../src/templates/widget-fullscreen.html\",\"<div class=modal-header> <div class=\\\"pull-right widget-icons\\\"> <a href title=\\\"Reload Widget Content\\\" ng-if=widget.reload ng-click=reload()> <i class=\\\"glyphicon glyphicon-refresh\\\"></i> </a> <a href title=close ng-click=closeDialog()> <i class=\\\"glyphicon glyphicon-remove\\\"></i> </a> </div> <h4 class=modal-title>{{definition.title}}</h4> </div> <div class=modal-body> <adf-widget-content model=definition content=widget> </adf-widget-content></div> <div class=modal-footer> <button type=button class=\\\"btn btn-primary\\\" ng-click=closeDialog()>Close</button> </div> \");\n$templateCache.put(\"../src/templates/widget-title-custom.html\",\"<div class=panel-title> <div class=status-bar-widget ng-if=widget.statusBar> <adf-widget-content class=status-bar-widget-content model=definition content=widget.statusBar widget-shared-data=widgetSharedData> </adf-widget-content></div> <div class=\\\"widget-actions pull-right\\\"> <div class=pull-right>  <button class=\\\"btn btn-link\\\" title=\\\"filter widget data\\\" ng-disabled=\\\"editMode || widgetSharedData.layoutEditMode\\\" ng-click=\\\"widgetState.showFilters = !widgetState.showFilters\\\" ng-if=widget.filter> <i class=\\\"fa fa-filter\\\"></i> </button>  <button class=\\\"btn btn-link\\\" title=Minimize/Maximize ng-click=toggleWidgetFullscreen() ng-show=options.maximizable> <i class=fa ng-class=\\\"columnState.isExpanded ? \\'fa-compress\\' : \\'fa-expand\\'\\\"></i> </button>  <button class=\\\"btn btn-link\\\" title=\\\"remove widget\\\" ng-click=remove() ng-if=editMode> <i class=\\\"fa fa-times\\\"></i> </button> </div> <div ng-if=widget.headerActions class=pull-right> <adf-widget-content model=definition content=widget.headerActions widget-shared-data=widgetSharedData> </adf-widget-content></div> <div class=clear></div> </div> <div class=clear></div> </div> \");\n$templateCache.put(\"../src/templates/widget-title.html\",\"<h3 class=panel-title> {{definition.title}} <span class=pull-right> <a href title=\\\"reload widget content\\\" ng-if=widget.reload ng-click=reload()> <i class=\\\"glyphicon glyphicon-refresh\\\"></i> </a>  <a href title=\\\"change widget location\\\" class=adf-move ng-if=editMode> <i class=\\\"glyphicon glyphicon-move\\\"></i> </a>  <a href title=\\\"collapse widget\\\" ng-show=\\\"options.collapsible && !widgetState.isCollapsed\\\" ng-click=\\\"widgetState.isCollapsed = !widgetState.isCollapsed\\\"> <i class=\\\"glyphicon glyphicon-minus\\\"></i> </a>  <a href title=\\\"expand widget\\\" ng-show=\\\"options.collapsible && widgetState.isCollapsed\\\" ng-click=\\\"widgetState.isCollapsed = !widgetState.isCollapsed\\\"> <i class=\\\"glyphicon glyphicon-plus\\\"></i> </a>   <a href title=Minimize/Maximize ng-click=openFullScreen() ng-show=options.maximizable> <i class=\\\"glyphicon glyphicon-fullscreen\\\"></i> </a>  <a href title=\\\"remove widget\\\" ng-click=remove() ng-if=editMode> <i class=\\\"glyphicon glyphicon-remove\\\"></i> </a> </span> </h3> \");\n$templateCache.put(\"../src/templates/widget.html\",\"<div adf-id={{definition.wid}} adf-widget-type={{definition.type}} ng-class=\\\"widgetClasses(widget, definition, widgetState)\\\" class=\\\"widget panel panel-default\\\"> <div class=widget-growl-messages> <div growl reference={{definition.wid}} inline=true></div> </div> <div class=\\\"panel-heading clearfix\\\" ng-if=\\\"!widget.frameless || editMode\\\"> <div ng-include src=widget.titleTemplateUrl ng-class=\\\"{\\'adf-move\\':editMode}\\\"></div> </div> <div ng-class=\\\"{\\'panel-body\\':!widget.frameless || editMode}\\\" uib-collapse=widgetState.isCollapsed> <div ng-if=\\\"widget.filter && widgetState.showFilters\\\" class=widget-filter> <adf-widget-content model=definition content=widget.filter widget-shared-data=widgetSharedData dash-id=dashId> </adf-widget-content></div> <adf-widget-content model=definition content=widget widget-shared-data=widgetSharedData dash-id=dashId> </adf-widget-content></div> </div> \");}]);})(window);"],"sourceRoot":"/source/"}